// +build ignore

package main

import (
	"bytes"
	"fmt"
	"go/format"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"
)

const (
	outFile = "data.go"
	rootDir = "root"
)

func main() {
	buf := new(bytes.Buffer)

	fmt.Fprint(buf, head)

	filepath.Walk(rootDir, func(path string, info os.FileInfo, err error) error {
		if info.IsDir() {
			return nil
		}

		filename := strings.Replace(strings.TrimPrefix(path, rootDir), string(os.PathSeparator), "/", -1)
		data, err := ioutil.ReadFile(path)
		if err != nil {
			log.Fatalf("failed to read file: %v", err)
		}

		fmt.Fprintf(
			buf,
			"%q: &fileData{name: %q, mtime: %d, size: %d, body: []byte(%+q)},\n",
			filename,
			info.Name(),
			info.ModTime().Unix(),
			len(data),
			data,
		)

		return nil
	})

	fmt.Fprint(buf, tail)

	out, err := format.Source(buf.Bytes())
	if err != nil {
		log.Fatalf("failed to format source: %v", err)
	}

	err = ioutil.WriteFile(outFile, out, 0666)
	if err != nil {
		log.Fatalf("failed to write file: %v", err)
	}
}

var head = `// Generated by "go run gen.go". DO NOT EDIT.

package static

var fs = embeddedFilesystem{
`

var tail = `}`
