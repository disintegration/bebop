// Package supportcases provides access to the Google Support Cases Private API.
//
// See https://sites.google.com/a/google.com/cases/
//
// Usage example:
//
//   import "google.golang.org/api/supportcases/v2"
//   ...
//   supportcasesService, err := supportcases.New(oauthHttpClient)
package supportcases // import "google.golang.org/api/supportcases/v2"

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	context "golang.org/x/net/context"
	ctxhttp "golang.org/x/net/context/ctxhttp"
	gensupport "google.golang.org/api/gensupport"
	googleapi "google.golang.org/api/googleapi"
	"io"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// Always reference these packages, just in case the auto-generated code
// below doesn't.
var _ = bytes.NewBuffer
var _ = strconv.Itoa
var _ = fmt.Sprintf
var _ = json.NewDecoder
var _ = io.Copy
var _ = url.Parse
var _ = gensupport.MarshalJSON
var _ = googleapi.Version
var _ = errors.New
var _ = strings.Replace
var _ = context.Canceled
var _ = ctxhttp.Do

const apiId = "supportcases:v2"
const apiName = "supportcases"
const apiVersion = "v2"
const basePath = "https://supportcases.googleapis.com/v2/"

// OAuth2 scopes used by this API.
const (
	// View and manage your Google Support Cases
	CasesScope = "https://www.googleapis.com/auth/cases"

	// View your Google Support Cases
	CasesReadonlyScope = "https://www.googleapis.com/auth/cases.readonly"

	// View and manage your support data
	SupportcontentScope = "https://www.googleapis.com/auth/supportcontent"
)

func New(client *http.Client) (*Service, error) {
	if client == nil {
		return nil, errors.New("client is nil")
	}
	s := &Service{client: client, BasePath: basePath}
	s.AgentActivities = NewAgentActivitiesService(s)
	s.AgentSettings = NewAgentSettingsService(s)
	s.Attributes = NewAttributesService(s)
	s.Cases = NewCasesService(s)
	s.CategoryInfos = NewCategoryInfosService(s)
	s.Communications = NewCommunicationsService(s)
	s.CustomerInteractions = NewCustomerInteractionsService(s)
	s.CustomerIssues = NewCustomerIssuesService(s)
	s.Devices = NewDevicesService(s)
	s.GiftCards = NewGiftCardsService(s)
	s.Ginlogs = NewGinlogsService(s)
	s.HardwareAuditor = NewHardwareAuditorService(s)
	s.HardwareOrders = NewHardwareOrdersService(s)
	s.HardwareShipments = NewHardwareShipmentsService(s)
	s.Opportunities = NewOpportunitiesService(s)
	s.Play = NewPlayService(s)
	s.Products = NewProductsService(s)
	s.Resolutions = NewResolutionsService(s)
	s.Rma = NewRmaService(s)
	s.Rmas = NewRmasService(s)
	s.Teams = NewTeamsService(s)
	s.TroubleshooterSessions = NewTroubleshooterSessionsService(s)
	s.Wallets = NewWalletsService(s)
	s.Youtube = NewYoutubeService(s)
	return s, nil
}

type Service struct {
	client    *http.Client
	BasePath  string // API endpoint base URL
	UserAgent string // optional additional User-Agent fragment

	AgentActivities *AgentActivitiesService

	AgentSettings *AgentSettingsService

	Attributes *AttributesService

	Cases *CasesService

	CategoryInfos *CategoryInfosService

	Communications *CommunicationsService

	CustomerInteractions *CustomerInteractionsService

	CustomerIssues *CustomerIssuesService

	Devices *DevicesService

	GiftCards *GiftCardsService

	Ginlogs *GinlogsService

	HardwareAuditor *HardwareAuditorService

	HardwareOrders *HardwareOrdersService

	HardwareShipments *HardwareShipmentsService

	Opportunities *OpportunitiesService

	Play *PlayService

	Products *ProductsService

	Resolutions *ResolutionsService

	Rma *RmaService

	Rmas *RmasService

	Teams *TeamsService

	TroubleshooterSessions *TroubleshooterSessionsService

	Wallets *WalletsService

	Youtube *YoutubeService
}

func (s *Service) userAgent() string {
	if s.UserAgent == "" {
		return googleapi.UserAgent
	}
	return googleapi.UserAgent + " " + s.UserAgent
}

func NewAgentActivitiesService(s *Service) *AgentActivitiesService {
	rs := &AgentActivitiesService{s: s}
	return rs
}

type AgentActivitiesService struct {
	s *Service
}

func NewAgentSettingsService(s *Service) *AgentSettingsService {
	rs := &AgentSettingsService{s: s}
	return rs
}

type AgentSettingsService struct {
	s *Service
}

func NewAttributesService(s *Service) *AttributesService {
	rs := &AttributesService{s: s}
	return rs
}

type AttributesService struct {
	s *Service
}

func NewCasesService(s *Service) *CasesService {
	rs := &CasesService{s: s}
	rs.Attributes = NewCasesAttributesService(s)
	rs.Customer = NewCasesCustomerService(s)
	rs.Issue = NewCasesIssueService(s)
	rs.Workflows = NewCasesWorkflowsService(s)
	return rs
}

type CasesService struct {
	s *Service

	Attributes *CasesAttributesService

	Customer *CasesCustomerService

	Issue *CasesIssueService

	Workflows *CasesWorkflowsService
}

func NewCasesAttributesService(s *Service) *CasesAttributesService {
	rs := &CasesAttributesService{s: s}
	return rs
}

type CasesAttributesService struct {
	s *Service
}

func NewCasesCustomerService(s *Service) *CasesCustomerService {
	rs := &CasesCustomerService{s: s}
	rs.Contact = NewCasesCustomerContactService(s)
	return rs
}

type CasesCustomerService struct {
	s *Service

	Contact *CasesCustomerContactService
}

func NewCasesCustomerContactService(s *Service) *CasesCustomerContactService {
	rs := &CasesCustomerContactService{s: s}
	return rs
}

type CasesCustomerContactService struct {
	s *Service
}

func NewCasesIssueService(s *Service) *CasesIssueService {
	rs := &CasesIssueService{s: s}
	rs.Product = NewCasesIssueProductService(s)
	return rs
}

type CasesIssueService struct {
	s *Service

	Product *CasesIssueProductService
}

func NewCasesIssueProductService(s *Service) *CasesIssueProductService {
	rs := &CasesIssueProductService{s: s}
	return rs
}

type CasesIssueProductService struct {
	s *Service
}

func NewCasesWorkflowsService(s *Service) *CasesWorkflowsService {
	rs := &CasesWorkflowsService{s: s}
	return rs
}

type CasesWorkflowsService struct {
	s *Service
}

func NewCategoryInfosService(s *Service) *CategoryInfosService {
	rs := &CategoryInfosService{s: s}
	rs.Properties = NewCategoryInfosPropertiesService(s)
	return rs
}

type CategoryInfosService struct {
	s *Service

	Properties *CategoryInfosPropertiesService
}

func NewCategoryInfosPropertiesService(s *Service) *CategoryInfosPropertiesService {
	rs := &CategoryInfosPropertiesService{s: s}
	return rs
}

type CategoryInfosPropertiesService struct {
	s *Service
}

func NewCommunicationsService(s *Service) *CommunicationsService {
	rs := &CommunicationsService{s: s}
	rs.Attachments = NewCommunicationsAttachmentsService(s)
	return rs
}

type CommunicationsService struct {
	s *Service

	Attachments *CommunicationsAttachmentsService
}

func NewCommunicationsAttachmentsService(s *Service) *CommunicationsAttachmentsService {
	rs := &CommunicationsAttachmentsService{s: s}
	return rs
}

type CommunicationsAttachmentsService struct {
	s *Service
}

func NewCustomerInteractionsService(s *Service) *CustomerInteractionsService {
	rs := &CustomerInteractionsService{s: s}
	return rs
}

type CustomerInteractionsService struct {
	s *Service
}

func NewCustomerIssuesService(s *Service) *CustomerIssuesService {
	rs := &CustomerIssuesService{s: s}
	return rs
}

type CustomerIssuesService struct {
	s *Service
}

func NewDevicesService(s *Service) *DevicesService {
	rs := &DevicesService{s: s}
	return rs
}

type DevicesService struct {
	s *Service
}

func NewGiftCardsService(s *Service) *GiftCardsService {
	rs := &GiftCardsService{s: s}
	return rs
}

type GiftCardsService struct {
	s *Service
}

func NewGinlogsService(s *Service) *GinlogsService {
	rs := &GinlogsService{s: s}
	return rs
}

type GinlogsService struct {
	s *Service
}

func NewHardwareAuditorService(s *Service) *HardwareAuditorService {
	rs := &HardwareAuditorService{s: s}
	rs.Orders = NewHardwareAuditorOrdersService(s)
	rs.Shipments = NewHardwareAuditorShipmentsService(s)
	return rs
}

type HardwareAuditorService struct {
	s *Service

	Orders *HardwareAuditorOrdersService

	Shipments *HardwareAuditorShipmentsService
}

func NewHardwareAuditorOrdersService(s *Service) *HardwareAuditorOrdersService {
	rs := &HardwareAuditorOrdersService{s: s}
	return rs
}

type HardwareAuditorOrdersService struct {
	s *Service
}

func NewHardwareAuditorShipmentsService(s *Service) *HardwareAuditorShipmentsService {
	rs := &HardwareAuditorShipmentsService{s: s}
	return rs
}

type HardwareAuditorShipmentsService struct {
	s *Service
}

func NewHardwareOrdersService(s *Service) *HardwareOrdersService {
	rs := &HardwareOrdersService{s: s}
	return rs
}

type HardwareOrdersService struct {
	s *Service
}

func NewHardwareShipmentsService(s *Service) *HardwareShipmentsService {
	rs := &HardwareShipmentsService{s: s}
	return rs
}

type HardwareShipmentsService struct {
	s *Service
}

func NewOpportunitiesService(s *Service) *OpportunitiesService {
	rs := &OpportunitiesService{s: s}
	rs.Pitches = NewOpportunitiesPitchesService(s)
	return rs
}

type OpportunitiesService struct {
	s *Service

	Pitches *OpportunitiesPitchesService
}

func NewOpportunitiesPitchesService(s *Service) *OpportunitiesPitchesService {
	rs := &OpportunitiesPitchesService{s: s}
	return rs
}

type OpportunitiesPitchesService struct {
	s *Service
}

func NewPlayService(s *Service) *PlayService {
	rs := &PlayService{s: s}
	rs.DigitalContent = NewPlayDigitalContentService(s)
	return rs
}

type PlayService struct {
	s *Service

	DigitalContent *PlayDigitalContentService
}

func NewPlayDigitalContentService(s *Service) *PlayDigitalContentService {
	rs := &PlayDigitalContentService{s: s}
	rs.Orders = NewPlayDigitalContentOrdersService(s)
	rs.Subscriptions = NewPlayDigitalContentSubscriptionsService(s)
	return rs
}

type PlayDigitalContentService struct {
	s *Service

	Orders *PlayDigitalContentOrdersService

	Subscriptions *PlayDigitalContentSubscriptionsService
}

func NewPlayDigitalContentOrdersService(s *Service) *PlayDigitalContentOrdersService {
	rs := &PlayDigitalContentOrdersService{s: s}
	return rs
}

type PlayDigitalContentOrdersService struct {
	s *Service
}

func NewPlayDigitalContentSubscriptionsService(s *Service) *PlayDigitalContentSubscriptionsService {
	rs := &PlayDigitalContentSubscriptionsService{s: s}
	return rs
}

type PlayDigitalContentSubscriptionsService struct {
	s *Service
}

func NewProductsService(s *Service) *ProductsService {
	rs := &ProductsService{s: s}
	return rs
}

type ProductsService struct {
	s *Service
}

func NewResolutionsService(s *Service) *ResolutionsService {
	rs := &ResolutionsService{s: s}
	rs.Cohorts = NewResolutionsCohortsService(s)
	return rs
}

type ResolutionsService struct {
	s *Service

	Cohorts *ResolutionsCohortsService
}

func NewResolutionsCohortsService(s *Service) *ResolutionsCohortsService {
	rs := &ResolutionsCohortsService{s: s}
	return rs
}

type ResolutionsCohortsService struct {
	s *Service
}

func NewRmaService(s *Service) *RmaService {
	rs := &RmaService{s: s}
	return rs
}

type RmaService struct {
	s *Service
}

func NewRmasService(s *Service) *RmasService {
	rs := &RmasService{s: s}
	return rs
}

type RmasService struct {
	s *Service
}

func NewTeamsService(s *Service) *TeamsService {
	rs := &TeamsService{s: s}
	return rs
}

type TeamsService struct {
	s *Service
}

func NewTroubleshooterSessionsService(s *Service) *TroubleshooterSessionsService {
	rs := &TroubleshooterSessionsService{s: s}
	return rs
}

type TroubleshooterSessionsService struct {
	s *Service
}

func NewWalletsService(s *Service) *WalletsService {
	rs := &WalletsService{s: s}
	rs.Accounts = NewWalletsAccountsService(s)
	rs.PaymentInstrumentTypeInfos = NewWalletsPaymentInstrumentTypeInfosService(s)
	rs.PaymentInstruments = NewWalletsPaymentInstrumentsService(s)
	return rs
}

type WalletsService struct {
	s *Service

	Accounts *WalletsAccountsService

	PaymentInstrumentTypeInfos *WalletsPaymentInstrumentTypeInfosService

	PaymentInstruments *WalletsPaymentInstrumentsService
}

func NewWalletsAccountsService(s *Service) *WalletsAccountsService {
	rs := &WalletsAccountsService{s: s}
	rs.PaymentInstruments = NewWalletsAccountsPaymentInstrumentsService(s)
	return rs
}

type WalletsAccountsService struct {
	s *Service

	PaymentInstruments *WalletsAccountsPaymentInstrumentsService
}

func NewWalletsAccountsPaymentInstrumentsService(s *Service) *WalletsAccountsPaymentInstrumentsService {
	rs := &WalletsAccountsPaymentInstrumentsService{s: s}
	return rs
}

type WalletsAccountsPaymentInstrumentsService struct {
	s *Service
}

func NewWalletsPaymentInstrumentTypeInfosService(s *Service) *WalletsPaymentInstrumentTypeInfosService {
	rs := &WalletsPaymentInstrumentTypeInfosService{s: s}
	return rs
}

type WalletsPaymentInstrumentTypeInfosService struct {
	s *Service
}

func NewWalletsPaymentInstrumentsService(s *Service) *WalletsPaymentInstrumentsService {
	rs := &WalletsPaymentInstrumentsService{s: s}
	return rs
}

type WalletsPaymentInstrumentsService struct {
	s *Service
}

func NewYoutubeService(s *Service) *YoutubeService {
	rs := &YoutubeService{s: s}
	rs.Components = NewYoutubeComponentsService(s)
	rs.Entitlements = NewYoutubeEntitlementsService(s)
	rs.Transactions = NewYoutubeTransactionsService(s)
	return rs
}

type YoutubeService struct {
	s *Service

	Components *YoutubeComponentsService

	Entitlements *YoutubeEntitlementsService

	Transactions *YoutubeTransactionsService
}

func NewYoutubeComponentsService(s *Service) *YoutubeComponentsService {
	rs := &YoutubeComponentsService{s: s}
	return rs
}

type YoutubeComponentsService struct {
	s *Service
}

func NewYoutubeEntitlementsService(s *Service) *YoutubeEntitlementsService {
	rs := &YoutubeEntitlementsService{s: s}
	return rs
}

type YoutubeEntitlementsService struct {
	s *Service
}

func NewYoutubeTransactionsService(s *Service) *YoutubeTransactionsService {
	rs := &YoutubeTransactionsService{s: s}
	return rs
}

type YoutubeTransactionsService struct {
	s *Service
}

type Account struct {
	AccountId string `json:"accountId,omitempty"`

	ProductId string `json:"productId,omitempty"`

	ProductName string `json:"productName,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AccountId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AccountId") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Account) MarshalJSON() ([]byte, error) {
	type noMethod Account
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type AccountLookupTool struct {
	ProductId string `json:"productId,omitempty"`

	ProductName string `json:"productName,omitempty"`

	UrlTemplate string `json:"urlTemplate,omitempty"`

	// ForceSendFields is a list of field names (e.g. "ProductId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ProductId") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *AccountLookupTool) MarshalJSON() ([]byte, error) {
	type noMethod AccountLookupTool
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type AccountReview struct {
	ReviewKey *ReviewKey `json:"reviewKey,omitempty"`

	// Possible values:
	//   "ASSIGNED"
	//   "CLOSED"
	//   "REVIEW_STATE_UNSPECIFIED"
	//   "UNASSIGNED"
	//   "UNKNOWN_REVIEW_STATE"
	ReviewState string `json:"reviewState,omitempty"`

	// Possible values:
	//   "ACCOUNT_REVIEW_TYPE_UNSPECIFIED"
	//   "AML"
	//   "BVID_COMPLIANCE_FRAUD"
	//   "ID_VERIFICATION_UNKNOWN_TYPE"
	//   "LEGACY_HOLD_REVIEW"
	//   "OFFLINE_SANCTIONS_COMPLIANCE_FRAUD"
	//   "ONLINE_SANCTIONS"
	//   "RISK_FRAUD"
	ReviewType string `json:"reviewType,omitempty"`

	// ForceSendFields is a list of field names (e.g. "ReviewKey") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ReviewKey") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *AccountReview) MarshalJSON() ([]byte, error) {
	type noMethod AccountReview
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type AccountSignalResult struct {
	BvidDocsSubmissionStatus *CustomerDocsSubmissionStatus `json:"bvidDocsSubmissionStatus,omitempty"`

	// Possible values:
	//   "GAIA_ACCOUNT_SERVICE_STATUS_DISABLED"
	//   "GAIA_ACCOUNT_SERVICE_STATUS_REGISTERED"
	//   "GAIA_ACCOUNT_SERVICE_STATUS_SUSPENDED"
	//   "GAIA_ACCOUNT_SERVICE_STATUS_UNSPECIFIED"
	GaiaCheckoutServiceStatus string `json:"gaiaCheckoutServiceStatus,omitempty"`

	HasPositiveWalletBalance bool `json:"hasPositiveWalletBalance,omitempty"`

	IsVip bool `json:"isVip,omitempty"`

	// Possible values:
	//   "GOOGLE_PLAY"
	//   "GOOGLE_STORE"
	//   "P2P_RECEIVER"
	//   "P2P_SENDER"
	//   "TAP_AND_PAY"
	//   "UNKNOWN_WALLET_TRANSACTION_TYPE"
	//   "WALLET_CARD"
	//   "YOUTUBE_PURCHASE"
	MostRecentTransactionType string `json:"mostRecentTransactionType,omitempty"`

	OfflineCheckDocsSubmissionStatus *CustomerDocsSubmissionStatus `json:"offlineCheckDocsSubmissionStatus,omitempty"`

	RiskDocsSubmissionStatus *CustomerDocsSubmissionStatus `json:"riskDocsSubmissionStatus,omitempty"`

	SanctionsDocsSubmissionStatus *CustomerDocsSubmissionStatus `json:"sanctionsDocsSubmissionStatus,omitempty"`

	// Possible values:
	//   "ACCOUNT_SIGNAL_TYPE_UNSPECIFIED"
	//   "CUSTOMER_BVID_DOCS_SUBMISSION_STATUS"
	//   "CUSTOMER_OFFLINE_CHECK_DOCS_SUBMISSION_STATUS"
	//   "CUSTOMER_RISK_DOCS_SUBMISSION_STATUS"
	//   "CUSTOMER_SANCTIONS_DOCS_SUBMISSION_STATUS"
	//   "GAIA_ACCOUNT_CHECKOUT_SERVICE_STATUS"
	//   "HAS_POSITIVE_WALLET_BALANCE"
	//   "IS_VIP"
	//   "MOST_RECENT_TRANSACTION_TYPE"
	Type string `json:"type,omitempty"`

	// ForceSendFields is a list of field names (e.g.
	// "BvidDocsSubmissionStatus") to unconditionally include in API
	// requests. By default, fields with empty values are omitted from API
	// requests. However, any non-pointer, non-interface field appearing in
	// ForceSendFields will be sent to the server regardless of whether the
	// field is empty or not. This may be used to include empty fields in
	// Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "BvidDocsSubmissionStatus")
	// to include in API requests with the JSON null value. By default,
	// fields with empty values are omitted from API requests. However, any
	// field with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *AccountSignalResult) MarshalJSON() ([]byte, error) {
	type noMethod AccountSignalResult
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Action struct {
	CannedResponses *CannedResponseAction `json:"cannedResponses,omitempty"`

	IssueCategories *IssueCategoryAction `json:"issueCategories,omitempty"`

	// Possible values:
	//   "ASSIGNED"
	//   "BLOCKED_BY"
	//   "FINISHED"
	//   "IN_CONSULT"
	//   "NEED_INFO"
	//   "NEW"
	//   "SOLUTION_OFFERED"
	//   "UNASSIGNED"
	//   "UNKNOWN_CASE_STATE"
	NextState string `json:"nextState,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CannedResponses") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CannedResponses") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *Action) MarshalJSON() ([]byte, error) {
	type noMethod Action
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Action1 struct {
	AlertMessage string `json:"alertMessage,omitempty"`

	ConsultAction *ConsultAction `json:"consultAction,omitempty"`

	DifmAction *DifmAction `json:"difmAction,omitempty"`

	ScriptId int64 `json:"scriptId,omitempty"`

	ShowSummaryAction *ShowSummaryAction `json:"showSummaryAction,omitempty"`

	TransferAction *TransferAction `json:"transferAction,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AlertMessage") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AlertMessage") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Action1) MarshalJSON() ([]byte, error) {
	type noMethod Action1
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Address struct {
	AddressLine1 string `json:"addressLine1,omitempty"`

	AddressLine2 string `json:"addressLine2,omitempty"`

	AddressLine3 string `json:"addressLine3,omitempty"`

	Addressee string `json:"addressee,omitempty"`

	City string `json:"city,omitempty"`

	CountryCode string `json:"countryCode,omitempty"`

	PostalCode string `json:"postalCode,omitempty"`

	StateProvinceCode string `json:"stateProvinceCode,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AddressLine1") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AddressLine1") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Address) MarshalJSON() ([]byte, error) {
	type noMethod Address
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type AfterSendSetting struct {
	// Possible values:
	//   "NEEDS_INFO"
	//   "SOLUTION_OFFERED"
	//   "UNKNOWN_STATE_AFTER_SEND"
	StateAfterSend string `json:"stateAfterSend,omitempty"`

	// ForceSendFields is a list of field names (e.g. "StateAfterSend") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "StateAfterSend") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *AfterSendSetting) MarshalJSON() ([]byte, error) {
	type noMethod AfterSendSetting
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type AgentActivity struct {
	AgentActivityId string `json:"agentActivityId,omitempty"`

	Assignee *Assignee `json:"assignee,omitempty"`

	CaseId string `json:"caseId,omitempty"`

	CohortMetadataCollection *CohortMetadataCollection `json:"cohortMetadataCollection,omitempty"`

	Description string `json:"description,omitempty"`

	DesktopScreenshareEvent *DesktopScreenshareEvent `json:"desktopScreenshareEvent,omitempty"`

	MobileScreenshareEvent *MobileScreenshareEvent `json:"mobileScreenshareEvent,omitempty"`

	PhoneCall *PhoneCall `json:"phoneCall,omitempty"`

	Pitch *Pitch `json:"pitch,omitempty"`

	Relation *Relation `json:"relation,omitempty"`

	RequestDeviceSignalsEvent *RequestDeviceSignalsEvent `json:"requestDeviceSignalsEvent,omitempty"`

	ResolutionOpened *ResolutionOpened `json:"resolutionOpened,omitempty"`

	StartTime string `json:"startTime,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "AgentActivityId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AgentActivityId") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *AgentActivity) MarshalJSON() ([]byte, error) {
	type noMethod AgentActivity
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type AgentActivitySource struct {
}

type AgentSetting struct {
	AgentSettingId string `json:"agentSettingId,omitempty"`

	AliasInfo *AliasInfo `json:"aliasInfo,omitempty"`

	DefaultLocale string `json:"defaultLocale,omitempty"`

	DefaultProductId string `json:"defaultProductId,omitempty"`

	EmploymentInfo *EmploymentInfo `json:"employmentInfo,omitempty"`

	FirstName string `json:"firstName,omitempty"`

	FocusInfo *FocusInfo `json:"focusInfo,omitempty"`

	IncludeReassignedInAutoassign bool `json:"includeReassignedInAutoassign,omitempty"`

	LanguageCode string `json:"languageCode,omitempty"`

	Name string `json:"name,omitempty"`

	PhoneSetting *PhoneSetting `json:"phoneSetting,omitempty"`

	PreferredName string `json:"preferredName,omitempty"`

	SidewinderRole *SidewinderRole `json:"sidewinderRole,omitempty"`

	// Possible values:
	//   "ACTIVE"
	//   "DELETED"
	//   "INACTIVE"
	//   "UNKNOWN_AGENT_STATUS"
	Status string `json:"status,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "AgentSettingId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AgentSettingId") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *AgentSetting) MarshalJSON() ([]byte, error) {
	type noMethod AgentSetting
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type AgentTransfer struct {
	SourceAgent *Identity `json:"sourceAgent,omitempty"`

	TargetAgent *Identity `json:"targetAgent,omitempty"`

	// ForceSendFields is a list of field names (e.g. "SourceAgent") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "SourceAgent") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *AgentTransfer) MarshalJSON() ([]byte, error) {
	type noMethod AgentTransfer
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type AgentUnreadCasesInfo struct {
	UnreadCasesInfo []*UnreadCaseInfo `json:"unreadCasesInfo,omitempty"`

	// ForceSendFields is a list of field names (e.g. "UnreadCasesInfo") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "UnreadCasesInfo") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *AgentUnreadCasesInfo) MarshalJSON() ([]byte, error) {
	type noMethod AgentUnreadCasesInfo
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type AliasInfo struct {
	ExternalName string `json:"externalName,omitempty"`

	PersonalAlias string `json:"personalAlias,omitempty"`

	// ForceSendFields is a list of field names (e.g. "ExternalName") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ExternalName") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *AliasInfo) MarshalJSON() ([]byte, error) {
	type noMethod AliasInfo
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Answer struct {
	// Possible values:
	//   "DEVICE_TYPE"
	//   "PURCHASED_APP_NAME"
	//   "PURCHASED_BOOK_NAME"
	//   "PURCHASED_VIDEO_NAME"
	//   "QUESTION_NOT_SET"
	Question string `json:"question,omitempty"`

	// Possible values:
	//   "DOES_NOT_KNOW"
	//   "NOT_LISTED"
	//   "SKIP_REASON_NOT_SET"
	SkipReason string `json:"skipReason,omitempty"`

	Text string `json:"text,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Question") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Question") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Answer) MarshalJSON() ([]byte, error) {
	type noMethod Answer
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type AnswerSet struct {
	CustomerAnswers []*CustomerAnswer `json:"customerAnswers,omitempty"`

	// Possible values:
	//   "PAYMENT_METHOD_QUESTION_SET"
	//   "PHONE_NUMBER_QUESTION_SET"
	//   "POSTAL_CODE_QUESTION_SET"
	//   "UNKNOWN_QUESTION_SET_TYPE"
	QuestionSetType string `json:"questionSetType,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CustomerAnswers") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CustomerAnswers") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *AnswerSet) MarshalJSON() ([]byte, error) {
	type noMethod AnswerSet
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type AssignCohortsRequest struct {
	CaseId string `json:"caseId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *AssignCohortsRequest) MarshalJSON() ([]byte, error) {
	type noMethod AssignCohortsRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type AssignCohortsResponse struct {
	Cohorts []*Cohort2 `json:"cohorts,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Cohorts") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Cohorts") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *AssignCohortsResponse) MarshalJSON() ([]byte, error) {
	type noMethod AssignCohortsResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type AssignRequest struct {
	AssignedByScreenPop bool `json:"assignedByScreenPop,omitempty"`

	EmailAddress string `json:"emailAddress,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AssignedByScreenPop")
	// to unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AssignedByScreenPop") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *AssignRequest) MarshalJSON() ([]byte, error) {
	type noMethod AssignRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type AssignResponse struct {
	Case *Case `json:"case,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Case") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Case") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *AssignResponse) MarshalJSON() ([]byte, error) {
	type noMethod AssignResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Assignee struct {
	DisplayName string `json:"displayName,omitempty"`

	EmailAddress string `json:"emailAddress,omitempty"`

	// ForceSendFields is a list of field names (e.g. "DisplayName") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "DisplayName") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Assignee) MarshalJSON() ([]byte, error) {
	type noMethod Assignee
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Assignee1 struct {
	DisplayName string `json:"displayName,omitempty"`

	EmailAddress string `json:"emailAddress,omitempty"`

	// ForceSendFields is a list of field names (e.g. "DisplayName") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "DisplayName") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Assignee1) MarshalJSON() ([]byte, error) {
	type noMethod Assignee1
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Assignee2 struct {
	Ldap string `json:"ldap,omitempty"`

	Name string `json:"name,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Ldap") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Ldap") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Assignee2) MarshalJSON() ([]byte, error) {
	type noMethod Assignee2
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Attachment struct {
	AttachmentId string `json:"attachmentId,omitempty"`

	CommunicationId string `json:"communicationId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AttachmentId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AttachmentId") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Attachment) MarshalJSON() ([]byte, error) {
	type noMethod Attachment
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Attachment1 struct {
	AttachmentId string `json:"attachmentId,omitempty"`

	CommunicationId string `json:"communicationId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AttachmentId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AttachmentId") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Attachment1) MarshalJSON() ([]byte, error) {
	type noMethod Attachment1
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type AttachmentInfo struct {
	AttachmentId string `json:"attachmentId,omitempty"`

	ContentId string `json:"contentId,omitempty"`

	FileName string `json:"fileName,omitempty"`

	MimeType string `json:"mimeType,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AttachmentId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AttachmentId") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *AttachmentInfo) MarshalJSON() ([]byte, error) {
	type noMethod AttachmentInfo
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Attribute struct {
	AttributeId string `json:"attributeId,omitempty"`

	AttributeName string `json:"attributeName,omitempty"`

	Description string `json:"description,omitempty"`

	EnumValue []*EnumValue `json:"enumValue,omitempty"`

	Name string `json:"name,omitempty"`

	// Possible values:
	//   "BOOL"
	//   "DOUBLE"
	//   "ENUM"
	//   "INT"
	//   "INT64"
	//   "STRING"
	//   "TIMESTAMP"
	//   "UNKNOWN_VALUE_TYPE"
	ValueType string `json:"valueType,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "AttributeId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AttributeId") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Attribute) MarshalJSON() ([]byte, error) {
	type noMethod Attribute
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Attribute1 struct {
	AttributeId string `json:"attributeId,omitempty"`

	AttributeName string `json:"attributeName,omitempty"`

	Entries []*Entry `json:"entries,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AttributeId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AttributeId") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Attribute1) MarshalJSON() ([]byte, error) {
	type noMethod Attribute1
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type AuthenticateRequest struct {
	AgentSsoCookie string `json:"agentSsoCookie,omitempty"`

	AnswerSets []*AnswerSet `json:"answerSets,omitempty"`

	CustomerEmail string `json:"customerEmail,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AgentSsoCookie") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AgentSsoCookie") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *AuthenticateRequest) MarshalJSON() ([]byte, error) {
	type noMethod AuthenticateRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type AuthenticateResponse struct {
	Customer *Customer `json:"customer,omitempty"`

	// Possible values:
	//   "FAIL"
	//   "PASS"
	//   "PENDING"
	//   "UNKNOWN_RESULT"
	Result string `json:"result,omitempty"`

	VerificationResults []*VerificationResult `json:"verificationResults,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Customer") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Customer") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *AuthenticateResponse) MarshalJSON() ([]byte, error) {
	type noMethod AuthenticateResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Authentication struct {
	AuthenticateTime string `json:"authenticateTime,omitempty"`

	// Possible values:
	//   "AGENT"
	//   "CLICK_TO_CALL"
	//   "CUF"
	//   "REALTIME"
	//   "UNKNOWN_CHANNEL"
	Channel string `json:"channel,omitempty"`

	EmailAddress string `json:"emailAddress,omitempty"`

	// Possible values:
	//   "FAIL"
	//   "PASS"
	//   "PENDING"
	//   "UNKNOWN_RESULT"
	Result string `json:"result,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AuthenticateTime") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AuthenticateTime") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *Authentication) MarshalJSON() ([]byte, error) {
	type noMethod Authentication
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type AuthenticationBankAccount struct {
	BankAccountTypeDisplayName string `json:"bankAccountTypeDisplayName,omitempty"`

	BankAccountTypeToken string `json:"bankAccountTypeToken,omitempty"`

	// ForceSendFields is a list of field names (e.g.
	// "BankAccountTypeDisplayName") to unconditionally include in API
	// requests. By default, fields with empty values are omitted from API
	// requests. However, any non-pointer, non-interface field appearing in
	// ForceSendFields will be sent to the server regardless of whether the
	// field is empty or not. This may be used to include empty fields in
	// Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g.
	// "BankAccountTypeDisplayName") to include in API requests with the
	// JSON null value. By default, fields with empty values are omitted
	// from API requests. However, any field with an empty value appearing
	// in NullFields will be sent to the server as null. It is an error if a
	// field in this list has a non-empty value. This may be used to include
	// null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *AuthenticationBankAccount) MarshalJSON() ([]byte, error) {
	type noMethod AuthenticationBankAccount
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type AuthenticationCreditCard struct {
	CreditCardDisplayName string `json:"creditCardDisplayName,omitempty"`

	CreditCardTypeToken string `json:"creditCardTypeToken,omitempty"`

	// ForceSendFields is a list of field names (e.g.
	// "CreditCardDisplayName") to unconditionally include in API requests.
	// By default, fields with empty values are omitted from API requests.
	// However, any non-pointer, non-interface field appearing in
	// ForceSendFields will be sent to the server regardless of whether the
	// field is empty or not. This may be used to include empty fields in
	// Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CreditCardDisplayName") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *AuthenticationCreditCard) MarshalJSON() ([]byte, error) {
	type noMethod AuthenticationCreditCard
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type AuthenticationCreditCard1 struct {
	CreditCardDisplayName string `json:"creditCardDisplayName,omitempty"`

	CreditCardTypeToken string `json:"creditCardTypeToken,omitempty"`

	// ForceSendFields is a list of field names (e.g.
	// "CreditCardDisplayName") to unconditionally include in API requests.
	// By default, fields with empty values are omitted from API requests.
	// However, any non-pointer, non-interface field appearing in
	// ForceSendFields will be sent to the server regardless of whether the
	// field is empty or not. This may be used to include empty fields in
	// Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CreditCardDisplayName") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *AuthenticationCreditCard1) MarshalJSON() ([]byte, error) {
	type noMethod AuthenticationCreditCard1
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type AuthenticationInfo struct {
	// Possible values:
	//   "FAILED"
	//   "SUCCESS"
	//   "UNKNOWN_AUTH_TYPE"
	Status string `json:"status,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Status") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Status") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *AuthenticationInfo) MarshalJSON() ([]byte, error) {
	type noMethod AuthenticationInfo
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type AuthenticationSettings struct {
	AuthenticationSupported bool `json:"authenticationSupported,omitempty"`

	ExemptFromAuthentication bool `json:"exemptFromAuthentication,omitempty"`

	// ForceSendFields is a list of field names (e.g.
	// "AuthenticationSupported") to unconditionally include in API
	// requests. By default, fields with empty values are omitted from API
	// requests. However, any non-pointer, non-interface field appearing in
	// ForceSendFields will be sent to the server regardless of whether the
	// field is empty or not. This may be used to include empty fields in
	// Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AuthenticationSupported")
	// to include in API requests with the JSON null value. By default,
	// fields with empty values are omitted from API requests. However, any
	// field with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *AuthenticationSettings) MarshalJSON() ([]byte, error) {
	type noMethod AuthenticationSettings
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type AutoAssignRequest struct {
}

type AutoAssignResponse struct {
	Case *Case `json:"case,omitempty"`

	SearchName string `json:"searchName,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Case") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Case") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *AutoAssignResponse) MarshalJSON() ([]byte, error) {
	type noMethod AutoAssignResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type AutocheckResult struct {
	AutocheckId string `json:"autocheckId,omitempty"`

	AutocheckTime string `json:"autocheckTime,omitempty"`

	DescriptionId string `json:"descriptionId,omitempty"`

	ScriptId string `json:"scriptId,omitempty"`

	// Possible values:
	//   "AUTOCHECK_STATUS_NOT_SET"
	//   "ERROR"
	//   "FAIL"
	//   "NO"
	//   "NOT_RUN"
	//   "PASS"
	//   "YES"
	Status string `json:"status,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AutocheckId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AutocheckId") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *AutocheckResult) MarshalJSON() ([]byte, error) {
	type noMethod AutocheckResult
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type AvailableQuestion struct {
	AuthenticationCreditCards []*AuthenticationCreditCard1 `json:"authenticationCreditCards,omitempty"`

	// Possible values:
	//   "BANK_ACCOUNT"
	//   "CREDIT_CARD"
	//   "DCB"
	//   "PAYPAL"
	//   "PHONE_NUMBER"
	//   "PLAY_BALANCE"
	//   "POSTAL_CODE"
	//   "UNKNOWN_QUESTION"
	//   "WALLET_BALANCE"
	Question string `json:"question,omitempty"`

	QuestionSources []*QuestionSource `json:"questionSources,omitempty"`

	QuestionToken string `json:"questionToken,omitempty"`

	// ForceSendFields is a list of field names (e.g.
	// "AuthenticationCreditCards") to unconditionally include in API
	// requests. By default, fields with empty values are omitted from API
	// requests. However, any non-pointer, non-interface field appearing in
	// ForceSendFields will be sent to the server regardless of whether the
	// field is empty or not. This may be used to include empty fields in
	// Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g.
	// "AuthenticationCreditCards") to include in API requests with the JSON
	// null value. By default, fields with empty values are omitted from API
	// requests. However, any field with an empty value appearing in
	// NullFields will be sent to the server as null. It is an error if a
	// field in this list has a non-empty value. This may be used to include
	// null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *AvailableQuestion) MarshalJSON() ([]byte, error) {
	type noMethod AvailableQuestion
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type BankAccount struct {
	AccountSuffix string `json:"accountSuffix,omitempty"`

	BankAccountToken string `json:"bankAccountToken,omitempty"`

	CountryName string `json:"countryName,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AccountSuffix") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AccountSuffix") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *BankAccount) MarshalJSON() ([]byte, error) {
	type noMethod BankAccount
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type BankAccount1 struct {
	AccountNumberSuffix string `json:"accountNumberSuffix,omitempty"`

	BankAccountTypeToken string `json:"bankAccountTypeToken,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AccountNumberSuffix")
	// to unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AccountNumberSuffix") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *BankAccount1) MarshalJSON() ([]byte, error) {
	type noMethod BankAccount1
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type BankAccountCountry struct {
	BankAccountToken string `json:"bankAccountToken,omitempty"`

	CountryName string `json:"countryName,omitempty"`

	// ForceSendFields is a list of field names (e.g. "BankAccountToken") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "BankAccountToken") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *BankAccountCountry) MarshalJSON() ([]byte, error) {
	type noMethod BankAccountCountry
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type BatchCreatePitchRequest struct {
	CaseId string `json:"caseId,omitempty"`

	EventId string `json:"eventId,omitempty"`

	OpportunityIds []string `json:"opportunityIds,omitempty"`

	Pitches []*Pitch1 `json:"pitches,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *BatchCreatePitchRequest) MarshalJSON() ([]byte, error) {
	type noMethod BatchCreatePitchRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type BatchCreatePitchResponse struct {
	Responses []*CreatePitchResponse `json:"responses,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Responses") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Responses") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *BatchCreatePitchResponse) MarshalJSON() ([]byte, error) {
	type noMethod BatchCreatePitchResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type BatchGetCategoryInfosResponse struct {
	CategoryInfos []*CategoryInfo `json:"categoryInfos,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "CategoryInfos") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CategoryInfos") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *BatchGetCategoryInfosResponse) MarshalJSON() ([]byte, error) {
	type noMethod BatchGetCategoryInfosResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type BatchUpdateAttributesRequest struct {
	Attributes []*Attribute1 `json:"attributes,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Attributes") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Attributes") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *BatchUpdateAttributesRequest) MarshalJSON() ([]byte, error) {
	type noMethod BatchUpdateAttributesRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type BatchUpdateAttributesResponse struct {
	Case *Case `json:"case,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Case") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Case") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *BatchUpdateAttributesResponse) MarshalJSON() ([]byte, error) {
	type noMethod BatchUpdateAttributesResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type BlockRequest struct {
	BorgAlertId string `json:"borgAlertId,omitempty"`

	BuganizerId int64 `json:"buganizerId,omitempty,string"`

	OrderId string `json:"orderId,omitempty"`

	PcrId int64 `json:"pcrId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "BorgAlertId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "BorgAlertId") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *BlockRequest) MarshalJSON() ([]byte, error) {
	type noMethod BlockRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type BlockResponse struct {
	Case *Case `json:"case,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Case") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Case") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *BlockResponse) MarshalJSON() ([]byte, error) {
	type noMethod BlockResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type BuildNewEmailRequest struct {
	CaseId string `json:"caseId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *BuildNewEmailRequest) MarshalJSON() ([]byte, error) {
	type noMethod BuildNewEmailRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type BuildNewEmailResponse struct {
	EmailTemplate *Email `json:"emailTemplate,omitempty"`

	FooterIds []string `json:"footerIds,omitempty"`

	HeaderIds []string `json:"headerIds,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "EmailTemplate") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "EmailTemplate") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *BuildNewEmailResponse) MarshalJSON() ([]byte, error) {
	type noMethod BuildNewEmailResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type BuildReplyEmailRequest struct {
	CaseId string `json:"caseId,omitempty"`

	MessageId string `json:"messageId,omitempty"`

	// Possible values:
	//   "REPLY"
	//   "REPLY_ALL"
	//   "UNKNOWN_REPLY_TYPE"
	ReplyType string `json:"replyType,omitempty"`

	TimeZone string `json:"timeZone,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *BuildReplyEmailRequest) MarshalJSON() ([]byte, error) {
	type noMethod BuildReplyEmailRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type BuildReplyEmailResponse struct {
	EmailTemplate *Email `json:"emailTemplate,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "EmailTemplate") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "EmailTemplate") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *BuildReplyEmailResponse) MarshalJSON() ([]byte, error) {
	type noMethod BuildReplyEmailResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Business struct {
	Address *Address `json:"address,omitempty"`

	ListingId uint64 `json:"listingId,omitempty,string"`

	Name string `json:"name,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Address") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Address") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Business) MarshalJSON() ([]byte, error) {
	type noMethod Business
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CallBackRequest struct {
}

type CallBackResponse struct {
	// Possible values:
	//   "AGENT_BUSY"
	//   "AGENT_HUNG_UP_EARLY"
	//   "AGENT_NOT_ANSWERED"
	//   "AGENT_NOT_CONNECTED"
	//   "AGENT_NOT_LOGGED_IN"
	//   "AUTHENTICATION_ERROR"
	//   "CALLBACK_STATUS_UNSPECIFIED"
	//   "CALL_CONNECTED"
	//   "CALL_IN_PROGRESS"
	//   "CUSTOMER_BUSY"
	//   "CUSTOMER_NOT_ANSWERED"
	//   "CUSTOMER_NOT_CONNECTED"
	//   "INTERNAL_ERROR"
	//   "INVALID_AGENT_SETTING"
	//   "INVALID_CUSTOMER_NUMBER"
	CallbackStatus string `json:"callbackStatus,omitempty"`

	Customer *Customer `json:"customer,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "CallbackStatus") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CallbackStatus") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *CallBackResponse) MarshalJSON() ([]byte, error) {
	type noMethod CallBackResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Campaign struct {
	CampaignId int64 `json:"campaignId,omitempty,string"`

	CampaignName string `json:"campaignName,omitempty"`

	Rank float64 `json:"rank,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CampaignId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CampaignId") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Campaign) MarshalJSON() ([]byte, error) {
	type noMethod Campaign
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

func (s *Campaign) UnmarshalJSON(data []byte) error {
	type noMethod Campaign
	var s1 struct {
		Rank gensupport.JSONFloat64 `json:"rank"`
		*noMethod
	}
	s1.noMethod = (*noMethod)(s)
	if err := json.Unmarshal(data, &s1); err != nil {
		return err
	}
	s.Rank = float64(s1.Rank)
	return nil
}

type CancelAuthHoldRequest struct {
	CaseId string `json:"caseId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *CancelAuthHoldRequest) MarshalJSON() ([]byte, error) {
	type noMethod CancelAuthHoldRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CancelComponentsRequest struct {
	CaseId string `json:"caseId,omitempty"`

	ComponentTokens []string `json:"componentTokens,omitempty"`

	// Possible values:
	//   "CANCEL_REFUND_REASON_UNKNOWN"
	//   "FEATURE_NOT_WORKING"
	//   "FRIEND_OR_FAMILY_CHARGES"
	//   "NO_LONGER_WANTED_REMORSE"
	//   "PURCHASE_BY_ACCIDENT"
	//   "SELF_SERVICE_REFUND"
	//   "UNRECOGNIZED_CHARGES_PAYMENT_FRAUD"
	Reason string `json:"reason,omitempty"`

	RevokeAccess bool `json:"revokeAccess,omitempty"`

	SsoCookie string `json:"ssoCookie,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *CancelComponentsRequest) MarshalJSON() ([]byte, error) {
	type noMethod CancelComponentsRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CancelComponentsResponse struct {
	ComponentTokens []string `json:"componentTokens,omitempty"`

	// Possible values:
	//   "ALREADY_CANCELED"
	//   "APPROVED"
	//   "CANCEL_RESULT_UNKNOWN"
	//   "CANCEL_RETRIABLE"
	//   "PERMANENT_CANCEL_FAILED"
	Result string `json:"result,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "ComponentTokens") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ComponentTokens") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *CancelComponentsResponse) MarshalJSON() ([]byte, error) {
	type noMethod CancelComponentsResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CancelEntitlementRequest struct {
	CaseId string `json:"caseId,omitempty"`

	EntitlementToken string `json:"entitlementToken,omitempty"`

	EntitlementTokens []string `json:"entitlementTokens,omitempty"`

	// Possible values:
	//   "CANCEL_REFUND_REASON_UNKNOWN"
	//   "FEATURE_NOT_WORKING"
	//   "FRIEND_OR_FAMILY_CHARGES"
	//   "NO_LONGER_WANTED_REMORSE"
	//   "PURCHASE_BY_ACCIDENT"
	//   "SELF_SERVICE_REFUND"
	//   "UNRECOGNIZED_CHARGES_PAYMENT_FRAUD"
	Reason string `json:"reason,omitempty"`

	RevokeAccess bool `json:"revokeAccess,omitempty"`

	SsoCookie string `json:"ssoCookie,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *CancelEntitlementRequest) MarshalJSON() ([]byte, error) {
	type noMethod CancelEntitlementRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CancelEntitlementResponse struct {
	CancelResultInfo []*CancelResultInfo `json:"cancelResultInfo,omitempty"`

	EntitlementToken string `json:"entitlementToken,omitempty"`

	// Possible values:
	//   "ALREADY_CANCELED"
	//   "APPROVED"
	//   "CANCEL_RESULT_UNKNOWN"
	//   "CANCEL_RETRIABLE"
	//   "PERMANENT_CANCEL_FAILED"
	Result string `json:"result,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "CancelResultInfo") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CancelResultInfo") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *CancelEntitlementResponse) MarshalJSON() ([]byte, error) {
	type noMethod CancelEntitlementResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CancelHardwareOrderRequest struct {
	CaseId string `json:"caseId,omitempty"`

	SsoTicket string `json:"ssoTicket,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *CancelHardwareOrderRequest) MarshalJSON() ([]byte, error) {
	type noMethod CancelHardwareOrderRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CancelHistorySummaryInfo struct {
	// Possible values:
	//   "ALREADY_CANCELED"
	//   "APPROVED"
	//   "CANCEL_RESULT_UNKNOWN"
	//   "CANCEL_RETRIABLE"
	//   "PERMANENT_CANCEL_FAILED"
	CancelResult string `json:"cancelResult,omitempty"`

	NumberOfCancels int64 `json:"numberOfCancels,omitempty"`

	// Possible values:
	//   "BUNDLE"
	//   "LIVE_EVENT"
	//   "MOVIE"
	//   "PRODUCT_TYPE_UNKNOWN"
	//   "RED"
	//   "SEASON"
	//   "SHOW"
	//   "UNPLUGGED"
	ProductType string `json:"productType,omitempty"`

	Revoke bool `json:"revoke,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CancelResult") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CancelResult") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *CancelHistorySummaryInfo) MarshalJSON() ([]byte, error) {
	type noMethod CancelHistorySummaryInfo
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CancelInfo struct {
	// Possible values:
	//   "CANCEL_REASON_NOT_SET"
	//   "INVALID_ADDRESS"
	//   "OTHER"
	//   "PAYMENT_ISSUE"
	//   "USER_INITIATED"
	//   "USER_REQUESTED"
	CancelReason string `json:"cancelReason,omitempty"`

	CancelTime string `json:"cancelTime,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CancelReason") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CancelReason") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *CancelInfo) MarshalJSON() ([]byte, error) {
	type noMethod CancelInfo
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CancelResultInfo struct {
	EntitlementToken string `json:"entitlementToken,omitempty"`

	// Possible values:
	//   "ALREADY_CANCELED"
	//   "APPROVED"
	//   "CANCEL_RESULT_UNKNOWN"
	//   "CANCEL_RETRIABLE"
	//   "PERMANENT_CANCEL_FAILED"
	Result string `json:"result,omitempty"`

	// ForceSendFields is a list of field names (e.g. "EntitlementToken") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "EntitlementToken") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *CancelResultInfo) MarshalJSON() ([]byte, error) {
	type noMethod CancelResultInfo
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CancelRmaRequest struct {
	CaseId string `json:"caseId,omitempty"`

	// Possible values:
	//   "CANCEL_REASON_NOT_SET"
	//   "CUSTOMER_CHANGED_MIND"
	//   "FIX_AGENT_ERROR"
	//   "OTHER"
	Reason string `json:"reason,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *CancelRmaRequest) MarshalJSON() ([]byte, error) {
	type noMethod CancelRmaRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CancelRmaResponse struct {
	// Possible values:
	//   "CANCEL_RESULT_NOT_SET"
	//   "SUCCESSFUL"
	//   "UNSUCCESSFUL_CART_LINK_USED"
	//   "UNSUCCESSFUL_NOT_PENDING"
	//   "UNSUCCESSFUL_UNKNOWN"
	Result string `json:"result,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Result") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Result") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *CancelRmaResponse) MarshalJSON() ([]byte, error) {
	type noMethod CancelRmaResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CancelSendRequest struct {
	CaseId string `json:"caseId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *CancelSendRequest) MarshalJSON() ([]byte, error) {
	type noMethod CancelSendRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CancelSubscriptionRequest struct {
	CaseId string `json:"caseId,omitempty"`

	CustomerEmail string `json:"customerEmail,omitempty"`

	Locale string `json:"locale,omitempty"`

	// Possible values:
	//   "CANCEL_REASON_ACCIDENTAL_PURCHASE"
	//   "CANCEL_REASON_DEFECTIVE"
	//   "CANCEL_REASON_DID_NOT_RECEIVE"
	//   "CANCEL_REASON_FRAUD"
	//   "CANCEL_REASON_FRIENDLY_FRAUD"
	//   "CANCEL_REASON_REMORSE"
	//   "CANCEL_REASON_UNSPECIFIED"
	Reason string `json:"reason,omitempty"`

	SsoCookie string `json:"ssoCookie,omitempty"`

	Subscription *Subscription `json:"subscription,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *CancelSubscriptionRequest) MarshalJSON() ([]byte, error) {
	type noMethod CancelSubscriptionRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CancelSubscriptionResponse struct {
	// Possible values:
	//   "CANCEL_REJECTION_REASON_UNSPECIFIED"
	//   "SUBSCRIPTION_IS_NOT_CANCELLABLE"
	CancelRejectionReason string `json:"cancelRejectionReason,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g.
	// "CancelRejectionReason") to unconditionally include in API requests.
	// By default, fields with empty values are omitted from API requests.
	// However, any non-pointer, non-interface field appearing in
	// ForceSendFields will be sent to the server regardless of whether the
	// field is empty or not. This may be used to include empty fields in
	// Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CancelRejectionReason") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *CancelSubscriptionResponse) MarshalJSON() ([]byte, error) {
	type noMethod CancelSubscriptionResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CannedResponse struct {
	KmsId int64 `json:"kmsId,omitempty"`

	Locale string `json:"locale,omitempty"`

	// Possible values:
	//   "CHAT"
	//   "EMAIL"
	//   "EMAIL_AND_CHAT"
	//   "UNKNOWN_CHANNEL_TYPE"
	Type string `json:"type,omitempty"`

	// ForceSendFields is a list of field names (e.g. "KmsId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "KmsId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *CannedResponse) MarshalJSON() ([]byte, error) {
	type noMethod CannedResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CannedResponse1 struct {
	KmsId int64 `json:"kmsId,omitempty"`

	Locale string `json:"locale,omitempty"`

	// Possible values:
	//   "CHAT"
	//   "EMAIL"
	//   "UNKNOWN_CHANNEL_TYPE"
	Type string `json:"type,omitempty"`

	Url string `json:"url,omitempty"`

	// ForceSendFields is a list of field names (e.g. "KmsId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "KmsId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *CannedResponse1) MarshalJSON() ([]byte, error) {
	type noMethod CannedResponse1
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CannedResponseAction struct {
	CannedResponseIds []int64 `json:"cannedResponseIds,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CannedResponseIds")
	// to unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CannedResponseIds") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *CannedResponseAction) MarshalJSON() ([]byte, error) {
	type noMethod CannedResponseAction
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CardLookupCriteria struct {
	ActivationNumber string `json:"activationNumber,omitempty"`

	RedemptionCode string `json:"redemptionCode,omitempty"`

	// ForceSendFields is a list of field names (e.g. "ActivationNumber") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ActivationNumber") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *CardLookupCriteria) MarshalJSON() ([]byte, error) {
	type noMethod CardLookupCriteria
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Case struct {
	AgentUpdateTimeMap map[string]string `json:"agentUpdateTimeMap,omitempty"`

	Assignee *Assignee1 `json:"assignee,omitempty"`

	AttributeMap map[string]Attribute1 `json:"attributeMap,omitempty"`

	CaseId string `json:"caseId,omitempty"`

	CommunicationInfo *CommunicationInfo `json:"communicationInfo,omitempty"`

	CreateTime string `json:"createTime,omitempty"`

	Creator *Source `json:"creator,omitempty"`

	Customer *Customer `json:"customer,omitempty"`

	DueByTime string `json:"dueByTime,omitempty"`

	Issue *Issue `json:"issue,omitempty"`

	Name string `json:"name,omitempty"`

	Priority int64 `json:"priority,omitempty"`

	Relations []*Relation1 `json:"relations,omitempty"`

	// Possible values:
	//   "ASSIGNED"
	//   "BLOCKED_BY"
	//   "FINISHED"
	//   "IN_CONSULT"
	//   "NEED_INFO"
	//   "NEW"
	//   "SOLUTION_OFFERED"
	//   "UNASSIGNED"
	//   "UNKNOWN_CASE_STATE"
	State string `json:"state,omitempty"`

	TransitionTime string `json:"transitionTime,omitempty"`

	UpdateTime string `json:"updateTime,omitempty"`

	WorkflowInfo *WorkflowInfo `json:"workflowInfo,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "AgentUpdateTimeMap")
	// to unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AgentUpdateTimeMap") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *Case) MarshalJSON() ([]byte, error) {
	type noMethod Case
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CaseData struct {
	Assignee *Assignee2 `json:"assignee,omitempty"`

	CaseId string `json:"caseId,omitempty"`

	Categories []*Category1 `json:"categories,omitempty"`

	ProductName string `json:"productName,omitempty"`

	// Possible values:
	//   "ASSIGNED"
	//   "BLOCKED_BY"
	//   "FINISHED"
	//   "IN_CONSULT"
	//   "NEED_INFO"
	//   "NEW"
	//   "SOLUTION_OFFERED"
	//   "UNASSIGNED"
	//   "UNKNOWN_CASE_STATE"
	State string `json:"state,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Assignee") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Assignee") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *CaseData) MarshalJSON() ([]byte, error) {
	type noMethod CaseData
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CasesReviewKey struct {
	Review3Id string `json:"review3Id,omitempty"`

	ReviewId string `json:"reviewId,omitempty"`

	TargetUnderReview string `json:"targetUnderReview,omitempty"`

	Token string `json:"token,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Review3Id") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Review3Id") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *CasesReviewKey) MarshalJSON() ([]byte, error) {
	type noMethod CasesReviewKey
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CasesTransactionIdentifier struct {
	OrderId string `json:"orderId,omitempty"`

	TransactionId string `json:"transactionId,omitempty"`

	// Possible values:
	//   "GOOGLE_PLAY"
	//   "GOOGLE_STORE"
	//   "P2P_RECEIVER"
	//   "P2P_SENDER"
	//   "TAP_AND_PAY"
	//   "UNKNOWN_WALLET_TRANSACTION_TYPE"
	//   "WALLET_CARD"
	//   "YOUTUBE_PURCHASE"
	TransactionType string `json:"transactionType,omitempty"`

	// ForceSendFields is a list of field names (e.g. "OrderId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "OrderId") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *CasesTransactionIdentifier) MarshalJSON() ([]byte, error) {
	type noMethod CasesTransactionIdentifier
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CasesWorkflow struct {
	HardwareOrderWorkflow *HardwareOrderWorkflow `json:"hardwareOrderWorkflow,omitempty"`

	WalletUnauthCharges *UnauthorizedChargesWorkflow `json:"walletUnauthCharges,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g.
	// "HardwareOrderWorkflow") to unconditionally include in API requests.
	// By default, fields with empty values are omitted from API requests.
	// However, any non-pointer, non-interface field appearing in
	// ForceSendFields will be sent to the server regardless of whether the
	// field is empty or not. This may be used to include empty fields in
	// Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "HardwareOrderWorkflow") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *CasesWorkflow) MarshalJSON() ([]byte, error) {
	type noMethod CasesWorkflow
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Category struct {
	IsBaseline bool `json:"isBaseline,omitempty"`

	Path *Path `json:"path,omitempty"`

	// ForceSendFields is a list of field names (e.g. "IsBaseline") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "IsBaseline") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Category) MarshalJSON() ([]byte, error) {
	type noMethod Category
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Category1 struct {
	IsBaseline bool `json:"isBaseline,omitempty"`

	Path *Path1 `json:"path,omitempty"`

	// ForceSendFields is a list of field names (e.g. "IsBaseline") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "IsBaseline") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Category1) MarshalJSON() ([]byte, error) {
	type noMethod Category1
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Category2 struct {
	Nodes []*Node2 `json:"nodes,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Nodes") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Nodes") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Category2) MarshalJSON() ([]byte, error) {
	type noMethod Category2
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Category3 struct {
	Nodes []*Node3 `json:"nodes,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Nodes") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Nodes") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Category3) MarshalJSON() ([]byte, error) {
	type noMethod Category3
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Category4 struct {
	Nodes []*Node4 `json:"nodes,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Nodes") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Nodes") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Category4) MarshalJSON() ([]byte, error) {
	type noMethod Category4
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Category5 struct {
	Nodes []*Node5 `json:"nodes,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Nodes") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Nodes") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Category5) MarshalJSON() ([]byte, error) {
	type noMethod Category5
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CategoryInfo struct {
	Children []*CategoryInfo `json:"children,omitempty"`

	MatchDetail *MatchDetail `json:"matchDetail,omitempty"`

	Name string `json:"name,omitempty"`

	NumChildren int64 `json:"numChildren,omitempty"`

	PathIds []int64 `json:"pathIds,omitempty"`

	PathNames []string `json:"pathNames,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Children") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Children") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *CategoryInfo) MarshalJSON() ([]byte, error) {
	type noMethod CategoryInfo
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CategoryPath struct {
	PathIds []int64 `json:"pathIds,omitempty"`

	// ForceSendFields is a list of field names (e.g. "PathIds") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "PathIds") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *CategoryPath) MarshalJSON() ([]byte, error) {
	type noMethod CategoryPath
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CategoryPath1 struct {
	Nodes []int64 `json:"nodes,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Nodes") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Nodes") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *CategoryPath1) MarshalJSON() ([]byte, error) {
	type noMethod CategoryPath1
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ChannelCount struct {
	// Possible values:
	//   "ADOPTION"
	//   "CHAT"
	//   "EMAIL"
	//   "GOAL"
	//   "HANGOUT"
	//   "INCENTIVE"
	//   "MARKETING_EMAIL"
	//   "MEETING"
	//   "NOTE"
	//   "PHONE"
	//   "STUB"
	//   "TRAX"
	//   "UNKNOWN_EVENT_TYPE"
	//   "WEB"
	Channel string `json:"channel,omitempty"`

	Count int64 `json:"count,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Channel") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Channel") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ChannelCount) MarshalJSON() ([]byte, error) {
	type noMethod ChannelCount
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Charge struct {
	ChargeTime string `json:"chargeTime,omitempty"`

	LineItems []*TransactionLineItem `json:"lineItems,omitempty"`

	LocalizedChargeTime *LocalizedTimestamp `json:"localizedChargeTime,omitempty"`

	PriceIncludesTax bool `json:"priceIncludesTax,omitempty"`

	Prorated bool `json:"prorated,omitempty"`

	TotalAmount *Money `json:"totalAmount,omitempty"`

	// ForceSendFields is a list of field names (e.g. "ChargeTime") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ChargeTime") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Charge) MarshalJSON() ([]byte, error) {
	type noMethod Charge
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Chat struct {
	ChatPools []*ChatPool1 `json:"chatPools,omitempty"`

	// ForceSendFields is a list of field names (e.g. "ChatPools") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ChatPools") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Chat) MarshalJSON() ([]byte, error) {
	type noMethod Chat
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Chat1 struct {
	ChatPools []*ChatPool2 `json:"chatPools,omitempty"`

	// ForceSendFields is a list of field names (e.g. "ChatPools") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ChatPools") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Chat1) MarshalJSON() ([]byte, error) {
	type noMethod Chat1
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ChatMessage struct {
	IsAgent bool `json:"isAgent,omitempty"`

	Payload string `json:"payload,omitempty"`

	SenderName string `json:"senderName,omitempty"`

	// ForceSendFields is a list of field names (e.g. "IsAgent") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "IsAgent") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ChatMessage) MarshalJSON() ([]byte, error) {
	type noMethod ChatMessage
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ChatPool struct {
	ChatPoolId string `json:"chatPoolId,omitempty"`

	ChatPoolName string `json:"chatPoolName,omitempty"`

	// ForceSendFields is a list of field names (e.g. "ChatPoolId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ChatPoolId") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ChatPool) MarshalJSON() ([]byte, error) {
	type noMethod ChatPool
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ChatPool1 struct {
	ChatPoolId string `json:"chatPoolId,omitempty"`

	Locale string `json:"locale,omitempty"`

	// ForceSendFields is a list of field names (e.g. "ChatPoolId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ChatPoolId") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ChatPool1) MarshalJSON() ([]byte, error) {
	type noMethod ChatPool1
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ChatPool2 struct {
	ChatPoolId string `json:"chatPoolId,omitempty"`

	Locale string `json:"locale,omitempty"`

	// ForceSendFields is a list of field names (e.g. "ChatPoolId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ChatPoolId") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ChatPool2) MarshalJSON() ([]byte, error) {
	type noMethod ChatPool2
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ChatTransfer struct {
	SourceChatPool *ChatPool `json:"sourceChatPool,omitempty"`

	TargetChatPool *ChatPool `json:"targetChatPool,omitempty"`

	// ForceSendFields is a list of field names (e.g. "SourceChatPool") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "SourceChatPool") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *ChatTransfer) MarshalJSON() ([]byte, error) {
	type noMethod ChatTransfer
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CheckRedeemerRequest struct {
	ActivationNumber string `json:"activationNumber,omitempty"`

	CaseId string `json:"caseId,omitempty"`

	EmailToCheck string `json:"emailToCheck,omitempty"`

	RedemptionCode string `json:"redemptionCode,omitempty"`

	SsoCookie string `json:"ssoCookie,omitempty"`

	// ForceSendFields is a list of field names (e.g. "ActivationNumber") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ActivationNumber") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *CheckRedeemerRequest) MarshalJSON() ([]byte, error) {
	type noMethod CheckRedeemerRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CheckRedeemerResponse struct {
	EmailToCheck string `json:"emailToCheck,omitempty"`

	IsRedeemer bool `json:"isRedeemer,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "EmailToCheck") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "EmailToCheck") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *CheckRedeemerResponse) MarshalJSON() ([]byte, error) {
	type noMethod CheckRedeemerResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CheckWalletAccountResponse struct {
	HasValidWalletAccount bool `json:"hasValidWalletAccount,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g.
	// "HasValidWalletAccount") to unconditionally include in API requests.
	// By default, fields with empty values are omitted from API requests.
	// However, any non-pointer, non-interface field appearing in
	// ForceSendFields will be sent to the server regardless of whether the
	// field is empty or not. This may be used to include empty fields in
	// Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "HasValidWalletAccount") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *CheckWalletAccountResponse) MarshalJSON() ([]byte, error) {
	type noMethod CheckWalletAccountResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Cohort struct {
	CanonicalName string `json:"canonicalName,omitempty"`

	DisplayName string `json:"displayName,omitempty"`

	TreatmentsId string `json:"treatmentsId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CanonicalName") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CanonicalName") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Cohort) MarshalJSON() ([]byte, error) {
	type noMethod Cohort
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Cohort1 struct {
	CanonicalName string `json:"canonicalName,omitempty"`

	DisplayName string `json:"displayName,omitempty"`

	// Possible values:
	//   "HIDE"
	//   "NONE"
	//   "SHOW"
	//   "UNKNOWN_DISPLAY_STATE_RESTRICTION"
	DisplayStateRestriction string `json:"displayStateRestriction,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CanonicalName") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CanonicalName") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Cohort1) MarshalJSON() ([]byte, error) {
	type noMethod Cohort1
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Cohort2 struct {
	CanonicalName string `json:"canonicalName,omitempty"`

	DisplayName string `json:"displayName,omitempty"`

	// Possible values:
	//   "HIDE"
	//   "NONE"
	//   "SHOW"
	//   "UNKNOWN_DISPLAY_STATE_RESTRICTION"
	DisplayStateRestriction string `json:"displayStateRestriction,omitempty"`

	FormId string `json:"formId,omitempty"`

	HelpcenterName string `json:"helpcenterName,omitempty"`

	TreatmentsId string `json:"treatmentsId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CanonicalName") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CanonicalName") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Cohort2) MarshalJSON() ([]byte, error) {
	type noMethod Cohort2
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CohortMetadataCollection struct {
	Cohort *Cohort `json:"cohort,omitempty"`

	FormMetadata *FormMetadata `json:"formMetadata,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Cohort") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Cohort") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *CohortMetadataCollection) MarshalJSON() ([]byte, error) {
	type noMethod CohortMetadataCollection
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Communication struct {
	AllowsCaseSplit bool `json:"allowsCaseSplit,omitempty"`

	Attachments []*AttachmentInfo `json:"attachments,omitempty"`

	AuthenticationInfo *AuthenticationInfo `json:"authenticationInfo,omitempty"`

	CaseId string `json:"caseId,omitempty"`

	CommunicationId string `json:"communicationId,omitempty"`

	ConsultInfo *ConsultInfo `json:"consultInfo,omitempty"`

	ContentInfo *ContentInfo `json:"contentInfo,omitempty"`

	DraftInfo *DraftInfo `json:"draftInfo,omitempty"`

	Email *Email `json:"email,omitempty"`

	EscalationInfo *EscalationInfo `json:"escalationInfo,omitempty"`

	Form *Form `json:"form,omitempty"`

	InResponseTo string `json:"inResponseTo,omitempty"`

	Name string `json:"name,omitempty"`

	Note *Note `json:"note,omitempty"`

	PhoneInfo *PhoneInfo `json:"phoneInfo,omitempty"`

	RealTime *RealTime `json:"realTime,omitempty"`

	Recipients []*Identity `json:"recipients,omitempty"`

	RoutingInfo *RoutingInfo `json:"routingInfo,omitempty"`

	Sender *Identity `json:"sender,omitempty"`

	Source *Source `json:"source,omitempty"`

	Subject string `json:"subject,omitempty"`

	UpdateTime string `json:"updateTime,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AllowsCaseSplit") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AllowsCaseSplit") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *Communication) MarshalJSON() ([]byte, error) {
	type noMethod Communication
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CommunicationInfo struct {
	LastClosedTime string `json:"lastClosedTime,omitempty"`

	LastCommunicationTime string `json:"lastCommunicationTime,omitempty"`

	LastIncomingEmailTime string `json:"lastIncomingEmailTime,omitempty"`

	LastOutgoingCommunicationTime string `json:"lastOutgoingCommunicationTime,omitempty"`

	LastOutgoingEmailTime string `json:"lastOutgoingEmailTime,omitempty"`

	NumCommunications int64 `json:"numCommunications,omitempty"`

	NumConsults int64 `json:"numConsults,omitempty"`

	NumIncomingEmails int64 `json:"numIncomingEmails,omitempty"`

	NumOutgoingEmails int64 `json:"numOutgoingEmails,omitempty"`

	// ForceSendFields is a list of field names (e.g. "LastClosedTime") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "LastClosedTime") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *CommunicationInfo) MarshalJSON() ([]byte, error) {
	type noMethod CommunicationInfo
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ComponentData struct {
	Components []*SubscriptionComponent `json:"components,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Components") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Components") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ComponentData) MarshalJSON() ([]byte, error) {
	type noMethod ComponentData
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ComponentToken struct {
	Token string `json:"token,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Token") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Token") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ComponentToken) MarshalJSON() ([]byte, error) {
	type noMethod ComponentToken
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ConsultAction struct {
	ConsultDifm *DifmAction `json:"consultDifm,omitempty"`

	PostConsultAnswerHelpCenter string `json:"postConsultAnswerHelpCenter,omitempty"`

	PostConsultAnswerId string `json:"postConsultAnswerId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "ConsultDifm") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ConsultDifm") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ConsultAction) MarshalJSON() ([]byte, error) {
	type noMethod ConsultAction
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ConsultInfo struct {
}

type ConsultSettings struct {
	TopCategory *Category2 `json:"topCategory,omitempty"`

	// ForceSendFields is a list of field names (e.g. "TopCategory") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "TopCategory") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ConsultSettings) MarshalJSON() ([]byte, error) {
	type noMethod ConsultSettings
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Contact struct {
	ContactName string `json:"contactName,omitempty"`

	EmailAddress *EmailAddress `json:"emailAddress,omitempty"`

	// ForceSendFields is a list of field names (e.g. "ContactName") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ContactName") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Contact) MarshalJSON() ([]byte, error) {
	type noMethod Contact
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ContactInfo struct {
	CallbackNumber *PhoneNumber `json:"callbackNumber,omitempty"`

	ContactName string `json:"contactName,omitempty"`

	EmailAddress string `json:"emailAddress,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CallbackNumber") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CallbackNumber") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *ContactInfo) MarshalJSON() ([]byte, error) {
	type noMethod ContactInfo
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ContentInfo struct {
	BodyCrIds []string `json:"bodyCrIds,omitempty"`

	FooterCrIds []string `json:"footerCrIds,omitempty"`

	HeaderCrIds []string `json:"headerCrIds,omitempty"`

	HelpcenterLinkIds []string `json:"helpcenterLinkIds,omitempty"`

	// ForceSendFields is a list of field names (e.g. "BodyCrIds") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "BodyCrIds") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ContentInfo) MarshalJSON() ([]byte, error) {
	type noMethod ContentInfo
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CreateAgentActivityRequest struct {
	AgentActivity *AgentActivity `json:"agentActivity,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AgentActivity") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AgentActivity") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *CreateAgentActivityRequest) MarshalJSON() ([]byte, error) {
	type noMethod CreateAgentActivityRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CreateConsultNoteRequest struct {
	Body string `json:"body,omitempty"`

	CaseId string `json:"caseId,omitempty"`

	InReplyTo string `json:"inReplyTo,omitempty"`

	IsHtml bool `json:"isHtml,omitempty"`

	Subject string `json:"subject,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Body") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Body") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *CreateConsultNoteRequest) MarshalJSON() ([]byte, error) {
	type noMethod CreateConsultNoteRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CreateConsultNoteResponse struct {
	Communication *Communication `json:"communication,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Communication") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Communication") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *CreateConsultNoteResponse) MarshalJSON() ([]byte, error) {
	type noMethod CreateConsultNoteResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CreateEmailRequest struct {
	AfterSendSetting *AfterSendSetting `json:"afterSendSetting,omitempty"`

	BccAddresses []string `json:"bccAddresses,omitempty"`

	Body string `json:"body,omitempty"`

	CannedResponseIds []string `json:"cannedResponseIds,omitempty"`

	CaseId string `json:"caseId,omitempty"`

	CcAddresses []string `json:"ccAddresses,omitempty"`

	FooterIds []string `json:"footerIds,omitempty"`

	FromAddress string `json:"fromAddress,omitempty"`

	HeaderIds []string `json:"headerIds,omitempty"`

	InReplyTo string `json:"inReplyTo,omitempty"`

	IsHtml bool `json:"isHtml,omitempty"`

	Subject string `json:"subject,omitempty"`

	ToAddresses []string `json:"toAddresses,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AfterSendSetting") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AfterSendSetting") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *CreateEmailRequest) MarshalJSON() ([]byte, error) {
	type noMethod CreateEmailRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CreateEmailResponse struct {
	Communication *Communication `json:"communication,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Communication") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Communication") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *CreateEmailResponse) MarshalJSON() ([]byte, error) {
	type noMethod CreateEmailResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CreateExchangeWithoutReturnRequest struct {
	CaseId string `json:"caseId,omitempty"`

	Device *LostStolenDevice `json:"device,omitempty"`

	Shipment *LostStolenShipment `json:"shipment,omitempty"`

	SkipAddressValidation bool `json:"skipAddressValidation,omitempty"`

	SsoCookie string `json:"ssoCookie,omitempty"`

	UpdatedAddress *MailingAddress `json:"updatedAddress,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *CreateExchangeWithoutReturnRequest) MarshalJSON() ([]byte, error) {
	type noMethod CreateExchangeWithoutReturnRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CreateExchangeWithoutReturnResponse struct {
	// Possible values:
	//   "FAILURE_TYPE_NOT_SET"
	//   "FAILURE_TYPE_UNKNOWN"
	//   "NOTES_INVALID"
	//   "PHONE_NUMBER_INVALID"
	//   "RMA_ALREADY_OPEN_FOR_ASSET"
	//   "SHIPPING_ADDRESS_ADDRESSEE_INVALID"
	//   "SHIPPING_ADDRESS_CITY_INVALID"
	//   "SHIPPING_ADDRESS_COUNTRY_CODE_INVALID"
	//   "SHIPPING_ADDRESS_INVALID"
	//   "SHIPPING_ADDRESS_LINE_1_INVALID"
	//   "SHIPPING_ADDRESS_LINE_2_INVALID"
	//   "SHIPPING_ADDRESS_LINE_3_INVALID"
	//   "SHIPPING_ADDRESS_POSTAL_CODE_INVALID"
	//   "SHIPPING_ADDRESS_STATE_PROVINCE_CODE_INVALID"
	//   "WALLET_ACCOUNT_REQUIRED"
	FailureType string `json:"failureType,omitempty"`

	Failures []*RmaFailure `json:"failures,omitempty"`

	RmaNumber []string `json:"rmaNumber,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "FailureType") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "FailureType") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *CreateExchangeWithoutReturnResponse) MarshalJSON() ([]byte, error) {
	type noMethod CreateExchangeWithoutReturnResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CreateFromHelpCenterDeepLinkRequest struct {
	CaseId string `json:"caseId,omitempty"`

	Url string `json:"url,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *CreateFromHelpCenterDeepLinkRequest) MarshalJSON() ([]byte, error) {
	type noMethod CreateFromHelpCenterDeepLinkRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CreateNewCaseRequest struct {
}

type CreateNewCaseResponse struct {
	Case *Case `json:"case,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Case") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Case") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *CreateNewCaseResponse) MarshalJSON() ([]byte, error) {
	type noMethod CreateNewCaseResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CreateNoteConsultCaseRequest struct {
	Attachments []*Attachment `json:"attachments,omitempty"`

	Attributes []*Attribute1 `json:"attributes,omitempty"`

	Body string `json:"body,omitempty"`

	ConsultFormId string `json:"consultFormId,omitempty"`

	FormFields []*FormField1 `json:"formFields,omitempty"`

	IssueCategory *Category3 `json:"issueCategory,omitempty"`

	Subject string `json:"subject,omitempty"`

	TargetCaseCategories []*Category3 `json:"targetCaseCategories,omitempty"`

	TargetTeamId string `json:"targetTeamId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Attachments") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Attachments") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *CreateNoteConsultCaseRequest) MarshalJSON() ([]byte, error) {
	type noMethod CreateNoteConsultCaseRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CreateNoteConsultCaseResponse struct {
	TargetCaseId string `json:"targetCaseId,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "TargetCaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "TargetCaseId") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *CreateNoteConsultCaseResponse) MarshalJSON() ([]byte, error) {
	type noMethod CreateNoteConsultCaseResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CreateNoteRequest struct {
	Body string `json:"body,omitempty"`

	CannedResponseIds []string `json:"cannedResponseIds,omitempty"`

	CaseId string `json:"caseId,omitempty"`

	IsHtml bool `json:"isHtml,omitempty"`

	// Possible values:
	//   "PHONE"
	//   "UNKNOWN_NOTE_TYPE"
	//   "USER"
	NoteType string `json:"noteType,omitempty"`

	Subject string `json:"subject,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Body") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Body") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *CreateNoteRequest) MarshalJSON() ([]byte, error) {
	type noMethod CreateNoteRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CreateNoteResponse struct {
	Communication *Communication `json:"communication,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Communication") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Communication") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *CreateNoteResponse) MarshalJSON() ([]byte, error) {
	type noMethod CreateNoteResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CreatePitchResponse struct {
	OpportunityId string `json:"opportunityId,omitempty"`

	PitchId *PitchId `json:"pitchId,omitempty"`

	Status *Status `json:"status,omitempty"`

	// ForceSendFields is a list of field names (e.g. "OpportunityId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "OpportunityId") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *CreatePitchResponse) MarshalJSON() ([]byte, error) {
	type noMethod CreatePitchResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CreateRealTimeConsultCaseRequest struct {
	Attachments []*Attachment1 `json:"attachments,omitempty"`

	Attributes []*Attribute1 `json:"attributes,omitempty"`

	Body string `json:"body,omitempty"`

	ChatPoolId string `json:"chatPoolId,omitempty"`

	ConsultFormId string `json:"consultFormId,omitempty"`

	FormFields []*FormField2 `json:"formFields,omitempty"`

	IssueCategory *Category4 `json:"issueCategory,omitempty"`

	Subject string `json:"subject,omitempty"`

	TargetCaseCategories []*Category4 `json:"targetCaseCategories,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Attachments") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Attachments") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *CreateRealTimeConsultCaseRequest) MarshalJSON() ([]byte, error) {
	type noMethod CreateRealTimeConsultCaseRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CreateRealTimeConsultCaseResponse struct {
	TargetCaseId string `json:"targetCaseId,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "TargetCaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "TargetCaseId") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *CreateRealTimeConsultCaseResponse) MarshalJSON() ([]byte, error) {
	type noMethod CreateRealTimeConsultCaseResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CreateTroubleshooterSessionRequest struct {
	CaseId string `json:"caseId,omitempty"`

	IssueId string `json:"issueId,omitempty"`

	SsoCookie string `json:"ssoCookie,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *CreateTroubleshooterSessionRequest) MarshalJSON() ([]byte, error) {
	type noMethod CreateTroubleshooterSessionRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CreateWorkflowRequest struct {
	Workflow *CasesWorkflow `json:"workflow,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Workflow") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Workflow") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *CreateWorkflowRequest) MarshalJSON() ([]byte, error) {
	type noMethod CreateWorkflowRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CreditCard struct {
	BillingName string `json:"billingName,omitempty"`

	BillingPostalCode string `json:"billingPostalCode,omitempty"`

	CardNumberSuffix string `json:"cardNumberSuffix,omitempty"`

	CreditCardToken string `json:"creditCardToken,omitempty"`

	CreditCardType *CreditCardType `json:"creditCardType,omitempty"`

	// ForceSendFields is a list of field names (e.g. "BillingName") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "BillingName") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *CreditCard) MarshalJSON() ([]byte, error) {
	type noMethod CreditCard
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CreditCard1 struct {
	CreditCardSuffix string `json:"creditCardSuffix,omitempty"`

	// Possible values:
	//   "AMEX"
	//   "CARTES_BANCAIRES"
	//   "DISCOVER"
	//   "JCB"
	//   "MASTERCARD"
	//   "UKNOWN_AUTHENTICATION_CARD_TYPE"
	//   "VISA"
	CreditCardType string `json:"creditCardType,omitempty"`

	CreditCardTypeToken string `json:"creditCardTypeToken,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CreditCardSuffix") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CreditCardSuffix") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *CreditCard1) MarshalJSON() ([]byte, error) {
	type noMethod CreditCard1
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CreditCardType struct {
	BackgroundUrl string `json:"backgroundUrl,omitempty"`

	CreditCardTypeToken string `json:"creditCardTypeToken,omitempty"`

	Description string `json:"description,omitempty"`

	DisplayName string `json:"displayName,omitempty"`

	LogoUrl string `json:"logoUrl,omitempty"`

	// ForceSendFields is a list of field names (e.g. "BackgroundUrl") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "BackgroundUrl") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *CreditCardType) MarshalJSON() ([]byte, error) {
	type noMethod CreditCardType
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Customer struct {
	AttributeMap map[string]Attribute1 `json:"attributeMap,omitempty"`

	Authentication *Authentication `json:"authentication,omitempty"`

	Cohorts []*Cohort1 `json:"cohorts,omitempty"`

	Contact *ContactInfo `json:"contact,omitempty"`

	// Possible values:
	//   "ACTIVE"
	//   "DELETED"
	//   "DISABLED"
	//   "INVALID"
	//   "PURGED"
	//   "UNKNOWN_GAIA_ACCOUNT_STATUS"
	GaiaAccountStatus string `json:"gaiaAccountStatus,omitempty"`

	ProfileImageUrl string `json:"profileImageUrl,omitempty"`

	Timezone *Timezone `json:"timezone,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AttributeMap") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AttributeMap") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Customer) MarshalJSON() ([]byte, error) {
	type noMethod Customer
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CustomerAnswer struct {
	BankAccount *BankAccount1 `json:"bankAccount,omitempty"`

	CreditCard *CreditCard1 `json:"creditCard,omitempty"`

	Dcb *Dcb `json:"dcb,omitempty"`

	Paypal *Paypal1 `json:"paypal,omitempty"`

	PhoneNumber *PhoneNumber `json:"phoneNumber,omitempty"`

	PlayBalance *Money `json:"playBalance,omitempty"`

	PostalCode string `json:"postalCode,omitempty"`

	QuestionToken string `json:"questionToken,omitempty"`

	WalletBalance *Money `json:"walletBalance,omitempty"`

	// ForceSendFields is a list of field names (e.g. "BankAccount") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "BankAccount") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *CustomerAnswer) MarshalJSON() ([]byte, error) {
	type noMethod CustomerAnswer
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CustomerDocsSubmissionStatus struct {
	HasSubmittedDocs bool `json:"hasSubmittedDocs,omitempty"`

	SubmitTime string `json:"submitTime,omitempty"`

	// ForceSendFields is a list of field names (e.g. "HasSubmittedDocs") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "HasSubmittedDocs") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *CustomerDocsSubmissionStatus) MarshalJSON() ([]byte, error) {
	type noMethod CustomerDocsSubmissionStatus
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type CustomerIssue struct {
	Description string `json:"description,omitempty"`

	DisplayName string `json:"displayName,omitempty"`

	IssueFailures []*IssueFailure `json:"issueFailures,omitempty"`

	IssueId string `json:"issueId,omitempty"`

	// Possible values:
	//   "FAIL"
	//   "ISSUE_STATUS_UNSPECIFIED"
	//   "NOT_RUN"
	//   "PASS"
	IssueStatus string `json:"issueStatus,omitempty"`

	Rank float64 `json:"rank,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Description") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Description") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *CustomerIssue) MarshalJSON() ([]byte, error) {
	type noMethod CustomerIssue
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

func (s *CustomerIssue) UnmarshalJSON(data []byte) error {
	type noMethod CustomerIssue
	var s1 struct {
		Rank gensupport.JSONFloat64 `json:"rank"`
		*noMethod
	}
	s1.noMethod = (*noMethod)(s)
	if err := json.Unmarshal(data, &s1); err != nil {
		return err
	}
	s.Rank = float64(s1.Rank)
	return nil
}

type Date struct {
	Day int64 `json:"day,omitempty"`

	Month int64 `json:"month,omitempty"`

	Year int64 `json:"year,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Day") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Day") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Date) MarshalJSON() ([]byte, error) {
	type noMethod Date
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Dcb struct {
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// ForceSendFields is a list of field names (e.g. "PhoneNumber") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "PhoneNumber") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Dcb) MarshalJSON() ([]byte, error) {
	type noMethod Dcb
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type DeauthenticateRequest struct {
	CustomerEmail string `json:"customerEmail,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CustomerEmail") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CustomerEmail") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *DeauthenticateRequest) MarshalJSON() ([]byte, error) {
	type noMethod DeauthenticateRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type DeauthenticateResponse struct {
	Customer *Customer `json:"customer,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Customer") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Customer") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *DeauthenticateResponse) MarshalJSON() ([]byte, error) {
	type noMethod DeauthenticateResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type DedupeRequest struct {
	DuplicateCaseIds []string `json:"duplicateCaseIds,omitempty"`

	Reason string `json:"reason,omitempty"`

	// ForceSendFields is a list of field names (e.g. "DuplicateCaseIds") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "DuplicateCaseIds") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *DedupeRequest) MarshalJSON() ([]byte, error) {
	type noMethod DedupeRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type DedupeResponse struct {
	Case *Case `json:"case,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Case") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Case") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *DedupeResponse) MarshalJSON() ([]byte, error) {
	type noMethod DedupeResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type DeliveryInfo struct {
	// Possible values:
	//   "FAILED"
	//   "NOT_SCHEDULED"
	//   "PENDING"
	//   "SENT"
	//   "UNKNOWN_DELIVERY_STATUS"
	DeliveryStatus string `json:"deliveryStatus,omitempty"`

	// ForceSendFields is a list of field names (e.g. "DeliveryStatus") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "DeliveryStatus") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *DeliveryInfo) MarshalJSON() ([]byte, error) {
	type noMethod DeliveryInfo
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type DesktopScreenshareAcceptEvent struct {
}

type DesktopScreenshareAutoDeclineEvent struct {
	// Possible values:
	//   "NOT_SUPPORTED"
	//   "UNKNOWN_AUTO_DECLINE_TYPE"
	DeclineType string `json:"declineType,omitempty"`

	// ForceSendFields is a list of field names (e.g. "DeclineType") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "DeclineType") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *DesktopScreenshareAutoDeclineEvent) MarshalJSON() ([]byte, error) {
	type noMethod DesktopScreenshareAutoDeclineEvent
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type DesktopScreenshareCancelEvent struct {
}

type DesktopScreenshareCleanupEvent struct {
}

type DesktopScreenshareConnectEvent struct {
}

type DesktopScreenshareDeclineEvent struct {
}

type DesktopScreenshareDisconnectEvent struct {
}

type DesktopScreenshareEndEvent struct {
	AgentEnded bool `json:"agentEnded,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AgentEnded") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AgentEnded") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *DesktopScreenshareEndEvent) MarshalJSON() ([]byte, error) {
	type noMethod DesktopScreenshareEndEvent
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type DesktopScreenshareEvent struct {
	AcceptEvent *DesktopScreenshareAcceptEvent `json:"acceptEvent,omitempty"`

	AutoDeclineEvent *DesktopScreenshareAutoDeclineEvent `json:"autoDeclineEvent,omitempty"`

	CancelEvent *DesktopScreenshareCancelEvent `json:"cancelEvent,omitempty"`

	CleanupEvent *DesktopScreenshareCleanupEvent `json:"cleanupEvent,omitempty"`

	ConnectEvent *DesktopScreenshareConnectEvent `json:"connectEvent,omitempty"`

	DeclineEvent *DesktopScreenshareDeclineEvent `json:"declineEvent,omitempty"`

	DisconnectEvent *DesktopScreenshareDisconnectEvent `json:"disconnectEvent,omitempty"`

	EndEvent *DesktopScreenshareEndEvent `json:"endEvent,omitempty"`

	InitiateEvent *DesktopScreenshareInitiateEvent `json:"initiateEvent,omitempty"`

	InvitationId string `json:"invitationId,omitempty"`

	InviteEvent *DesktopScreenshareInviteEvent `json:"inviteEvent,omitempty"`

	JoinEvent *DesktopScreenshareJoinEvent `json:"joinEvent,omitempty"`

	LeaveEvent *DesktopScreenshareLeaveEvent `json:"leaveEvent,omitempty"`

	ReceivedEvent *DesktopScreenshareReceivedEvent `json:"receivedEvent,omitempty"`

	RevivedEvent *DesktopScreenshareRevivedEvent `json:"revivedEvent,omitempty"`

	StartingConnectEvent *DesktopScreenshareStartingConnectEvent `json:"startingConnectEvent,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AcceptEvent") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AcceptEvent") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *DesktopScreenshareEvent) MarshalJSON() ([]byte, error) {
	type noMethod DesktopScreenshareEvent
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type DesktopScreenshareInitiateEvent struct {
	// Possible values:
	//   "SUPPORTED"
	//   "UNKNOWN"
	//   "UNKNOWN_SCREENSHARING_STATE"
	//   "UNSUPPORTED"
	ScreensharingState string `json:"screensharingState,omitempty"`

	// ForceSendFields is a list of field names (e.g. "ScreensharingState")
	// to unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ScreensharingState") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *DesktopScreenshareInitiateEvent) MarshalJSON() ([]byte, error) {
	type noMethod DesktopScreenshareInitiateEvent
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type DesktopScreenshareInviteEvent struct {
}

type DesktopScreenshareJoinEvent struct {
	AgentJoined bool `json:"agentJoined,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AgentJoined") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AgentJoined") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *DesktopScreenshareJoinEvent) MarshalJSON() ([]byte, error) {
	type noMethod DesktopScreenshareJoinEvent
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type DesktopScreenshareLeaveEvent struct {
	AgentLeft bool `json:"agentLeft,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AgentLeft") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AgentLeft") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *DesktopScreenshareLeaveEvent) MarshalJSON() ([]byte, error) {
	type noMethod DesktopScreenshareLeaveEvent
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type DesktopScreenshareReceivedEvent struct {
}

type DesktopScreenshareRevivedEvent struct {
}

type DesktopScreenshareStartingConnectEvent struct {
}

type Device struct {
	// Possible values:
	//   "ADVANCED_EXCHANGE"
	//   "EXCHANGE"
	//   "EXCHANGE_WITHOUT_RETURN"
	//   "REPAIR"
	//   "RETURN"
	//   "UNKNOWN_ACTION"
	//   "WARRANTY_REFUND"
	Actions []string `json:"actions,omitempty"`

	CountryOfPurchase string `json:"countryOfPurchase,omitempty"`

	// Possible values:
	//   "CHROMEBOOK"
	//   "UNKNOWN_DEVICE_CLASS"
	DeviceClass string `json:"deviceClass,omitempty"`

	DeviceId string `json:"deviceId,omitempty"`

	DisplayName string `json:"displayName,omitempty"`

	DoaEndDate string `json:"doaEndDate,omitempty"`

	DoaExpired bool `json:"doaExpired,omitempty"`

	ExchangeGpn string `json:"exchangeGpn,omitempty"`

	ExtendedWarrantyActive bool `json:"extendedWarrantyActive,omitempty"`

	ExtendedWarrantyContractId string `json:"extendedWarrantyContractId,omitempty"`

	ExtendedWarrantyEndDate string `json:"extendedWarrantyEndDate,omitempty"`

	ExtendedWarrantyExpired bool `json:"extendedWarrantyExpired,omitempty"`

	Gpn string `json:"gpn,omitempty"`

	HashedFullDeviceId string `json:"hashedFullDeviceId,omitempty"`

	// Possible values:
	//   "CONVERTED_TO_DASH_R"
	//   "GOOGLE_SHOPPING_EXPRESS"
	//   "NO_DATA_AVAILABLE"
	//   "NO_LONGER_SUPPORTED"
	//   "NO_RMA_REASON_SET"
	//   "UNKNOWN_NO_RMA_REASON"
	//   "UNSUPPORTED_3PR_DEVICE"
	//   "WALK_IN_CENTERS_ONLY"
	NoRmaTypeReason string `json:"noRmaTypeReason,omitempty"`

	OrderNumber string `json:"orderNumber,omitempty"`

	// Possible values:
	//   "BULK_ORDER"
	//   "EVENT_GIVEAWAY"
	//   "GOOGLER_GIFT"
	//   "GOOGLE_PLAY"
	//   "RETAIL"
	//   "UNKNOWN_POINT_OF_PURCHASE"
	PointOfPurchase string `json:"pointOfPurchase,omitempty"`

	PurchaseDate string `json:"purchaseDate,omitempty"`

	RemorseEndDate string `json:"remorseEndDate,omitempty"`

	RemorseExpired bool `json:"remorseExpired,omitempty"`

	ReplacementDevices []*ReplacementDevice `json:"replacementDevices,omitempty"`

	RmaTypes []*RmaType `json:"rmaTypes,omitempty"`

	Rmas []*DeviceRma `json:"rmas,omitempty"`

	ShipDate string `json:"shipDate,omitempty"`

	ShipmentId string `json:"shipmentId,omitempty"`

	SupportedBy3pr bool `json:"supportedBy3pr,omitempty"`

	WarrantyEndDate string `json:"warrantyEndDate,omitempty"`

	WarrantyExpired bool `json:"warrantyExpired,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Actions") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Actions") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Device) MarshalJSON() ([]byte, error) {
	type noMethod Device
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Device1 struct {
	// Possible values:
	//   "ADVANCED_EXCHANGE"
	//   "EXCHANGE"
	//   "EXCHANGE_WITHOUT_RETURN"
	//   "REPAIR"
	//   "RETURN"
	//   "RMA_ACTION_NOT_SET"
	//   "WARRANTY_REFUND"
	Action string `json:"action,omitempty"`

	DeviceId string `json:"deviceId,omitempty"`

	DisplayName string `json:"displayName,omitempty"`

	HashedFullDeviceId string `json:"hashedFullDeviceId,omitempty"`

	RmaNumber string `json:"rmaNumber,omitempty"`

	// Possible values:
	//   "RMA_CANCELLED"
	//   "RMA_COMPLETED"
	//   "RMA_INCOMPLETE"
	//   "RMA_PENDING"
	//   "RMA_STATE_NOT_SET"
	//   "RMA_SUBMITTED"
	State string `json:"state,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Action") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Action") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Device1) MarshalJSON() ([]byte, error) {
	type noMethod Device1
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Device2 struct {
	AndroidId string `json:"androidId,omitempty"`

	DisplayName string `json:"displayName,omitempty"`

	Imei string `json:"imei,omitempty"`

	LastUsedTime string `json:"lastUsedTime,omitempty"`

	Manufacturer string `json:"manufacturer,omitempty"`

	ModelName string `json:"modelName,omitempty"`

	RegistrationTime string `json:"registrationTime,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AndroidId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AndroidId") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Device2) MarshalJSON() ([]byte, error) {
	type noMethod Device2
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type DeviceRma struct {
	AuthHold bool `json:"authHold,omitempty"`

	// Possible values:
	//   "GENERATE_PACKING_LABEL"
	//   "GENERATE_REPLACEMENT_CART_LINK"
	//   "GENERATE_SHIPPING_LABEL"
	//   "SUBMIT_RMA"
	//   "UNKNOWN_FLOW"
	//   "UPDATE_ADDRESS_AND_SEND_SHIPPING_EMAIL"
	AvailableFlows []string `json:"availableFlows,omitempty"`

	Cancelable bool `json:"cancelable,omitempty"`

	Identifier *RmaIdentifier `json:"identifier,omitempty"`

	// Possible values:
	//   "RMA_CANCELLED"
	//   "RMA_COMPLETED"
	//   "RMA_INCOMPLETE"
	//   "RMA_PENDING"
	//   "RMA_SUBMITTED"
	//   "UNKNOWN_RMA_STATE"
	State string `json:"state,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AuthHold") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AuthHold") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *DeviceRma) MarshalJSON() ([]byte, error) {
	type noMethod DeviceRma
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type DifmAction struct {
	DifmId int64 `json:"difmId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "DifmId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "DifmId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *DifmAction) MarshalJSON() ([]byte, error) {
	type noMethod DifmAction
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type DirectCarrierBilling struct {
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// ForceSendFields is a list of field names (e.g. "PhoneNumber") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "PhoneNumber") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *DirectCarrierBilling) MarshalJSON() ([]byte, error) {
	type noMethod DirectCarrierBilling
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type DiscardDraftRequest struct {
	CaseId string `json:"caseId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *DiscardDraftRequest) MarshalJSON() ([]byte, error) {
	type noMethod DiscardDraftRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type DiscardDraftResponse struct {
	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`
}

type Docid struct {
	Backend string `json:"backend,omitempty"`

	BackendDocid string `json:"backendDocid,omitempty"`

	// Possible values:
	//   "ANDROID_APK"
	//   "ANDROID_APP"
	//   "ANDROID_DEVELOPER"
	//   "ANDROID_DYNAMIC_MODULE"
	//   "ANDROID_IN_APP_ITEM"
	//   "APK"
	//   "APPS_RECS_TOPIC_METADATA"
	//   "APPS_TOPIC"
	//   "BADGE"
	//   "BADGE_CONTAINER"
	//   "BOOKS_EDITORIAL_ARTICLE"
	//   "BOOKS_EXPLORE_ANNOUNCEMENT"
	//   "BOOKS_EXPLORE_NEWSSTAND_POST"
	//   "BOOKS_EXPLORE_YOUTUBE_VIDEO"
	//   "BUNDLE"
	//   "CHROME_APP"
	//   "CLUSTER"
	//   "CONTAINER"
	//   "DOCUMENT_TYPE_UNSPECIFIED"
	//   "DYNAMIC_ANDROID_IN_APP_ITEM"
	//   "DYNAMIC_SUBSCRIPTION"
	//   "EDITORIAL"
	//   "ENTERTAINMENT_STORY"
	//   "HARDWARE"
	//   "HARDWARE_PROMOTION"
	//   "HARDWARE_SHIPPING"
	//   "LINK"
	//   "MAGAZINE"
	//   "MAGAZINE_ISSUE"
	//   "MOVIES_PERSISTED_CLUSTER"
	//   "MOVIE_PERSON"
	//   "MUSIC_ACCESS"
	//   "MUSIC_ADAPTIVE_HOME_CARD_IMAGE"
	//   "MUSIC_ALBUM"
	//   "MUSIC_ARTIST"
	//   "MUSIC_AUDIO_AD"
	//   "MUSIC_BROWSE_CATEGORY"
	//   "MUSIC_CONCERT"
	//   "MUSIC_NOW_MODULE_HEADING"
	//   "MUSIC_PODCAST_EPISODE"
	//   "MUSIC_PODCAST_SERIES"
	//   "MUSIC_SITUATION"
	//   "MUSIC_SONG"
	//   "MUSIC_STATION"
	//   "MUSIC_USER_PLAYLIST"
	//   "MUSIC_VENUE"
	//   "NEWS_EDITION"
	//   "NEWS_ISSUE"
	//   "OCEAN_AUDIOBOOK"
	//   "OCEAN_AUTHOR"
	//   "OCEAN_BOOK"
	//   "OCEAN_BOOK_SERIES"
	//   "PERSON"
	//   "PLAY_BALANCE_TOP_UP"
	//   "PLAY_STORED_VALUE"
	//   "STREAM"
	//   "SUBSCRIPTION"
	//   "SUGGEST_CONTAINER"
	//   "TALENT"
	//   "TOPIC"
	//   "TV_BROADCASTER"
	//   "TV_EPISODE"
	//   "TV_SEASON"
	//   "TV_SHOW"
	//   "VETTED_APP_FEATURE"
	//   "VIDEO_DISTRIBUTOR"
	//   "VOUCHER"
	//   "YOUTUBE_MOVIE"
	Type string `json:"type,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Backend") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Backend") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Docid) MarshalJSON() ([]byte, error) {
	type noMethod Docid
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type DraftInfo struct {
	// Possible values:
	//   "ASSIGNED"
	//   "BLOCKED_BY"
	//   "FINISHED"
	//   "IN_CONSULT"
	//   "NEED_INFO"
	//   "NEW"
	//   "SOLUTION_OFFERED"
	//   "UNASSIGNED"
	//   "UNKNOWN_CASE_STATE"
	TransitionToState string `json:"transitionToState,omitempty"`

	// ForceSendFields is a list of field names (e.g. "TransitionToState")
	// to unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "TransitionToState") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *DraftInfo) MarshalJSON() ([]byte, error) {
	type noMethod DraftInfo
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Duplicate struct {
	SourceCaseId string `json:"sourceCaseId,omitempty"`

	TargetCaseId string `json:"targetCaseId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "SourceCaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "SourceCaseId") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Duplicate) MarshalJSON() ([]byte, error) {
	type noMethod Duplicate
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type EasterEggSettings struct {
	DisableBoostCard bool `json:"disableBoostCard,omitempty"`

	// ForceSendFields is a list of field names (e.g. "DisableBoostCard") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "DisableBoostCard") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *EasterEggSettings) MarshalJSON() ([]byte, error) {
	type noMethod EasterEggSettings
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Email struct {
	Body string `json:"body,omitempty"`

	DeliveryInfo *DeliveryInfo `json:"deliveryInfo,omitempty"`

	Headers *Headers `json:"headers,omitempty"`

	IsHtml bool `json:"isHtml,omitempty"`

	// Possible values:
	//   "NEW"
	//   "REPLY"
	//   "REPLY_ALL"
	//   "UNKNOWN_EMAIL_TYPE"
	Type string `json:"type,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Body") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Body") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Email) MarshalJSON() ([]byte, error) {
	type noMethod Email
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Email1 struct {
	Sla string `json:"sla,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Sla") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Sla") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Email1) MarshalJSON() ([]byte, error) {
	type noMethod Email1
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Email2 struct {
	Locale []string `json:"locale,omitempty"`

	Sla string `json:"sla,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Locale") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Locale") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Email2) MarshalJSON() ([]byte, error) {
	type noMethod Email2
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type EmailAddress struct {
	// Possible values:
	//   "EXTERNAL"
	//   "PERSONAL_ALIAS"
	//   "PRODUCT_ALIAS"
	//   "TEAM_ALIAS"
	//   "UNKNOWN_EMAIL_ADDRESS_TYPE"
	Type string `json:"type,omitempty"`

	Value string `json:"value,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Type") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Type") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *EmailAddress) MarshalJSON() ([]byte, error) {
	type noMethod EmailAddress
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type EmploymentInfo struct {
	EmploymentType string `json:"employmentType,omitempty"`

	Location string `json:"location,omitempty"`

	TvcStaffingPartner string `json:"tvcStaffingPartner,omitempty"`

	// ForceSendFields is a list of field names (e.g. "EmploymentType") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "EmploymentType") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *EmploymentInfo) MarshalJSON() ([]byte, error) {
	type noMethod EmploymentInfo
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Empty struct {
	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`
}

type Entitlement struct {
	// Possible values:
	//   "CANCELABLE"
	//   "ENTITLEMENT_ACTIONS_UNKNOWN"
	//   "REVOKABLE"
	Actions []string `json:"actions,omitempty"`

	Badges []*EntitlementBadge `json:"badges,omitempty"`

	// Possible values:
	//   "BILLING"
	//   "CDP"
	//   "PAYMENT_BACKEND_UNDEFINED"
	BillingBackend string `json:"billingBackend,omitempty"`

	BillingPeriod *Period `json:"billingPeriod,omitempty"`

	CancelTime string `json:"cancelTime,omitempty"`

	ComponentData *ComponentData `json:"componentData,omitempty"`

	CustomerTimezone string `json:"customerTimezone,omitempty"`

	EntitlementToken string `json:"entitlementToken,omitempty"`

	HasFuturePayments bool `json:"hasFuturePayments,omitempty"`

	InFreeTrial bool `json:"inFreeTrial,omitempty"`

	IsActive bool `json:"isActive,omitempty"`

	IsCancelable bool `json:"isCancelable,omitempty"`

	IsRevokable bool `json:"isRevokable,omitempty"`

	LocalizedCancelTime *LocalizedTimestamp `json:"localizedCancelTime,omitempty"`

	LocalizedPurchaseTime *LocalizedTimestamp `json:"localizedPurchaseTime,omitempty"`

	Name string `json:"name,omitempty"`

	OrderId string `json:"orderId,omitempty"`

	// Possible values:
	//   "BUNDLE"
	//   "LIVE_EVENT"
	//   "MOVIE"
	//   "PRODUCT_TYPE_UNKNOWN"
	//   "RED"
	//   "SEASON"
	//   "SHOW"
	//   "UNPLUGGED"
	ProductType string `json:"productType,omitempty"`

	PurchaseTime string `json:"purchaseTime,omitempty"`

	RedSignals *RedSignals `json:"redSignals,omitempty"`

	ShmoovieSignals *ShmoovieSignals `json:"shmoovieSignals,omitempty"`

	// Possible values:
	//   "ACTIVE_NOT_RENEWING"
	//   "ACTIVE_RENEWING"
	//   "ENTITLEMENT_STATE_ERROR"
	//   "ENTITLEMENT_STATE_UNKNOWN"
	//   "INACTIVE"
	State string `json:"state,omitempty"`

	UnpluggedSignals *UnpluggedSignals `json:"unpluggedSignals,omitempty"`

	Url string `json:"url,omitempty"`

	UtcOffset int64 `json:"utcOffset,omitempty,string"`

	// ForceSendFields is a list of field names (e.g. "Actions") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Actions") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Entitlement) MarshalJSON() ([]byte, error) {
	type noMethod Entitlement
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type EntitlementBadge struct {
	// Possible values:
	//   "FAMILY_HEAD"
	//   "FAMILY_MEMBER"
	//   "FREE_TRIAL"
	//   "GRACE_PERIOD"
	//   "IN_FREE_TRIAL"
	//   "IOS"
	//   "UNDEFINED"
	Type string `json:"type,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Type") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Type") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *EntitlementBadge) MarshalJSON() ([]byte, error) {
	type noMethod EntitlementBadge
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type EntitlementComponent struct {
	AccessExpiryTime string `json:"accessExpiryTime,omitempty"`

	AccessStartTime string `json:"accessStartTime,omitempty"`

	// Possible values:
	//   "CANCELABLE"
	//   "ENTITLEMENT_ACTIONS_UNKNOWN"
	//   "REVOKABLE"
	Actions []string `json:"actions,omitempty"`

	CancelTime string `json:"cancelTime,omitempty"`

	ComponentToken string `json:"componentToken,omitempty"`

	EntitlementId string `json:"entitlementId,omitempty"`

	HasFuturePayments bool `json:"hasFuturePayments,omitempty"`

	IntroductoryPrice *Money `json:"introductoryPrice,omitempty"`

	IsActive bool `json:"isActive,omitempty"`

	IsBasePackage bool `json:"isBasePackage,omitempty"`

	IsCancelable bool `json:"isCancelable,omitempty"`

	IsRevokable bool `json:"isRevokable,omitempty"`

	ItemId string `json:"itemId,omitempty"`

	LineItemKey []string `json:"lineItemKey,omitempty"`

	LocalizedAccessExpiryTime *LocalizedTimestamp `json:"localizedAccessExpiryTime,omitempty"`

	LocalizedAccessStartTime *LocalizedTimestamp `json:"localizedAccessStartTime,omitempty"`

	LocalizedCancelTime *LocalizedTimestamp `json:"localizedCancelTime,omitempty"`

	LocalizedTrialEndTime *LocalizedTimestamp `json:"localizedTrialEndTime,omitempty"`

	MonthlyPrice *Money `json:"monthlyPrice,omitempty"`

	// Possible values:
	//   "ACTIVE_NOT_RENEWING"
	//   "ACTIVE_RENEWING"
	//   "ENTITLEMENT_STATE_ERROR"
	//   "ENTITLEMENT_STATE_UNKNOWN"
	//   "INACTIVE"
	State string `json:"state,omitempty"`

	Title string `json:"title,omitempty"`

	TrialEndTime string `json:"trialEndTime,omitempty"`

	TrialPeriod *Period `json:"trialPeriod,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AccessExpiryTime") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AccessExpiryTime") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *EntitlementComponent) MarshalJSON() ([]byte, error) {
	type noMethod EntitlementComponent
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Entry struct {
	BoolValue bool `json:"boolValue,omitempty"`

	DoubleValue float64 `json:"doubleValue,omitempty"`

	EnumValue string `json:"enumValue,omitempty"`

	Int64Value int64 `json:"int64Value,omitempty,string"`

	IntValue int64 `json:"intValue,omitempty"`

	Sources []*Source `json:"sources,omitempty"`

	StringValue string `json:"stringValue,omitempty"`

	TimeValue string `json:"timeValue,omitempty"`

	// ForceSendFields is a list of field names (e.g. "BoolValue") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "BoolValue") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Entry) MarshalJSON() ([]byte, error) {
	type noMethod Entry
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

func (s *Entry) UnmarshalJSON(data []byte) error {
	type noMethod Entry
	var s1 struct {
		DoubleValue gensupport.JSONFloat64 `json:"doubleValue"`
		*noMethod
	}
	s1.noMethod = (*noMethod)(s)
	if err := json.Unmarshal(data, &s1); err != nil {
		return err
	}
	s.DoubleValue = float64(s1.DoubleValue)
	return nil
}

type EnumValue struct {
	DisplayValue string `json:"displayValue,omitempty"`

	Value string `json:"value,omitempty"`

	// ForceSendFields is a list of field names (e.g. "DisplayValue") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "DisplayValue") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *EnumValue) MarshalJSON() ([]byte, error) {
	type noMethod EnumValue
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type EscalateRequest struct {
	EscalationId string `json:"escalationId,omitempty"`

	Locale string `json:"locale,omitempty"`

	ProductId string `json:"productId,omitempty"`

	Reason string `json:"reason,omitempty"`

	// ForceSendFields is a list of field names (e.g. "EscalationId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "EscalationId") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *EscalateRequest) MarshalJSON() ([]byte, error) {
	type noMethod EscalateRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type EscalateResponse struct {
	Case *Case `json:"case,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Case") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Case") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *EscalateResponse) MarshalJSON() ([]byte, error) {
	type noMethod EscalateResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type EscalateSettings struct {
}

type EscalationInfo struct {
	AgentTransfer *AgentTransfer `json:"agentTransfer,omitempty"`

	ChatTransfer *ChatTransfer `json:"chatTransfer,omitempty"`

	EscalationTargetName string `json:"escalationTargetName,omitempty"`

	LocaleTransfer *LocaleTransfer `json:"localeTransfer,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AgentTransfer") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AgentTransfer") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *EscalationInfo) MarshalJSON() ([]byte, error) {
	type noMethod EscalationInfo
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type EscalationTarget struct {
	Chat *Chat `json:"chat,omitempty"`

	Email *Email1 `json:"email,omitempty"`

	TargetId string `json:"targetId,omitempty"`

	TargetName string `json:"targetName,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Chat") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Chat") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *EscalationTarget) MarshalJSON() ([]byte, error) {
	type noMethod EscalationTarget
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ExtendedWarrantyInfo struct {
	ContractId string `json:"contractId,omitempty"`

	LineItemId int64 `json:"lineItemId,omitempty"`

	Price *Money `json:"price,omitempty"`

	// ForceSendFields is a list of field names (e.g. "ContractId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ContractId") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ExtendedWarrantyInfo) MarshalJSON() ([]byte, error) {
	type noMethod ExtendedWarrantyInfo
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ExternalToolSettings struct {
	AccountLookupTools []*AccountLookupTool `json:"accountLookupTools,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AccountLookupTools")
	// to unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AccountLookupTools") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *ExternalToolSettings) MarshalJSON() ([]byte, error) {
	type noMethod ExternalToolSettings
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type FinalizeConsultNoteRequest struct {
	CaseId string `json:"caseId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *FinalizeConsultNoteRequest) MarshalJSON() ([]byte, error) {
	type noMethod FinalizeConsultNoteRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type FinalizeConsultNoteResponse struct {
	Communication *Communication `json:"communication,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Communication") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Communication") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *FinalizeConsultNoteResponse) MarshalJSON() ([]byte, error) {
	type noMethod FinalizeConsultNoteResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type FinalizeNoteRequest struct {
	CaseId string `json:"caseId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *FinalizeNoteRequest) MarshalJSON() ([]byte, error) {
	type noMethod FinalizeNoteRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type FinalizeNoteResponse struct {
	Communication *Communication `json:"communication,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Communication") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Communication") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *FinalizeNoteResponse) MarshalJSON() ([]byte, error) {
	type noMethod FinalizeNoteResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type FinishRequest struct {
}

type FinishResponse struct {
	Case *Case `json:"case,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Case") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Case") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *FinishResponse) MarshalJSON() ([]byte, error) {
	type noMethod FinishResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type FocusInfo struct {
	ProfileImageUrl string `json:"profileImageUrl,omitempty"`

	// ForceSendFields is a list of field names (e.g. "ProfileImageUrl") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ProfileImageUrl") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *FocusInfo) MarshalJSON() ([]byte, error) {
	type noMethod FocusInfo
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Form struct {
}

type FormField struct {
	Label string `json:"label,omitempty"`

	Name string `json:"name,omitempty"`

	Values []*FormFieldValue `json:"values,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Label") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Label") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *FormField) MarshalJSON() ([]byte, error) {
	type noMethod FormField
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type FormField1 struct {
	FormFieldDisplayValues []*FormFieldValue1 `json:"formFieldDisplayValues,omitempty"`

	FormFieldLabel string `json:"formFieldLabel,omitempty"`

	FormFieldName string `json:"formFieldName,omitempty"`

	FormFieldValues []string `json:"formFieldValues,omitempty"`

	// ForceSendFields is a list of field names (e.g.
	// "FormFieldDisplayValues") to unconditionally include in API requests.
	// By default, fields with empty values are omitted from API requests.
	// However, any non-pointer, non-interface field appearing in
	// ForceSendFields will be sent to the server regardless of whether the
	// field is empty or not. This may be used to include empty fields in
	// Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "FormFieldDisplayValues")
	// to include in API requests with the JSON null value. By default,
	// fields with empty values are omitted from API requests. However, any
	// field with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *FormField1) MarshalJSON() ([]byte, error) {
	type noMethod FormField1
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type FormField2 struct {
	FormFieldDisplayValues []*FormFieldValue2 `json:"formFieldDisplayValues,omitempty"`

	FormFieldLabel string `json:"formFieldLabel,omitempty"`

	FormFieldName string `json:"formFieldName,omitempty"`

	FormFieldValues []string `json:"formFieldValues,omitempty"`

	// ForceSendFields is a list of field names (e.g.
	// "FormFieldDisplayValues") to unconditionally include in API requests.
	// By default, fields with empty values are omitted from API requests.
	// However, any non-pointer, non-interface field appearing in
	// ForceSendFields will be sent to the server regardless of whether the
	// field is empty or not. This may be used to include empty fields in
	// Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "FormFieldDisplayValues")
	// to include in API requests with the JSON null value. By default,
	// fields with empty values are omitted from API requests. However, any
	// field with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *FormField2) MarshalJSON() ([]byte, error) {
	type noMethod FormField2
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type FormFieldValue struct {
	DisplayValue string `json:"displayValue,omitempty"`

	Value string `json:"value,omitempty"`

	// ForceSendFields is a list of field names (e.g. "DisplayValue") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "DisplayValue") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *FormFieldValue) MarshalJSON() ([]byte, error) {
	type noMethod FormFieldValue
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type FormFieldValue1 struct {
	DisplayValue string `json:"displayValue,omitempty"`

	Value string `json:"value,omitempty"`

	// ForceSendFields is a list of field names (e.g. "DisplayValue") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "DisplayValue") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *FormFieldValue1) MarshalJSON() ([]byte, error) {
	type noMethod FormFieldValue1
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type FormFieldValue2 struct {
	DisplayValue string `json:"displayValue,omitempty"`

	Value string `json:"value,omitempty"`

	// ForceSendFields is a list of field names (e.g. "DisplayValue") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "DisplayValue") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *FormFieldValue2) MarshalJSON() ([]byte, error) {
	type noMethod FormFieldValue2
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type FormMetadata struct {
	FormFields []*FormField `json:"formFields,omitempty"`

	FormId string `json:"formId,omitempty"`

	HelpcenterName string `json:"helpcenterName,omitempty"`

	// ForceSendFields is a list of field names (e.g. "FormFields") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "FormFields") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *FormMetadata) MarshalJSON() ([]byte, error) {
	type noMethod FormMetadata
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetAccountReviewStatusRequest struct {
	CaseId string `json:"caseId,omitempty"`

	ReviewKey *ReviewKey `json:"reviewKey,omitempty"`

	SsoCookie string `json:"ssoCookie,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *GetAccountReviewStatusRequest) MarshalJSON() ([]byte, error) {
	type noMethod GetAccountReviewStatusRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetAccountReviewStatusResponse struct {
	// Possible values:
	//   "REVIEW_FIX_ACTION_UNSPECIFIED"
	ReviewAction string `json:"reviewAction,omitempty"`

	ReviewKey *ReviewKey `json:"reviewKey,omitempty"`

	// Possible values:
	//   "ASSIGNED"
	//   "CLOSED"
	//   "REVIEW_STATE_UNSPECIFIED"
	//   "UNASSIGNED"
	//   "UNKNOWN_REVIEW_STATE"
	ReviewState string `json:"reviewState,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "ReviewAction") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ReviewAction") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *GetAccountReviewStatusResponse) MarshalJSON() ([]byte, error) {
	type noMethod GetAccountReviewStatusResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetAccountSignalsResponse struct {
	Results []*AccountSignalResult `json:"results,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Results") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Results") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *GetAccountSignalsResponse) MarshalJSON() ([]byte, error) {
	type noMethod GetAccountSignalsResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetAgentSearchCountResponse struct {
	SearchCounts []*SearchCount `json:"searchCounts,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "SearchCounts") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "SearchCounts") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *GetAgentSearchCountResponse) MarshalJSON() ([]byte, error) {
	type noMethod GetAgentSearchCountResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetAgentUnreadCasesInfoResponse struct {
	AgentUnreadCasesInfo *AgentUnreadCasesInfo `json:"agentUnreadCasesInfo,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g.
	// "AgentUnreadCasesInfo") to unconditionally include in API requests.
	// By default, fields with empty values are omitted from API requests.
	// However, any non-pointer, non-interface field appearing in
	// ForceSendFields will be sent to the server regardless of whether the
	// field is empty or not. This may be used to include empty fields in
	// Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AgentUnreadCasesInfo") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *GetAgentUnreadCasesInfoResponse) MarshalJSON() ([]byte, error) {
	type noMethod GetAgentUnreadCasesInfoResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetAuthenticationCreditCardTypesRequest struct {
	CustomerEmail string `json:"customerEmail,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CustomerEmail") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CustomerEmail") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *GetAuthenticationCreditCardTypesRequest) MarshalJSON() ([]byte, error) {
	type noMethod GetAuthenticationCreditCardTypesRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetAuthenticationCreditCardTypesResponse struct {
	AuthenticationCreditCards []*AuthenticationCreditCard `json:"authenticationCreditCards,omitempty"`

	// Possible values:
	//   "AMEX"
	//   "CARTES_BANCAIRES"
	//   "DISCOVER"
	//   "JCB"
	//   "MASTERCARD"
	//   "UKNOWN_AUTHENTICATION_CARD_TYPE"
	//   "VISA"
	CreditCardTypes []string `json:"creditCardTypes,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g.
	// "AuthenticationCreditCards") to unconditionally include in API
	// requests. By default, fields with empty values are omitted from API
	// requests. However, any non-pointer, non-interface field appearing in
	// ForceSendFields will be sent to the server regardless of whether the
	// field is empty or not. This may be used to include empty fields in
	// Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g.
	// "AuthenticationCreditCards") to include in API requests with the JSON
	// null value. By default, fields with empty values are omitted from API
	// requests. However, any field with an empty value appearing in
	// NullFields will be sent to the server as null. It is an error if a
	// field in this list has a non-empty value. This may be used to include
	// null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *GetAuthenticationCreditCardTypesResponse) MarshalJSON() ([]byte, error) {
	type noMethod GetAuthenticationCreditCardTypesResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetAuthenticationQuestionsRequest struct {
	AgentSsoCookie string `json:"agentSsoCookie,omitempty"`

	CustomerEmail string `json:"customerEmail,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AgentSsoCookie") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AgentSsoCookie") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *GetAuthenticationQuestionsRequest) MarshalJSON() ([]byte, error) {
	type noMethod GetAuthenticationQuestionsRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetAuthenticationQuestionsResponse struct {
	QuestionSets []*QuestionSet `json:"questionSets,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "QuestionSets") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "QuestionSets") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *GetAuthenticationQuestionsResponse) MarshalJSON() ([]byte, error) {
	type noMethod GetAuthenticationQuestionsResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetAuthenticationResultRequest struct {
	AgentSsoCookie string `json:"agentSsoCookie,omitempty"`

	CustomerEmail string `json:"customerEmail,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AgentSsoCookie") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AgentSsoCookie") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *GetAuthenticationResultRequest) MarshalJSON() ([]byte, error) {
	type noMethod GetAuthenticationResultRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetAuthenticationResultResponse struct {
	// Possible values:
	//   "FAIL"
	//   "PASS"
	//   "PENDING"
	//   "UNKNOWN_RESULT"
	Result string `json:"result,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Result") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Result") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *GetAuthenticationResultResponse) MarshalJSON() ([]byte, error) {
	type noMethod GetAuthenticationResultResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetBusinessListingsRequest struct {
	EmailAddress string `json:"emailAddress,omitempty"`

	// ForceSendFields is a list of field names (e.g. "EmailAddress") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "EmailAddress") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *GetBusinessListingsRequest) MarshalJSON() ([]byte, error) {
	type noMethod GetBusinessListingsRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetBusinessListingsResponse struct {
	Listings []*Business `json:"listings,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Listings") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Listings") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *GetBusinessListingsResponse) MarshalJSON() ([]byte, error) {
	type noMethod GetBusinessListingsResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetByDeviceIdResponse struct {
	Device *Device `json:"device,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Device") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Device") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *GetByDeviceIdResponse) MarshalJSON() ([]byte, error) {
	type noMethod GetByDeviceIdResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetCancellationStatusRequest struct {
	CaseId string `json:"caseId,omitempty"`

	SsoCookie string `json:"ssoCookie,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *GetCancellationStatusRequest) MarshalJSON() ([]byte, error) {
	type noMethod GetCancellationStatusRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetCancellationStatusResponse struct {
	// Possible values:
	//   "CANCEL_REASON_ACCIDENTAL_PURCHASE"
	//   "CANCEL_REASON_DEFECTIVE"
	//   "CANCEL_REASON_DID_NOT_RECEIVE"
	//   "CANCEL_REASON_FRAUD"
	//   "CANCEL_REASON_FRIENDLY_FRAUD"
	//   "CANCEL_REASON_REMORSE"
	//   "CANCEL_REASON_UNSPECIFIED"
	Reason string `json:"reason,omitempty"`

	Subscription *Subscription `json:"subscription,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Reason") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Reason") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *GetCancellationStatusResponse) MarshalJSON() ([]byte, error) {
	type noMethod GetCancellationStatusResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetConsultSlaRequest struct {
	// Possible values:
	//   "NOTE"
	//   "UNKNOWN_CHANNEL"
	Channel string `json:"channel,omitempty"`

	ConsultFormId string `json:"consultFormId,omitempty"`

	DynamicAttributes []*Attribute1 `json:"dynamicAttributes,omitempty"`

	IssueCategory *Category5 `json:"issueCategory,omitempty"`

	TargetCaseCategories []*Category5 `json:"targetCaseCategories,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Channel") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Channel") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *GetConsultSlaRequest) MarshalJSON() ([]byte, error) {
	type noMethod GetConsultSlaRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetConsultSlaResponse struct {
	DueByDuration string `json:"dueByDuration,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "DueByDuration") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "DueByDuration") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *GetConsultSlaResponse) MarshalJSON() ([]byte, error) {
	type noMethod GetConsultSlaResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetCustomerSummaryRequest struct {
	CaseId string `json:"caseId,omitempty"`

	DisableEventHistory bool `json:"disableEventHistory,omitempty"`

	Email string `json:"email,omitempty"`

	HistoryCutoff string `json:"historyCutoff,omitempty"`

	LastNumberDays int64 `json:"lastNumberDays,omitempty,string"`

	PageSize int64 `json:"pageSize,omitempty"`

	PageToken string `json:"pageToken,omitempty"`

	// Possible values:
	//   "BUNDLE"
	//   "LIVE_EVENT"
	//   "MOVIE"
	//   "PRODUCT_TYPE_UNKNOWN"
	//   "RED"
	//   "SEASON"
	//   "SHOW"
	//   "UNPLUGGED"
	ProductTypes []string `json:"productTypes,omitempty"`

	SsoCookie string `json:"ssoCookie,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *GetCustomerSummaryRequest) MarshalJSON() ([]byte, error) {
	type noMethod GetCustomerSummaryRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetCustomerSummaryResponse struct {
	CancelHistory []*CancelHistorySummaryInfo `json:"cancelHistory,omitempty"`

	Entitlements []*Entitlement `json:"entitlements,omitempty"`

	HasOneTimeContentPurchase bool `json:"hasOneTimeContentPurchase,omitempty"`

	NextPageToken string `json:"nextPageToken,omitempty"`

	OffsetFromUtc float64 `json:"offsetFromUtc,omitempty"`

	OneTimeContentPurchaseCount int64 `json:"oneTimeContentPurchaseCount,omitempty"`

	RefundHistory []*RefundHistorySummaryInfo `json:"refundHistory,omitempty"`

	Timezone string `json:"timezone,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "CancelHistory") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CancelHistory") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *GetCustomerSummaryResponse) MarshalJSON() ([]byte, error) {
	type noMethod GetCustomerSummaryResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

func (s *GetCustomerSummaryResponse) UnmarshalJSON(data []byte) error {
	type noMethod GetCustomerSummaryResponse
	var s1 struct {
		OffsetFromUtc gensupport.JSONFloat64 `json:"offsetFromUtc"`
		*noMethod
	}
	s1.noMethod = (*noMethod)(s)
	if err := json.Unmarshal(data, &s1); err != nil {
		return err
	}
	s.OffsetFromUtc = float64(s1.OffsetFromUtc)
	return nil
}

type GetEscalationTargetsResponse struct {
	EscalationTargets []*EscalationTarget `json:"escalationTargets,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "EscalationTargets")
	// to unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "EscalationTargets") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *GetEscalationTargetsResponse) MarshalJSON() ([]byte, error) {
	type noMethod GetEscalationTargetsResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetHardwareOrderDetailRequest struct {
	CaseId string `json:"caseId,omitempty"`

	SsoTicket string `json:"ssoTicket,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *GetHardwareOrderDetailRequest) MarshalJSON() ([]byte, error) {
	type noMethod GetHardwareOrderDetailRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetHardwareSignalsRequest struct {
	CaseId string `json:"caseId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *GetHardwareSignalsRequest) MarshalJSON() ([]byte, error) {
	type noMethod GetHardwareSignalsRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetHardwareSignalsResponse struct {
	HasStandardExchange bool `json:"hasStandardExchange,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "HasStandardExchange")
	// to unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "HasStandardExchange") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *GetHardwareSignalsResponse) MarshalJSON() ([]byte, error) {
	type noMethod GetHardwareSignalsResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetLostStolenEligibilityRequest struct {
	CaseId string `json:"caseId,omitempty"`

	SsoTicket string `json:"ssoTicket,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *GetLostStolenEligibilityRequest) MarshalJSON() ([]byte, error) {
	type noMethod GetLostStolenEligibilityRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetLostStolenRefundEligibilityRequest struct {
	CaseId string `json:"caseId,omitempty"`

	SsoTicket string `json:"ssoTicket,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *GetLostStolenRefundEligibilityRequest) MarshalJSON() ([]byte, error) {
	type noMethod GetLostStolenRefundEligibilityRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetMailingAddressRequest struct {
	CaseId string `json:"caseId,omitempty"`

	IsRequiredAction bool `json:"isRequiredAction,omitempty"`

	SsoTicket string `json:"ssoTicket,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *GetMailingAddressRequest) MarshalJSON() ([]byte, error) {
	type noMethod GetMailingAddressRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetMyAssignStreamSearchesResponse struct {
	Searches []*Search `json:"searches,omitempty"`

	Teams []*Team `json:"teams,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Searches") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Searches") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *GetMyAssignStreamSearchesResponse) MarshalJSON() ([]byte, error) {
	type noMethod GetMyAssignStreamSearchesResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetOneTimePurchasesRequest struct {
	CaseId string `json:"caseId,omitempty"`

	Email string `json:"email,omitempty"`

	PageSize int64 `json:"pageSize,omitempty"`

	PageToken string `json:"pageToken,omitempty"`

	SsoCookie string `json:"ssoCookie,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *GetOneTimePurchasesRequest) MarshalJSON() ([]byte, error) {
	type noMethod GetOneTimePurchasesRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetOneTimePurchasesResponse struct {
	NextPageToken string `json:"nextPageToken,omitempty"`

	Purchases []*Purchase `json:"purchases,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "NextPageToken") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "NextPageToken") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *GetOneTimePurchasesResponse) MarshalJSON() ([]byte, error) {
	type noMethod GetOneTimePurchasesResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetOrdersRequest struct {
	CaseId string `json:"caseId,omitempty"`

	CustomerEmail string `json:"customerEmail,omitempty"`

	FinskyPurchaseIds []string `json:"finskyPurchaseIds,omitempty"`

	Locale string `json:"locale,omitempty"`

	SsoCookie string `json:"ssoCookie,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *GetOrdersRequest) MarshalJSON() ([]byte, error) {
	type noMethod GetOrdersRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetOrdersResponse struct {
	Orders []*Order `json:"orders,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Orders") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Orders") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *GetOrdersResponse) MarshalJSON() ([]byte, error) {
	type noMethod GetOrdersResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetPaymentMethodHijackReviewsStatusRequest struct {
	CaseId string `json:"caseId,omitempty"`

	ReviewKeys []*ReviewKey `json:"reviewKeys,omitempty"`

	SsoCookie string `json:"ssoCookie,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *GetPaymentMethodHijackReviewsStatusRequest) MarshalJSON() ([]byte, error) {
	type noMethod GetPaymentMethodHijackReviewsStatusRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetPaymentMethodHijackReviewsStatusResponse struct {
	AllTransactions []*TransactionsSummary `json:"allTransactions,omitempty"`

	AlreadyRefundedTransactions []*TransactionsSummary `json:"alreadyRefundedTransactions,omitempty"`

	ChargedBackTransactions []*TransactionsSummary `json:"chargedBackTransactions,omitempty"`

	NewlyRefundedTransactions []*TransactionsSummary `json:"newlyRefundedTransactions,omitempty"`

	NotFoundTransactions []*PaymentMethodHijackTransaction `json:"notFoundTransactions,omitempty"`

	NotRefundedTransactions []*PaymentMethodHijackTransaction `json:"notRefundedTransactions,omitempty"`

	ResolvedTransactions []*TransactionsSummary `json:"resolvedTransactions,omitempty"`

	ReviewAgentLdaps []string `json:"reviewAgentLdaps,omitempty"`

	ReviewKeys []*ReviewKey `json:"reviewKeys,omitempty"`

	// Possible values:
	//   "ASSIGNED"
	//   "CLOSED"
	//   "REVIEW_STATE_UNSPECIFIED"
	//   "UNASSIGNED"
	//   "UNKNOWN_REVIEW_STATE"
	State string `json:"state,omitempty"`

	UnderReviewTransactions []*TransactionsSummary `json:"underReviewTransactions,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "AllTransactions") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AllTransactions") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *GetPaymentMethodHijackReviewsStatusResponse) MarshalJSON() ([]byte, error) {
	type noMethod GetPaymentMethodHijackReviewsStatusResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetPaymentsInfoRequest struct {
	AgentSso string `json:"agentSso,omitempty"`

	CaseId string `json:"caseId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AgentSso") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AgentSso") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *GetPaymentsInfoRequest) MarshalJSON() ([]byte, error) {
	type noMethod GetPaymentsInfoRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetPaymentsInfoResponse struct {
	PaymentsInfo *PaymentsInfo `json:"paymentsInfo,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "PaymentsInfo") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "PaymentsInfo") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *GetPaymentsInfoResponse) MarshalJSON() ([]byte, error) {
	type noMethod GetPaymentsInfoResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetPhoneSettingResponse struct {
	PhoneSetting *PhoneSetting `json:"phoneSetting,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "PhoneSetting") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "PhoneSetting") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *GetPhoneSettingResponse) MarshalJSON() ([]byte, error) {
	type noMethod GetPhoneSettingResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetRefundStatusRequest struct {
	CaseId string `json:"caseId,omitempty"`

	SsoCookie string `json:"ssoCookie,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *GetRefundStatusRequest) MarshalJSON() ([]byte, error) {
	type noMethod GetRefundStatusRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetRefundStatusResponse struct {
	ApprovedOrderInfos []*OrderRefundStatusInfo `json:"approvedOrderInfos,omitempty"`

	ApprovedOrders []*Order `json:"approvedOrders,omitempty"`

	EscalateOrderInfos []*OrderRefundStatusInfo `json:"escalateOrderInfos,omitempty"`

	EscalateOrders []*Order `json:"escalateOrders,omitempty"`

	FailedOrderInfos []*OrderRefundStatusInfo `json:"failedOrderInfos,omitempty"`

	FailedOrders []*Order `json:"failedOrders,omitempty"`

	InProgress bool `json:"inProgress,omitempty"`

	InProgressOrderInfos []*OrderRefundStatusInfo `json:"inProgressOrderInfos,omitempty"`

	InProgressOrders []*Order `json:"inProgressOrders,omitempty"`

	OptionalEscalateOrderInfos []*OrderRefundStatusInfo `json:"optionalEscalateOrderInfos,omitempty"`

	OptionalEscalateOrders []*Order `json:"optionalEscalateOrders,omitempty"`

	ProcessLaterOrderInfos []*OrderRefundStatusInfo `json:"processLaterOrderInfos,omitempty"`

	ProcessLaterOrders []*Order `json:"processLaterOrders,omitempty"`

	// Possible values:
	//   "ACCIDENTAL_PURCHASE"
	//   "DEFECTIVE"
	//   "DID_NOT_RECEIVE"
	//   "FRAUD"
	//   "FRIENDLY_FRAUD"
	//   "REFUND_REASON_UNSPECIFIED"
	//   "REMORSE"
	RefundReason string `json:"refundReason,omitempty"`

	RejectedOrderInfos []*OrderRefundStatusInfo `json:"rejectedOrderInfos,omitempty"`

	RejectedOrders []*Order `json:"rejectedOrders,omitempty"`

	SidewinderRejectedOrderInfos []*OrderRefundStatusInfo `json:"sidewinderRejectedOrderInfos,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "ApprovedOrderInfos")
	// to unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ApprovedOrderInfos") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *GetRefundStatusResponse) MarshalJSON() ([]byte, error) {
	type noMethod GetRefundStatusResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetReplacementDetailRequest struct {
	CaseId string `json:"caseId,omitempty"`

	SsoTicket string `json:"ssoTicket,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *GetReplacementDetailRequest) MarshalJSON() ([]byte, error) {
	type noMethod GetReplacementDetailRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetRmaOrderDetailRequest struct {
	CaseId string `json:"caseId,omitempty"`

	SsoTicket string `json:"ssoTicket,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *GetRmaOrderDetailRequest) MarshalJSON() ([]byte, error) {
	type noMethod GetRmaOrderDetailRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetRoutingTargetsResponse struct {
	Products []*Product2 `json:"products,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Products") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Products") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *GetRoutingTargetsResponse) MarshalJSON() ([]byte, error) {
	type noMethod GetRoutingTargetsResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetShippingAddressRequest struct {
	CaseId string `json:"caseId,omitempty"`

	IsRequiredAction bool `json:"isRequiredAction,omitempty"`

	SsoTicket string `json:"ssoTicket,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *GetShippingAddressRequest) MarshalJSON() ([]byte, error) {
	type noMethod GetShippingAddressRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetShippingCustomerNameRequest struct {
	CaseId string `json:"caseId,omitempty"`

	SsoTicket string `json:"ssoTicket,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *GetShippingCustomerNameRequest) MarshalJSON() ([]byte, error) {
	type noMethod GetShippingCustomerNameRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetShippingCustomerPhoneNumberRequest struct {
	CaseId string `json:"caseId,omitempty"`

	SsoTicket string `json:"ssoTicket,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *GetShippingCustomerPhoneNumberRequest) MarshalJSON() ([]byte, error) {
	type noMethod GetShippingCustomerPhoneNumberRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetSubscriptionsRequest struct {
	CaseId string `json:"caseId,omitempty"`

	CustomerEmail string `json:"customerEmail,omitempty"`

	Locale string `json:"locale,omitempty"`

	SsoCookie string `json:"ssoCookie,omitempty"`

	SubscriptionIds []string `json:"subscriptionIds,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *GetSubscriptionsRequest) MarshalJSON() ([]byte, error) {
	type noMethod GetSubscriptionsRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GetSubscriptionsResponse struct {
	Subscriptions []*Subscription `json:"subscriptions,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Subscriptions") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Subscriptions") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *GetSubscriptionsResponse) MarshalJSON() ([]byte, error) {
	type noMethod GetSubscriptionsResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type GiftCard struct {
	ActivationNumber string `json:"activationNumber,omitempty"`

	Amount *Money `json:"amount,omitempty"`

	RedemptionDate *Date `json:"redemptionDate,omitempty"`

	RedemptionToken *RedemptionToken `json:"redemptionToken,omitempty"`

	// Possible values:
	//   "ACTIVATED"
	//   "CANCELED"
	//   "CREATED"
	//   "EXPIRED"
	//   "GIFT_CARD_STATUS_UNSPECIFIED"
	//   "REDEEMED"
	Status string `json:"status,omitempty"`

	// ForceSendFields is a list of field names (e.g. "ActivationNumber") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ActivationNumber") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *GiftCard) MarshalJSON() ([]byte, error) {
	type noMethod GiftCard
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type HardwareDiscount struct {
	Description string `json:"description,omitempty"`

	TotalAmount *Money `json:"totalAmount,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Description") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Description") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *HardwareDiscount) MarshalJSON() ([]byte, error) {
	type noMethod HardwareDiscount
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type HardwareId struct {
	Esn string `json:"esn,omitempty"`

	Imei string `json:"imei,omitempty"`

	MacAddress string `json:"macAddress,omitempty"`

	Meid string `json:"meid,omitempty"`

	SerialNumber string `json:"serialNumber,omitempty"`

	Unknown string `json:"unknown,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Esn") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Esn") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *HardwareId) MarshalJSON() ([]byte, error) {
	type noMethod HardwareId
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type HardwareOrderDetail struct {
	HasRefund bool `json:"hasRefund,omitempty"`

	OrderId string `json:"orderId,omitempty"`

	OrderTime string `json:"orderTime,omitempty"`

	Shipments []*HardwareShipment `json:"shipments,omitempty"`

	TaxAmount *Money `json:"taxAmount,omitempty"`

	TotalAmount *Money `json:"totalAmount,omitempty"`

	TotalAmountExcludingTax *Money `json:"totalAmountExcludingTax,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "HasRefund") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "HasRefund") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *HardwareOrderDetail) MarshalJSON() ([]byte, error) {
	type noMethod HardwareOrderDetail
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type HardwareOrderLineItem struct {
	Description string `json:"description,omitempty"`

	Discounts []*HardwareDiscount `json:"discounts,omitempty"`

	ExtendedWarrantyInfo *ExtendedWarrantyInfo `json:"extendedWarrantyInfo,omitempty"`

	FinskyLineNumber int64 `json:"finskyLineNumber,omitempty"`

	HardwareId *HardwareId `json:"hardwareId,omitempty"`

	HasRefund bool `json:"hasRefund,omitempty"`

	HashedFullHardwareId *HardwareId `json:"hashedFullHardwareId,omitempty"`

	LineItemId string `json:"lineItemId,omitempty"`

	ListPrice *Money `json:"listPrice,omitempty"`

	Price *Money `json:"price,omitempty"`

	ProductSku string `json:"productSku,omitempty"`

	RmaInfo *RmaInfo `json:"rmaInfo,omitempty"`

	TotalWithDiscountsWithoutTax *Money `json:"totalWithDiscountsWithoutTax,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Description") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Description") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *HardwareOrderLineItem) MarshalJSON() ([]byte, error) {
	type noMethod HardwareOrderLineItem
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type HardwareOrderLineItemRefund struct {
	Description string `json:"description,omitempty"`

	HardwareId *HardwareId `json:"hardwareId,omitempty"`

	LineItemId string `json:"lineItemId,omitempty"`

	ShipmentId string `json:"shipmentId,omitempty"`

	ShippingInfo *ShippingInfo `json:"shippingInfo,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Description") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Description") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *HardwareOrderLineItemRefund) MarshalJSON() ([]byte, error) {
	type noMethod HardwareOrderLineItemRefund
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type HardwareOrderListItem struct {
	AuthHold bool `json:"authHold,omitempty"`

	OrderId string `json:"orderId,omitempty"`

	OrderTime string `json:"orderTime,omitempty"`

	Replacement bool `json:"replacement,omitempty"`

	RmaNumber string `json:"rmaNumber,omitempty"`

	Summary string `json:"summary,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AuthHold") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AuthHold") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *HardwareOrderListItem) MarshalJSON() ([]byte, error) {
	type noMethod HardwareOrderListItem
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type HardwareOrderRefund struct {
}

type HardwareOrderWorkflow struct {
	HardwareShipmentInvestigation *HardwareShipmentInvestigation `json:"hardwareShipmentInvestigation,omitempty"`

	// Possible values:
	//   "DEFAULT"
	//   "IN_SHIPPING_SPECIALIST_CONSULT_FOR_LOST_STOLEN"
	//   "SHIPPING_SPECIALIST_CONSULT_FOR_LOST_STOLEN_COMPLETE"
	//   "STATE_UNSPECIFIED"
	State string `json:"state,omitempty"`

	// ForceSendFields is a list of field names (e.g.
	// "HardwareShipmentInvestigation") to unconditionally include in API
	// requests. By default, fields with empty values are omitted from API
	// requests. However, any non-pointer, non-interface field appearing in
	// ForceSendFields will be sent to the server regardless of whether the
	// field is empty or not. This may be used to include empty fields in
	// Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g.
	// "HardwareShipmentInvestigation") to include in API requests with the
	// JSON null value. By default, fields with empty values are omitted
	// from API requests. However, any field with an empty value appearing
	// in NullFields will be sent to the server as null. It is an error if a
	// field in this list has a non-empty value. This may be used to include
	// null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *HardwareOrderWorkflow) MarshalJSON() ([]byte, error) {
	type noMethod HardwareOrderWorkflow
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type HardwareRefund struct {
	LineItemRefund *HardwareOrderLineItemRefund `json:"lineItemRefund,omitempty"`

	OrderRefund *HardwareOrderRefund `json:"orderRefund,omitempty"`

	PaymentDetail *PaymentDetail `json:"paymentDetail,omitempty"`

	// Possible values:
	//   "REFUND_ACTION_NOT_SET"
	//   "SEND_REFUND_STATUS"
	RefundActions []string `json:"refundActions,omitempty"`

	// Possible values:
	//   "DELIVERY_RETURNED"
	//   "EXTENDED_WARRANTY_CANCELATION"
	//   "IN_BOX_ACCESSORIES"
	//   "LOST_STOLEN"
	//   "OTHER"
	//   "PRICE_PROTECTION"
	//   "REFUND_REASON_NOT_SET"
	//   "RMA"
	//   "SHIPPING"
	//   "TAX_EXEMPT"
	//   "UNDELIVERABLE"
	RefundReason string `json:"refundReason,omitempty"`

	RefundRequestTime string `json:"refundRequestTime,omitempty"`

	RefundedTime string `json:"refundedTime,omitempty"`

	ShipmentRefund *HardwareShipmentRefund `json:"shipmentRefund,omitempty"`

	// Possible values:
	//   "REFUNDED"
	//   "REFUND_ERROR"
	//   "REFUND_PENDING"
	//   "REFUND_PENDING_RETURN"
	//   "REFUND_PENDING_STUCK"
	//   "STATUS_NOT_SET"
	Status string `json:"status,omitempty"`

	TotalAmount *Money `json:"totalAmount,omitempty"`

	// ForceSendFields is a list of field names (e.g. "LineItemRefund") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "LineItemRefund") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *HardwareRefund) MarshalJSON() ([]byte, error) {
	type noMethod HardwareRefund
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type HardwareShipment struct {
	AddressLastUpdated string `json:"addressLastUpdated,omitempty"`

	AddressUpdateable bool `json:"addressUpdateable,omitempty"`

	AuthHold bool `json:"authHold,omitempty"`

	CancelInfo *CancelInfo `json:"cancelInfo,omitempty"`

	// Possible values:
	//   "ABANDONED"
	//   "ADDED"
	//   "APPROVED"
	//   "CANCELLED"
	//   "CHARGED"
	//   "CHARGED_BACK"
	//   "CONFIRMED"
	//   "DENIED"
	//   "DISBURSED"
	//   "EXPIRED"
	//   "FAILED"
	//   "FINANCIAL_STATUS_NOT_SET"
	//   "INDETERMINATE"
	//   "PENDING"
	//   "REFUNDED"
	//   "UNAVAILABLE"
	//   "WAITING_FOR_CLIENT_RETRY"
	FinancialStatus string `json:"financialStatus,omitempty"`

	LineItems []*HardwareOrderLineItem `json:"lineItems,omitempty"`

	// Possible values:
	//   "CANCEL_EXTENDED_WARRANTY"
	//   "CANCEL_ORDER"
	//   "ESCALATE_CANCELED"
	//   "HARDWARE_ORDER_ACTION_NOT_SET"
	//   "INITIATE_RMA"
	//   "INVESTIGATE_AUTH_HOLD"
	//   "INVESTIGATE_CANCELED"
	//   "INVESTIGATE_GOOGLE_FINANCING"
	//   "INVESTIGATE_SHIPPING"
	//   "REJECT_OR_RETURN"
	//   "REVIEW_REFUND"
	//   "REVIEW_RMA"
	//   "REVIEW_RMA_REFUND"
	//   "SEND_STATUS"
	OrderActions []string `json:"orderActions,omitempty"`

	PaymentDetail *PaymentDetail `json:"paymentDetail,omitempty"`

	ShipmentId string `json:"shipmentId,omitempty"`

	ShipmentNumber int64 `json:"shipmentNumber,omitempty"`

	// Possible values:
	//   "CANCEL"
	//   "FC_TRANSFER"
	//   "HARDWARE_SHIPMENT_STATE_NOT_SET"
	//   "ON_HOLD_CHARGEABLE"
	//   "ON_HOLD_QUANTITY"
	//   "ON_HOLD_WAIT"
	//   "READY_TO_SHIP"
	//   "SENT"
	//   "SHIPPED"
	//   "SPLIT"
	ShipmentState string `json:"shipmentState,omitempty"`

	ShippingInfo *ShippingInfo `json:"shippingInfo,omitempty"`

	// Possible values:
	//   "CANCELED"
	//   "HARDWARE_ORDER_STATE_NOT_SET"
	//   "PROCESSING"
	//   "SHIPPED"
	State string `json:"state,omitempty"`

	// Possible values:
	//   "STUCK_INVENTORY"
	//   "STUCK_ORDER_ALERT_NOT_SET"
	//   "STUCK_PAYMENT"
	//   "STUCK_PROCESSING"
	//   "STUCK_TRANSIT"
	StuckOrderAlert string `json:"stuckOrderAlert,omitempty"`

	TotalAmount *Money `json:"totalAmount,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AddressLastUpdated")
	// to unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AddressLastUpdated") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *HardwareShipment) MarshalJSON() ([]byte, error) {
	type noMethod HardwareShipment
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type HardwareShipmentInvestigation struct {
	IsOrderFromStore bool `json:"isOrderFromStore,omitempty"`

	Issue string `json:"issue,omitempty"`

	OrderId string `json:"orderId,omitempty"`

	ShipmentId string `json:"shipmentId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "IsOrderFromStore") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "IsOrderFromStore") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *HardwareShipmentInvestigation) MarshalJSON() ([]byte, error) {
	type noMethod HardwareShipmentInvestigation
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type HardwareShipmentRefund struct {
	ShipmentId string `json:"shipmentId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "ShipmentId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ShipmentId") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *HardwareShipmentRefund) MarshalJSON() ([]byte, error) {
	type noMethod HardwareShipmentRefund
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Headers struct {
	BccAddresses []string `json:"bccAddresses,omitempty"`

	CcAddresses []string `json:"ccAddresses,omitempty"`

	FromAddress string `json:"fromAddress,omitempty"`

	InReplyTo string `json:"inReplyTo,omitempty"`

	Subject string `json:"subject,omitempty"`

	ToAddresses []string `json:"toAddresses,omitempty"`

	// ForceSendFields is a list of field names (e.g. "BccAddresses") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "BccAddresses") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Headers) MarshalJSON() ([]byte, error) {
	type noMethod Headers
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type HelpCenterContent struct {
	HcId string `json:"hcId,omitempty"`

	HelpCenter string `json:"helpCenter,omitempty"`

	IsPublic bool `json:"isPublic,omitempty"`

	Locale string `json:"locale,omitempty"`

	// Possible values:
	//   "ANSWER"
	//   "TOPIC"
	//   "TROUBLESHOOTER"
	//   "UNKNOWN_CONTENT_TYPE"
	//   "UNSUPPORTED_TYPE"
	Type string `json:"type,omitempty"`

	Url string `json:"url,omitempty"`

	// ForceSendFields is a list of field names (e.g. "HcId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "HcId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *HelpCenterContent) MarshalJSON() ([]byte, error) {
	type noMethod HelpCenterContent
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type HelpCenterContent1 struct {
	ContentId string `json:"contentId,omitempty"`

	DisplayName string `json:"displayName,omitempty"`

	HelpCenter string `json:"helpCenter,omitempty"`

	IsPublic bool `json:"isPublic,omitempty"`

	Locale string `json:"locale,omitempty"`

	// Possible values:
	//   "ANSWER"
	//   "TOPIC"
	//   "TROUBLESHOOTER"
	//   "UNKNOWN_CONTENT_TYPE"
	//   "UNSUPPORTED_TYPE"
	Type string `json:"type,omitempty"`

	Url string `json:"url,omitempty"`

	// ForceSendFields is a list of field names (e.g. "ContentId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ContentId") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *HelpCenterContent1) MarshalJSON() ([]byte, error) {
	type noMethod HelpCenterContent1
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type HelpCenterContent2 struct {
	HcId string `json:"hcId,omitempty"`

	HelpCenter string `json:"helpCenter,omitempty"`

	IsPublic bool `json:"isPublic,omitempty"`

	Locale string `json:"locale,omitempty"`

	// Possible values:
	//   "ANSWER"
	//   "TOPIC"
	//   "TROUBLESHOOTER"
	//   "UNKNOWN_CONTENT_TYPE"
	//   "UNSUPPORTED_TYPE"
	Type string `json:"type,omitempty"`

	Url string `json:"url,omitempty"`

	// ForceSendFields is a list of field names (e.g. "HcId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "HcId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *HelpCenterContent2) MarshalJSON() ([]byte, error) {
	type noMethod HelpCenterContent2
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type HelpCenterContent3 struct {
	HcId string `json:"hcId,omitempty"`

	HelpCenter string `json:"helpCenter,omitempty"`

	IsPublic bool `json:"isPublic,omitempty"`

	Locale string `json:"locale,omitempty"`

	// Possible values:
	//   "INTERNET"
	//   "OPERATE"
	//   "REQUIREMENT_NOT_SET"
	RequirementTypes []string `json:"requirementTypes,omitempty"`

	RequirementsSnippetId string `json:"requirementsSnippetId,omitempty"`

	Title string `json:"title,omitempty"`

	// Possible values:
	//   "ANSWER"
	//   "TOPIC"
	//   "TROUBLESHOOTER"
	//   "UNKNOWN_CONTENT_TYPE"
	//   "UNSUPPORTED_TYPE"
	Type string `json:"type,omitempty"`

	Url string `json:"url,omitempty"`

	// ForceSendFields is a list of field names (e.g. "HcId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "HcId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *HelpCenterContent3) MarshalJSON() ([]byte, error) {
	type noMethod HelpCenterContent3
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type HelpCenterDeepLinkSource struct {
}

type Identity struct {
	DisplayName string `json:"displayName,omitempty"`

	EmailAddress string `json:"emailAddress,omitempty"`

	ProfileImageUrl string `json:"profileImageUrl,omitempty"`

	TeamId string `json:"teamId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "DisplayName") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "DisplayName") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Identity) MarshalJSON() ([]byte, error) {
	type noMethod Identity
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type InitiatePaymentMethodHijackReviewsRequest struct {
	BankAccount *BankAccount `json:"bankAccount,omitempty"`

	CaseId string `json:"caseId,omitempty"`

	CreditCard *CreditCard `json:"creditCard,omitempty"`

	Dcb *DirectCarrierBilling `json:"dcb,omitempty"`

	InstrumentIssuerToken string `json:"instrumentIssuerToken,omitempty"`

	Paypal *Paypal `json:"paypal,omitempty"`

	SsoCookie string `json:"ssoCookie,omitempty"`

	Transactions []*PaymentMethodHijackTransaction `json:"transactions,omitempty"`

	// ForceSendFields is a list of field names (e.g. "BankAccount") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "BankAccount") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *InitiatePaymentMethodHijackReviewsRequest) MarshalJSON() ([]byte, error) {
	type noMethod InitiatePaymentMethodHijackReviewsRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type InitiatePaymentMethodHijackReviewsResponse struct {
	// Possible values:
	//   "INITIATE_PAYMENT_METHOD_HIJACK_POSSIBLE_ACCOUNT_TAKEOVER"
	//   "INITIATE_PAYMENT_METHOD_HIJACK_REVIEWS_CREATED"
	//   "INITIATE_PAYMENT_METHOD_HIJACK_REVIEWS_NOT_FOUND"
	//   "INITIATE_PAYMENT_METHOD_HIJACK_REVIEWS_NOT_UNIQUE"
	//   "INITIATE_PAYMENT_METHOD_HIJACK_REVIEWS_RESOLVED"
	//   "INITIATE_PAYMENT_METHOD_HIJACK_REVIEWS_RESULT_UNSPECIFIED"
	Result string `json:"result,omitempty"`

	ReviewKeys []*ReviewKey `json:"reviewKeys,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Result") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Result") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *InitiatePaymentMethodHijackReviewsResponse) MarshalJSON() ([]byte, error) {
	type noMethod InitiatePaymentMethodHijackReviewsResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Interaction struct {
	CaseData *CaseData `json:"caseData,omitempty"`

	EndTime string `json:"endTime,omitempty"`

	// Possible values:
	//   "ADOPTION"
	//   "CHAT"
	//   "EMAIL"
	//   "GOAL"
	//   "HANGOUT"
	//   "INCENTIVE"
	//   "MARKETING_EMAIL"
	//   "MEETING"
	//   "NOTE"
	//   "PHONE"
	//   "STUB"
	//   "TRAX"
	//   "UNKNOWN_EVENT_TYPE"
	//   "WEB"
	EventTypes []string `json:"eventTypes,omitempty"`

	StartTime string `json:"startTime,omitempty"`

	Summary string `json:"summary,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseData") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseData") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Interaction) MarshalJSON() ([]byte, error) {
	type noMethod Interaction
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type InteractionCount struct {
	Count int64 `json:"count,omitempty"`

	StartTime string `json:"startTime,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Count") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Count") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *InteractionCount) MarshalJSON() ([]byte, error) {
	type noMethod InteractionCount
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Issue struct {
	Accounts []*Account `json:"accounts,omitempty"`

	LocaleCode string `json:"localeCode,omitempty"`

	PreviewText string `json:"previewText,omitempty"`

	Product *Product `json:"product,omitempty"`

	SubProducts []*Product `json:"subProducts,omitempty"`

	Summary string `json:"summary,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Accounts") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Accounts") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Issue) MarshalJSON() ([]byte, error) {
	type noMethod Issue
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Issue1 struct {
	CategoryPath string `json:"categoryPath,omitempty"`

	IssueId string `json:"issueId,omitempty"`

	PartialCategoryPath string `json:"partialCategoryPath,omitempty"`

	Title string `json:"title,omitempty"`

	UnresolvedDifmId string `json:"unresolvedDifmId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CategoryPath") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CategoryPath") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Issue1) MarshalJSON() ([]byte, error) {
	type noMethod Issue1
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type IssueCategoryAction struct {
	IssueCategories []*CategoryPath1 `json:"issueCategories,omitempty"`

	// ForceSendFields is a list of field names (e.g. "IssueCategories") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "IssueCategories") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *IssueCategoryAction) MarshalJSON() ([]byte, error) {
	type noMethod IssueCategoryAction
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type IssueCategorySettings struct {
	AllowUncategorizedCases bool `json:"allowUncategorizedCases,omitempty"`

	CategoryRootName string `json:"categoryRootName,omitempty"`

	SecondaryProductRequirementCategoryId string `json:"secondaryProductRequirementCategoryId,omitempty"`

	SubProductTopCategories []*Category2 `json:"subProductTopCategories,omitempty"`

	TopCategory *Category2 `json:"topCategory,omitempty"`

	// ForceSendFields is a list of field names (e.g.
	// "AllowUncategorizedCases") to unconditionally include in API
	// requests. By default, fields with empty values are omitted from API
	// requests. However, any non-pointer, non-interface field appearing in
	// ForceSendFields will be sent to the server regardless of whether the
	// field is empty or not. This may be used to include empty fields in
	// Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AllowUncategorizedCases")
	// to include in API requests with the JSON null value. By default,
	// fields with empty values are omitted from API requests. However, any
	// field with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *IssueCategorySettings) MarshalJSON() ([]byte, error) {
	type noMethod IssueCategorySettings
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type IssueFailure struct {
	DifmId string `json:"difmId,omitempty"`

	HelpCenterContent *HelpCenterContent1 `json:"helpCenterContent,omitempty"`

	Reason string `json:"reason,omitempty"`

	ReasonDescription string `json:"reasonDescription,omitempty"`

	SupportLinks []*SupportLink `json:"supportLinks,omitempty"`

	TargetId string `json:"targetId,omitempty"`

	TargetName string `json:"targetName,omitempty"`

	// Possible values:
	//   "TARGET_TYPE_UNSPECIFIED"
	//   "URL"
	TargetType string `json:"targetType,omitempty"`

	// ForceSendFields is a list of field names (e.g. "DifmId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "DifmId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *IssueFailure) MarshalJSON() ([]byte, error) {
	type noMethod IssueFailure
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type LineItem struct {
	Description string `json:"description,omitempty"`

	HardwareId string `json:"hardwareId,omitempty"`

	HashedHardwareId string `json:"hashedHardwareId,omitempty"`

	ProductSku string `json:"productSku,omitempty"`

	// Possible values:
	//   "ADVANCED_EXCHANGE"
	//   "EXCHANGE"
	//   "EXCHANGE_WITHOUT_RETURN"
	//   "REPAIR"
	//   "RETURN"
	//   "UNKNOWN_ACTION"
	//   "WARRANTY_REFUND"
	RmaAction string `json:"rmaAction,omitempty"`

	RmaNumber string `json:"rmaNumber,omitempty"`

	UnmaskedHardwareId string `json:"unmaskedHardwareId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Description") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Description") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *LineItem) MarshalJSON() ([]byte, error) {
	type noMethod LineItem
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListAgentActivitiesResponse struct {
	AgentActivities []*AgentActivity `json:"agentActivities,omitempty"`

	NextPageToken string `json:"nextPageToken,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "AgentActivities") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AgentActivities") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *ListAgentActivitiesResponse) MarshalJSON() ([]byte, error) {
	type noMethod ListAgentActivitiesResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListAgentSettingsResponse struct {
	AgentSettings []*AgentSetting `json:"agentSettings,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "AgentSettings") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AgentSettings") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ListAgentSettingsResponse) MarshalJSON() ([]byte, error) {
	type noMethod ListAgentSettingsResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListBankAccountCountriesRequest struct {
	SsoCookie string `json:"ssoCookie,omitempty"`

	// ForceSendFields is a list of field names (e.g. "SsoCookie") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "SsoCookie") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ListBankAccountCountriesRequest) MarshalJSON() ([]byte, error) {
	type noMethod ListBankAccountCountriesRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListBankAccountCountriesResponse struct {
	BankAccountCountries []*BankAccountCountry `json:"bankAccountCountries,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g.
	// "BankAccountCountries") to unconditionally include in API requests.
	// By default, fields with empty values are omitted from API requests.
	// However, any non-pointer, non-interface field appearing in
	// ForceSendFields will be sent to the server regardless of whether the
	// field is empty or not. This may be used to include empty fields in
	// Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "BankAccountCountries") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *ListBankAccountCountriesResponse) MarshalJSON() ([]byte, error) {
	type noMethod ListBankAccountCountriesResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListBillingAddressesRequest struct {
	CustomerEmail string `json:"customerEmail,omitempty"`

	SsoCookie string `json:"ssoCookie,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CustomerEmail") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CustomerEmail") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ListBillingAddressesRequest) MarshalJSON() ([]byte, error) {
	type noMethod ListBillingAddressesRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListBillingAddressesResponse struct {
	BillingAddresses []*Address `json:"billingAddresses,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "BillingAddresses") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "BillingAddresses") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *ListBillingAddressesResponse) MarshalJSON() ([]byte, error) {
	type noMethod ListBillingAddressesResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListBuyersRemorseCountryCodesResponse struct {
	CountryCodes []string `json:"countryCodes,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "CountryCodes") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CountryCodes") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ListBuyersRemorseCountryCodesResponse) MarshalJSON() ([]byte, error) {
	type noMethod ListBuyersRemorseCountryCodesResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListCasesByAgentResponse struct {
	Cases []*Case `json:"cases,omitempty"`

	PageToken string `json:"pageToken,omitempty"`

	SearchCount int64 `json:"searchCount,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Cases") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Cases") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ListCasesByAgentResponse) MarshalJSON() ([]byte, error) {
	type noMethod ListCasesByAgentResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListChildrenCategoryInfosResponse struct {
	CategoryInfos []*CategoryInfo `json:"categoryInfos,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "CategoryInfos") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CategoryInfos") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ListChildrenCategoryInfosResponse) MarshalJSON() ([]byte, error) {
	type noMethod ListChildrenCategoryInfosResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListCommunicationsResponse struct {
	Communications []*Communication `json:"communications,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Communications") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Communications") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *ListCommunicationsResponse) MarshalJSON() ([]byte, error) {
	type noMethod ListCommunicationsResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListCreditCardTypesRequest struct {
	SsoCookie string `json:"ssoCookie,omitempty"`

	// ForceSendFields is a list of field names (e.g. "SsoCookie") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "SsoCookie") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ListCreditCardTypesRequest) MarshalJSON() ([]byte, error) {
	type noMethod ListCreditCardTypesRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListCreditCardTypesResponse struct {
	CreditCardTypes []*CreditCardType `json:"creditCardTypes,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "CreditCardTypes") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CreditCardTypes") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *ListCreditCardTypesResponse) MarshalJSON() ([]byte, error) {
	type noMethod ListCreditCardTypesResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListCustomerIssuesResponse struct {
	CustomerIssues []*CustomerIssue `json:"customerIssues,omitempty"`

	SupportLinks []*SupportLink `json:"supportLinks,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "CustomerIssues") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CustomerIssues") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *ListCustomerIssuesResponse) MarshalJSON() ([]byte, error) {
	type noMethod ListCustomerIssuesResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListDevicesRequest struct {
	CaseId string `json:"caseId,omitempty"`

	SsoCookie string `json:"ssoCookie,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ListDevicesRequest) MarshalJSON() ([]byte, error) {
	type noMethod ListDevicesRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListDevicesResponse struct {
	Devices []*Device `json:"devices,omitempty"`

	NextPageToken string `json:"nextPageToken,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Devices") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Devices") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ListDevicesResponse) MarshalJSON() ([]byte, error) {
	type noMethod ListDevicesResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListDevicesResponse1 struct {
	Devices []*Device2 `json:"devices,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Devices") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Devices") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ListDevicesResponse1) MarshalJSON() ([]byte, error) {
	type noMethod ListDevicesResponse1
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListHardwareOrdersRequest struct {
	CaseId string `json:"caseId,omitempty"`

	SsoTicket string `json:"ssoTicket,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ListHardwareOrdersRequest) MarshalJSON() ([]byte, error) {
	type noMethod ListHardwareOrdersRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListHardwareOrdersResponse struct {
	Items []*HardwareOrderListItem `json:"items,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Items") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Items") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ListHardwareOrdersResponse) MarshalJSON() ([]byte, error) {
	type noMethod ListHardwareOrdersResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListHardwareRefundsRequest struct {
	CaseId string `json:"caseId,omitempty"`

	SsoTicket string `json:"ssoTicket,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ListHardwareRefundsRequest) MarshalJSON() ([]byte, error) {
	type noMethod ListHardwareRefundsRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListHardwareRefundsResponse struct {
	Refunds []*HardwareRefund `json:"refunds,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Refunds") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Refunds") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ListHardwareRefundsResponse) MarshalJSON() ([]byte, error) {
	type noMethod ListHardwareRefundsResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListInteractionsResponse struct {
	Interactions []*Interaction `json:"interactions,omitempty"`

	NextPageToken string `json:"nextPageToken,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Interactions") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Interactions") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ListInteractionsResponse) MarshalJSON() ([]byte, error) {
	type noMethod ListInteractionsResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListIssuesResponse struct {
	Issues []*Issue1 `json:"issues,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Issues") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Issues") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ListIssuesResponse) MarshalJSON() ([]byte, error) {
	type noMethod ListIssuesResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListOpportunitiesResponse struct {
	EventId string `json:"eventId,omitempty"`

	// Possible values:
	//   "CASE_SIGNALS"
	//   "OTHER"
	//   "UNKNOWN_INELIGIBLE_REASON"
	IneligibleReasons []string `json:"ineligibleReasons,omitempty"`

	Opportunities []*Opportunity1 `json:"opportunities,omitempty"`

	Program *Program1 `json:"program,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "EventId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "EventId") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ListOpportunitiesResponse) MarshalJSON() ([]byte, error) {
	type noMethod ListOpportunitiesResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListOtherDevicesRequest struct {
	CaseId string `json:"caseId,omitempty"`

	PageSize int64 `json:"pageSize,omitempty"`

	PageToken string `json:"pageToken,omitempty"`

	SsoTicket string `json:"ssoTicket,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ListOtherDevicesRequest) MarshalJSON() ([]byte, error) {
	type noMethod ListOtherDevicesRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListOtherDevicesResponse struct {
	Devices []*Device1 `json:"devices,omitempty"`

	NextPageToken string `json:"nextPageToken,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Devices") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Devices") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ListOtherDevicesResponse) MarshalJSON() ([]byte, error) {
	type noMethod ListOtherDevicesResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListPaymentInstrumentTypeInfosResponse struct {
	PaymentInstrumentTypes []*PaymentInstrumentTypeInfo `json:"paymentInstrumentTypes,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g.
	// "PaymentInstrumentTypes") to unconditionally include in API requests.
	// By default, fields with empty values are omitted from API requests.
	// However, any non-pointer, non-interface field appearing in
	// ForceSendFields will be sent to the server regardless of whether the
	// field is empty or not. This may be used to include empty fields in
	// Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "PaymentInstrumentTypes")
	// to include in API requests with the JSON null value. By default,
	// fields with empty values are omitted from API requests. However, any
	// field with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *ListPaymentInstrumentTypeInfosResponse) MarshalJSON() ([]byte, error) {
	type noMethod ListPaymentInstrumentTypeInfosResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListProductsResponse struct {
	AllowedProductIds []string `json:"allowedProductIds,omitempty"`

	Products []*Product1 `json:"products,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "AllowedProductIds")
	// to unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AllowedProductIds") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *ListProductsResponse) MarshalJSON() ([]byte, error) {
	type noMethod ListProductsResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListPropertiesResponse struct {
	Properties []*Property `json:"properties,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Properties") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Properties") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ListPropertiesResponse) MarshalJSON() ([]byte, error) {
	type noMethod ListPropertiesResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListPurchasedAppsRequest struct {
	CaseId string `json:"caseId,omitempty"`

	Filter string `json:"filter,omitempty"`

	SsoCookie string `json:"ssoCookie,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ListPurchasedAppsRequest) MarshalJSON() ([]byte, error) {
	type noMethod ListPurchasedAppsRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListPurchasedAppsResponse struct {
	Apps []*PurchasedApp `json:"apps,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Apps") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Apps") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ListPurchasedAppsResponse) MarshalJSON() ([]byte, error) {
	type noMethod ListPurchasedAppsResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListPurchasedBooksRequest struct {
	CaseId string `json:"caseId,omitempty"`

	Filter string `json:"filter,omitempty"`

	SsoCookie string `json:"ssoCookie,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ListPurchasedBooksRequest) MarshalJSON() ([]byte, error) {
	type noMethod ListPurchasedBooksRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListPurchasedBooksResponse struct {
	Books []*PurchasedBook `json:"books,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Books") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Books") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ListPurchasedBooksResponse) MarshalJSON() ([]byte, error) {
	type noMethod ListPurchasedBooksResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListPurchasedVideosRequest struct {
	CaseId string `json:"caseId,omitempty"`

	Filter string `json:"filter,omitempty"`

	SsoCookie string `json:"ssoCookie,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ListPurchasedVideosRequest) MarshalJSON() ([]byte, error) {
	type noMethod ListPurchasedVideosRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListPurchasedVideosResponse struct {
	Videos []*PurchasedVideo `json:"videos,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Videos") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Videos") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ListPurchasedVideosResponse) MarshalJSON() ([]byte, error) {
	type noMethod ListPurchasedVideosResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListRelatedCommunicationsResponse struct {
	RelatedCommunications []*RelatedCommunications `json:"relatedCommunications,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g.
	// "RelatedCommunications") to unconditionally include in API requests.
	// By default, fields with empty values are omitted from API requests.
	// However, any non-pointer, non-interface field appearing in
	// ForceSendFields will be sent to the server regardless of whether the
	// field is empty or not. This may be used to include empty fields in
	// Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "RelatedCommunications") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *ListRelatedCommunicationsResponse) MarshalJSON() ([]byte, error) {
	type noMethod ListRelatedCommunicationsResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListResolutionsResponse struct {
	NextPageToken string `json:"nextPageToken,omitempty"`

	Resolutions []*Resolution `json:"resolutions,omitempty"`

	ResultsToken string `json:"resultsToken,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "NextPageToken") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "NextPageToken") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ListResolutionsResponse) MarshalJSON() ([]byte, error) {
	type noMethod ListResolutionsResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListRmasResponse struct {
	Rmas []*Rma `json:"rmas,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Rmas") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Rmas") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ListRmasResponse) MarshalJSON() ([]byte, error) {
	type noMethod ListRmasResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListSettingsResponse struct {
	AgentSetting *AgentSetting `json:"agentSetting,omitempty"`

	SearchSetting *SearchSetting `json:"searchSetting,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "AgentSetting") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AgentSetting") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ListSettingsResponse) MarshalJSON() ([]byte, error) {
	type noMethod ListSettingsResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListSettingsResponse1 struct {
	AllowedProductIds []string `json:"allowedProductIds,omitempty"`

	Settings []*Settings `json:"settings,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "AllowedProductIds")
	// to unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AllowedProductIds") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *ListSettingsResponse1) MarshalJSON() ([]byte, error) {
	type noMethod ListSettingsResponse1
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListShippingAddressesRequest struct {
	CustomerEmail string `json:"customerEmail,omitempty"`

	SsoCookie string `json:"ssoCookie,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CustomerEmail") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CustomerEmail") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ListShippingAddressesRequest) MarshalJSON() ([]byte, error) {
	type noMethod ListShippingAddressesRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListShippingAddressesResponse struct {
	ShippingAddresses []*Address `json:"shippingAddresses,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "ShippingAddresses")
	// to unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ShippingAddresses") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *ListShippingAddressesResponse) MarshalJSON() ([]byte, error) {
	type noMethod ListShippingAddressesResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListSubscriptionsRequest struct {
	CaseId string `json:"caseId,omitempty"`

	CustomerEmail string `json:"customerEmail,omitempty"`

	Locale string `json:"locale,omitempty"`

	SsoCookie string `json:"ssoCookie,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ListSubscriptionsRequest) MarshalJSON() ([]byte, error) {
	type noMethod ListSubscriptionsRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListSubscriptionsResponse struct {
	ActiveSubscriptions []*Subscription `json:"activeSubscriptions,omitempty"`

	InactiveSubscriptions []*Subscription `json:"inactiveSubscriptions,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "ActiveSubscriptions")
	// to unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ActiveSubscriptions") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *ListSubscriptionsResponse) MarshalJSON() ([]byte, error) {
	type noMethod ListSubscriptionsResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListTopLevelCategoryInfosResponse struct {
	CategoryInfos []*CategoryInfo `json:"categoryInfos,omitempty"`

	ConsultCategoryInfo *CategoryInfo `json:"consultCategoryInfo,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "CategoryInfos") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CategoryInfos") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ListTopLevelCategoryInfosResponse) MarshalJSON() ([]byte, error) {
	type noMethod ListTopLevelCategoryInfosResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListTransactionsRequest struct {
	CaseId string `json:"caseId,omitempty"`

	Email string `json:"email,omitempty"`

	EndAmount *Money `json:"endAmount,omitempty"`

	EndDate string `json:"endDate,omitempty"`

	InstrumentLastFourCharacters string `json:"instrumentLastFourCharacters,omitempty"`

	PageSize int64 `json:"pageSize,omitempty"`

	PageToken string `json:"pageToken,omitempty"`

	Q string `json:"q,omitempty"`

	QueryId string `json:"queryId,omitempty"`

	QueryIds []string `json:"queryIds,omitempty"`

	SsoCookie string `json:"ssoCookie,omitempty"`

	StartAmount *Money `json:"startAmount,omitempty"`

	StartDate string `json:"startDate,omitempty"`

	// Possible values:
	//   "CANCELLED"
	//   "CHARGED"
	//   "CHARGED_BACK"
	//   "DECLINED"
	//   "OTHER_STATUS"
	//   "PENDING"
	//   "REFUNDED"
	//   "REJECTED"
	//   "UNKNOWN_WALLET_TRANSACTION_STATUS"
	Statuses []string `json:"statuses,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ListTransactionsRequest) MarshalJSON() ([]byte, error) {
	type noMethod ListTransactionsRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListTransactionsRequest1 struct {
	CaseId string `json:"caseId,omitempty"`

	Email string `json:"email,omitempty"`

	EntitlementToken string `json:"entitlementToken,omitempty"`

	EntitlementTokens []string `json:"entitlementTokens,omitempty"`

	IncludeUpcomingCharges bool `json:"includeUpcomingCharges,omitempty"`

	PageSize int64 `json:"pageSize,omitempty"`

	PageToken string `json:"pageToken,omitempty"`

	// Possible values:
	//   "BUNDLE"
	//   "LIVE_EVENT"
	//   "MOVIE"
	//   "PRODUCT_TYPE_UNKNOWN"
	//   "RED"
	//   "SEASON"
	//   "SHOW"
	//   "UNPLUGGED"
	ProductTypes []string `json:"productTypes,omitempty"`

	SsoCookie string `json:"ssoCookie,omitempty"`

	Timezone string `json:"timezone,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ListTransactionsRequest1) MarshalJSON() ([]byte, error) {
	type noMethod ListTransactionsRequest1
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListTransactionsResponse struct {
	NextPageToken string `json:"nextPageToken,omitempty"`

	Results []*WalletTransaction `json:"results,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "NextPageToken") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "NextPageToken") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ListTransactionsResponse) MarshalJSON() ([]byte, error) {
	type noMethod ListTransactionsResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ListTransactionsResponse1 struct {
	NextPageToken string `json:"nextPageToken,omitempty"`

	Transactions []*Transaction `json:"transactions,omitempty"`

	UpcomingCharge []*Charge `json:"upcomingCharge,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "NextPageToken") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "NextPageToken") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ListTransactionsResponse1) MarshalJSON() ([]byte, error) {
	type noMethod ListTransactionsResponse1
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type LocaleTransfer struct {
	SourceLocale string `json:"sourceLocale,omitempty"`

	TargetLocale string `json:"targetLocale,omitempty"`

	// ForceSendFields is a list of field names (e.g. "SourceLocale") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "SourceLocale") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *LocaleTransfer) MarshalJSON() ([]byte, error) {
	type noMethod LocaleTransfer
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type LocalizedTimestamp struct {
	Timestamp string `json:"timestamp,omitempty"`

	Timezone string `json:"timezone,omitempty"`

	UtcOffset int64 `json:"utcOffset,omitempty,string"`

	// ForceSendFields is a list of field names (e.g. "Timestamp") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Timestamp") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *LocalizedTimestamp) MarshalJSON() ([]byte, error) {
	type noMethod LocalizedTimestamp
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type LogDataAccessRequest struct {
	CaseId string `json:"caseId,omitempty"`

	// Possible values:
	//   "CLICK_TO_REVEAL_PHONE_NUMBER"
	//   "DATA_ACCESS_EVENT_UNSPECIFIED"
	Event string `json:"event,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *LogDataAccessRequest) MarshalJSON() ([]byte, error) {
	type noMethod LogDataAccessRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type LogResolutionRequest struct {
	CaseId string `json:"caseId,omitempty"`

	ResolutionEvent *ResolutionEvent `json:"resolutionEvent,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *LogResolutionRequest) MarshalJSON() ([]byte, error) {
	type noMethod LogResolutionRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type LogTroubleshooterActivityRequest struct {
	Activity *ResolutionActivity `json:"activity,omitempty"`

	CaseId string `json:"caseId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Activity") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Activity") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *LogTroubleshooterActivityRequest) MarshalJSON() ([]byte, error) {
	type noMethod LogTroubleshooterActivityRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type LookupGiftCardRequest struct {
	CaseId string `json:"caseId,omitempty"`

	LookupCriteria *CardLookupCriteria `json:"lookupCriteria,omitempty"`

	SsoCookie string `json:"ssoCookie,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *LookupGiftCardRequest) MarshalJSON() ([]byte, error) {
	type noMethod LookupGiftCardRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type LookupGiftCardResponse struct {
	GiftCard *GiftCard `json:"giftCard,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "GiftCard") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "GiftCard") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *LookupGiftCardResponse) MarshalJSON() ([]byte, error) {
	type noMethod LookupGiftCardResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type LostStolenDevice struct {
	DeviceId string `json:"deviceId,omitempty"`

	DeviceSku string `json:"deviceSku,omitempty"`

	OriginalOrderId string `json:"originalOrderId,omitempty"`

	OriginalShipmentId string `json:"originalShipmentId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "DeviceId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "DeviceId") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *LostStolenDevice) MarshalJSON() ([]byte, error) {
	type noMethod LostStolenDevice
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type LostStolenEligibility struct {
	// Possible values:
	//   "DEVICE_ACTIVATED"
	//   "INELIGIBLE_REASON_NOT_SET"
	//   "TOO_MANY_CLAIMS"
	Reasons []string `json:"reasons,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Reasons") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Reasons") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *LostStolenEligibility) MarshalJSON() ([]byte, error) {
	type noMethod LostStolenEligibility
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type LostStolenRefundEligibility struct {
	IsEligible bool `json:"isEligible,omitempty"`

	// Possible values:
	//   "DEVICE_ACTIVATED"
	//   "INELIGIBLE_REASON_NOT_SET"
	//   "TOO_MANY_CLAIMS"
	Reasons []string `json:"reasons,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "IsEligible") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "IsEligible") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *LostStolenRefundEligibility) MarshalJSON() ([]byte, error) {
	type noMethod LostStolenRefundEligibility
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type LostStolenShipment struct {
	OriginalOrderId string `json:"originalOrderId,omitempty"`

	OriginalShipmentId string `json:"originalShipmentId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "OriginalOrderId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "OriginalOrderId") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *LostStolenShipment) MarshalJSON() ([]byte, error) {
	type noMethod LostStolenShipment
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type MailingAddress struct {
	AddressLine1 string `json:"addressLine1,omitempty"`

	AddressLine2 string `json:"addressLine2,omitempty"`

	AddressLine3 string `json:"addressLine3,omitempty"`

	Addressee string `json:"addressee,omitempty"`

	City string `json:"city,omitempty"`

	CountryCode string `json:"countryCode,omitempty"`

	PhoneNumber string `json:"phoneNumber,omitempty"`

	PostalCode string `json:"postalCode,omitempty"`

	StateProvinceCode string `json:"stateProvinceCode,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "AddressLine1") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AddressLine1") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *MailingAddress) MarshalJSON() ([]byte, error) {
	type noMethod MailingAddress
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type MarkOriginalDeviceReceivedRequest struct {
	CaseId string `json:"caseId,omitempty"`

	SsoCookie string `json:"ssoCookie,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *MarkOriginalDeviceReceivedRequest) MarshalJSON() ([]byte, error) {
	type noMethod MarkOriginalDeviceReceivedRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type MatchDetail struct {
	MatchPairs []*MatchPair `json:"matchPairs,omitempty"`

	// ForceSendFields is a list of field names (e.g. "MatchPairs") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "MatchPairs") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *MatchDetail) MarshalJSON() ([]byte, error) {
	type noMethod MatchDetail
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type MatchPair struct {
	// Possible values:
	//   "EXACT"
	//   "PREFIX"
	//   "SPELLING_CORRECTION"
	//   "STEMMING"
	//   "SYNONYM"
	//   "UNKNOWN_MATCH_TYPE"
	MatchTypes []string `json:"matchTypes,omitempty"`

	MatchedTerm string `json:"matchedTerm,omitempty"`

	QueryTerm string `json:"queryTerm,omitempty"`

	// ForceSendFields is a list of field names (e.g. "MatchTypes") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "MatchTypes") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *MatchPair) MarshalJSON() ([]byte, error) {
	type noMethod MatchPair
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type MobileScreenshareAcceptEvent struct {
}

type MobileScreenshareAutoDeclineEvent struct {
	// Possible values:
	//   "APP_UPDATE"
	//   "EXISTING_INVITATION"
	//   "NEWER_INVITATION"
	//   "SAFE_MODE"
	//   "UNKNOWN_AUTO_DECLINE_TYPE"
	DeclineType string `json:"declineType,omitempty"`

	// ForceSendFields is a list of field names (e.g. "DeclineType") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "DeclineType") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *MobileScreenshareAutoDeclineEvent) MarshalJSON() ([]byte, error) {
	type noMethod MobileScreenshareAutoDeclineEvent
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type MobileScreenshareCancelEvent struct {
}

type MobileScreenshareCleanupEvent struct {
}

type MobileScreenshareConnectEvent struct {
}

type MobileScreenshareDeclineEvent struct {
}

type MobileScreenshareDisconnectEvent struct {
}

type MobileScreenshareEndEvent struct {
	AgentEnded bool `json:"agentEnded,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AgentEnded") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AgentEnded") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *MobileScreenshareEndEvent) MarshalJSON() ([]byte, error) {
	type noMethod MobileScreenshareEndEvent
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type MobileScreenshareEvent struct {
	AcceptEvent *MobileScreenshareAcceptEvent `json:"acceptEvent,omitempty"`

	AutoDeclineEvent *MobileScreenshareAutoDeclineEvent `json:"autoDeclineEvent,omitempty"`

	CancelEvent *MobileScreenshareCancelEvent `json:"cancelEvent,omitempty"`

	CleanupEvent *MobileScreenshareCleanupEvent `json:"cleanupEvent,omitempty"`

	ConnectEvent *MobileScreenshareConnectEvent `json:"connectEvent,omitempty"`

	DeclineEvent *MobileScreenshareDeclineEvent `json:"declineEvent,omitempty"`

	DisconnectEvent *MobileScreenshareDisconnectEvent `json:"disconnectEvent,omitempty"`

	EndEvent *MobileScreenshareEndEvent `json:"endEvent,omitempty"`

	InitiateEvent *MobileScreenshareInitiateEvent `json:"initiateEvent,omitempty"`

	InvitationId string `json:"invitationId,omitempty"`

	InviteEvent *MobileScreenshareInviteEvent `json:"inviteEvent,omitempty"`

	ReceivedEvent *MobileScreenshareReceivedEvent `json:"receivedEvent,omitempty"`

	StartingConnectEvent *MobileScreenshareStartingConnectEvent `json:"startingConnectEvent,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AcceptEvent") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AcceptEvent") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *MobileScreenshareEvent) MarshalJSON() ([]byte, error) {
	type noMethod MobileScreenshareEvent
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type MobileScreenshareInitiateEvent struct {
}

type MobileScreenshareInviteEvent struct {
}

type MobileScreenshareReceivedEvent struct {
}

type MobileScreenshareStartingConnectEvent struct {
}

type Money struct {
	CurrencyCode string `json:"currencyCode,omitempty"`

	Nanos int64 `json:"nanos,omitempty"`

	Units int64 `json:"units,omitempty,string"`

	// ForceSendFields is a list of field names (e.g. "CurrencyCode") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CurrencyCode") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Money) MarshalJSON() ([]byte, error) {
	type noMethod Money
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type NeedsInfoRequest struct {
}

type NeedsInfoResponse struct {
	Case *Case `json:"case,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Case") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Case") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *NeedsInfoResponse) MarshalJSON() ([]byte, error) {
	type noMethod NeedsInfoResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Node struct {
	CategoryId int64 `json:"categoryId,omitempty"`

	CategoryName string `json:"categoryName,omitempty"`

	IsInvalid bool `json:"isInvalid,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CategoryId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CategoryId") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Node) MarshalJSON() ([]byte, error) {
	type noMethod Node
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Node1 struct {
	IsValid bool `json:"isValid,omitempty"`

	Name string `json:"name,omitempty"`

	NodeId int64 `json:"nodeId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "IsValid") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "IsValid") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Node1) MarshalJSON() ([]byte, error) {
	type noMethod Node1
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Node2 struct {
	CategoryId int64 `json:"categoryId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CategoryId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CategoryId") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Node2) MarshalJSON() ([]byte, error) {
	type noMethod Node2
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Node3 struct {
	CategoryId int64 `json:"categoryId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CategoryId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CategoryId") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Node3) MarshalJSON() ([]byte, error) {
	type noMethod Node3
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Node4 struct {
	CategoryId int64 `json:"categoryId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CategoryId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CategoryId") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Node4) MarshalJSON() ([]byte, error) {
	type noMethod Node4
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Node5 struct {
	CategoryId int64 `json:"categoryId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CategoryId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CategoryId") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Node5) MarshalJSON() ([]byte, error) {
	type noMethod Node5
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Note struct {
	Author *Identity `json:"author,omitempty"`

	InResponseTo string `json:"inResponseTo,omitempty"`

	IsHtml bool `json:"isHtml,omitempty"`

	// Possible values:
	//   "PHONE"
	//   "RESOLUTION_EVENT"
	//   "UNKNOWN_NOTE_TYPE"
	//   "USER"
	NoteType string `json:"noteType,omitempty"`

	Payload string `json:"payload,omitempty"`

	Recipients []*Identity `json:"recipients,omitempty"`

	Subject string `json:"subject,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Author") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Author") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Note) MarshalJSON() ([]byte, error) {
	type noMethod Note
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type OfferedSolutionRequest struct {
	CommunicationId string `json:"communicationId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CommunicationId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CommunicationId") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *OfferedSolutionRequest) MarshalJSON() ([]byte, error) {
	type noMethod OfferedSolutionRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type OfferedSolutionResponse struct {
	Case *Case `json:"case,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Case") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Case") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *OfferedSolutionResponse) MarshalJSON() ([]byte, error) {
	type noMethod OfferedSolutionResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Opportunity struct {
	CampaignName string `json:"campaignName,omitempty"`

	OpportunityName string `json:"opportunityName,omitempty"`

	// Possible values:
	//   "ACCOUNT_FEATURE_ADOPTION"
	//   "CAMPAIGN_GOAL"
	//   "UNKNOWN_OPPORTUNITY_TYPE"
	OpportunityType string `json:"opportunityType,omitempty"`

	Points int64 `json:"points,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CampaignName") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CampaignName") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Opportunity) MarshalJSON() ([]byte, error) {
	type noMethod Opportunity
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Opportunity1 struct {
	Campaigns []*Campaign `json:"campaigns,omitempty"`

	Category string `json:"category,omitempty"`

	Id string `json:"id,omitempty"`

	Name string `json:"name,omitempty"`

	// Possible values:
	//   "ACCOUNT_FEATURE_ADOPTION"
	//   "CAMPAIGN_GOAL"
	//   "UNKNOWN_OPPORTUNITY_TYPE"
	OpportunityType string `json:"opportunityType,omitempty"`

	Points int64 `json:"points,omitempty"`

	Rank float64 `json:"rank,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Campaigns") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Campaigns") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Opportunity1) MarshalJSON() ([]byte, error) {
	type noMethod Opportunity1
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

func (s *Opportunity1) UnmarshalJSON(data []byte) error {
	type noMethod Opportunity1
	var s1 struct {
		Rank gensupport.JSONFloat64 `json:"rank"`
		*noMethod
	}
	s1.noMethod = (*noMethod)(s)
	if err := json.Unmarshal(data, &s1); err != nil {
		return err
	}
	s.Rank = float64(s1.Rank)
	return nil
}

type Order struct {
	CheckoutOrderId string `json:"checkoutOrderId,omitempty"`

	FinskyPurchaseId string `json:"finskyPurchaseId,omitempty"`

	IsNotRefundable bool `json:"isNotRefundable,omitempty"`

	Name string `json:"name,omitempty"`

	OrderId string `json:"orderId,omitempty"`

	OrderItems []*OrderItem `json:"orderItems,omitempty"`

	OrderValue *Money `json:"orderValue,omitempty"`

	// Possible values:
	//   "ACCOUNTING"
	//   "BILLING_ACCOUNT"
	//   "CARD"
	//   "CARRIER_BILLING"
	//   "DIRECT_DEBIT"
	//   "ELECTRONIC_FUNDS_TRANSFER"
	//   "GIFT_CARD"
	//   "MONETIZATION_CHANNEL"
	//   "PAYMENT_METHOD_UNSPECIFIED"
	//   "PAYPAL"
	//   "PROXY_CARD"
	//   "REDIRECT"
	//   "STORED_VALUE"
	//   "TERMS"
	PaymentMethod string `json:"paymentMethod,omitempty"`

	// Possible values:
	//   "ADDED"
	//   "CANCELLED"
	//   "CANCELLING"
	//   "CHARGEABLE"
	//   "CHARGED"
	//   "CHARGING"
	//   "COMPING"
	//   "CONTESTED"
	//   "CONTESTING"
	//   "ONE_SIDED_REFUNDED"
	//   "ONE_SIDED_REFUNDING"
	//   "PARTIAL_REFUNDING"
	//   "PAYMENT_DECLINED"
	//   "PAYMENT_STATE_UNSPECIFIED"
	//   "PENDING"
	//   "REFUNDED"
	//   "REFUNDING"
	//   "REJECTED"
	//   "REVIEW"
	//   "STUCK"
	//   "UNRECOVERABLE"
	PaymentState string `json:"paymentState,omitempty"`

	PurchaseTime string `json:"purchaseTime,omitempty"`

	// Possible values:
	//   "ANDROID_APPS"
	//   "BOOKS"
	//   "COMMERCE"
	//   "DEVICES"
	//   "MAGAZINES"
	//   "MOVIES_AND_TV"
	//   "MULTI_CONTAINER"
	//   "MUSIC"
	//   "VERTICAL_UNSPECIFIED"
	Vertical string `json:"vertical,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CheckoutOrderId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CheckoutOrderId") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *Order) MarshalJSON() ([]byte, error) {
	type noMethod Order
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type OrderItem struct {
	ContentType string `json:"contentType,omitempty"`

	ItemId string `json:"itemId,omitempty"`

	Name string `json:"name,omitempty"`

	OfferType string `json:"offerType,omitempty"`

	Title string `json:"title,omitempty"`

	// Possible values:
	//   "ANDROID_APPS"
	//   "BOOKS"
	//   "COMMERCE"
	//   "DEVICES"
	//   "MAGAZINES"
	//   "MOVIES_AND_TV"
	//   "MULTI_CONTAINER"
	//   "MUSIC"
	//   "VERTICAL_UNSPECIFIED"
	Vertical string `json:"vertical,omitempty"`

	// ForceSendFields is a list of field names (e.g. "ContentType") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ContentType") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *OrderItem) MarshalJSON() ([]byte, error) {
	type noMethod OrderItem
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type OrderRefundStatusInfo struct {
	Order *Order `json:"order,omitempty"`

	StatusMessage string `json:"statusMessage,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Order") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Order") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *OrderRefundStatusInfo) MarshalJSON() ([]byte, error) {
	type noMethod OrderRefundStatusInfo
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Path struct {
	Nodes []*Node `json:"nodes,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Nodes") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Nodes") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Path) MarshalJSON() ([]byte, error) {
	type noMethod Path
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Path1 struct {
	Nodes []*Node1 `json:"nodes,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Nodes") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Nodes") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Path1) MarshalJSON() ([]byte, error) {
	type noMethod Path1
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Path2 struct {
	CategoryIds []int64 `json:"categoryIds,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CategoryIds") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CategoryIds") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Path2) MarshalJSON() ([]byte, error) {
	type noMethod Path2
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type PaymentDetail struct {
	InstrumentDescription string `json:"instrumentDescription,omitempty"`

	// Possible values:
	//   "BANK_ACCOUNT"
	//   "BILLING_ACCOUNT"
	//   "CARRIER_BILLING"
	//   "CREDIT_CARD"
	//   "FINANCING"
	//   "GOOGLE_STANDARD_TOKENIZED"
	//   "INSTRUMENT_TYPE_NOT_SET"
	//   "MONETIZATION_CHANNEL"
	//   "NETBANKING"
	//   "PAYPAL"
	//   "STORED_VALUE_CLOSED_LOOP_PLAY"
	//   "STORED_VALUE_OPEN_LOOP"
	InstrumentType string `json:"instrumentType,omitempty"`

	// ForceSendFields is a list of field names (e.g.
	// "InstrumentDescription") to unconditionally include in API requests.
	// By default, fields with empty values are omitted from API requests.
	// However, any non-pointer, non-interface field appearing in
	// ForceSendFields will be sent to the server regardless of whether the
	// field is empty or not. This may be used to include empty fields in
	// Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "InstrumentDescription") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *PaymentDetail) MarshalJSON() ([]byte, error) {
	type noMethod PaymentDetail
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type PaymentDetail1 struct {
	InstrumentDescription string `json:"instrumentDescription,omitempty"`

	// ForceSendFields is a list of field names (e.g.
	// "InstrumentDescription") to unconditionally include in API requests.
	// By default, fields with empty values are omitted from API requests.
	// However, any non-pointer, non-interface field appearing in
	// ForceSendFields will be sent to the server regardless of whether the
	// field is empty or not. This may be used to include empty fields in
	// Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "InstrumentDescription") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *PaymentDetail1) MarshalJSON() ([]byte, error) {
	type noMethod PaymentDetail1
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type PaymentInstrumentTypeInfo struct {
	InstrumentDescription string `json:"instrumentDescription,omitempty"`

	InstrumentTypeToken string `json:"instrumentTypeToken,omitempty"`

	// Possible values:
	//   "BANK_ACCOUNT"
	//   "CARRIER_BILLING"
	//   "CREDIT_CARD"
	//   "OTHER"
	//   "PAYMENT_METHOD_TYPE_UNSPECIFIED"
	//   "PAYPAL"
	Type string `json:"type,omitempty"`

	// ForceSendFields is a list of field names (e.g.
	// "InstrumentDescription") to unconditionally include in API requests.
	// By default, fields with empty values are omitted from API requests.
	// However, any non-pointer, non-interface field appearing in
	// ForceSendFields will be sent to the server regardless of whether the
	// field is empty or not. This may be used to include empty fields in
	// Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "InstrumentDescription") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *PaymentInstrumentTypeInfo) MarshalJSON() ([]byte, error) {
	type noMethod PaymentInstrumentTypeInfo
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type PaymentMethodHijackTransaction struct {
	Amount *Money `json:"amount,omitempty"`

	Count int64 `json:"count,omitempty"`

	Date *Date `json:"date,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Amount") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Amount") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *PaymentMethodHijackTransaction) MarshalJSON() ([]byte, error) {
	type noMethod PaymentMethodHijackTransaction
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type PaymentsInfo struct {
	NumPaymentsAccounts int64 `json:"numPaymentsAccounts,omitempty"`

	// ForceSendFields is a list of field names (e.g. "NumPaymentsAccounts")
	// to unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "NumPaymentsAccounts") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *PaymentsInfo) MarshalJSON() ([]byte, error) {
	type noMethod PaymentsInfo
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type PaymentsSuggestion struct {
	Description string `json:"description,omitempty"`

	DisplayName string `json:"displayName,omitempty"`

	Token string `json:"token,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Description") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Description") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *PaymentsSuggestion) MarshalJSON() ([]byte, error) {
	type noMethod PaymentsSuggestion
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Paypal struct {
	Email string `json:"email,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Email") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Email") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Paypal) MarshalJSON() ([]byte, error) {
	type noMethod Paypal
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Paypal1 struct {
	Account string `json:"account,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Account") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Account") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Paypal1) MarshalJSON() ([]byte, error) {
	type noMethod Paypal1
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Period struct {
	Count int64 `json:"count,omitempty"`

	// Possible values:
	//   "DAY"
	//   "MONTH"
	//   "UNITS_UNKNOWN"
	//   "YEAR"
	Units string `json:"units,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Count") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Count") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Period) MarshalJSON() ([]byte, error) {
	type noMethod Period
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type PhoneCall struct {
	CallId string `json:"callId,omitempty"`

	CountryCode int64 `json:"countryCode,omitempty"`

	ObfuscatedLineNumber string `json:"obfuscatedLineNumber,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CallId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CallId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *PhoneCall) MarshalJSON() ([]byte, error) {
	type noMethod PhoneCall
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type PhoneInfo struct {
	Ucid string `json:"ucid,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Ucid") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Ucid") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *PhoneInfo) MarshalJSON() ([]byte, error) {
	type noMethod PhoneInfo
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type PhoneNumber struct {
	CountryCode int64 `json:"countryCode,omitempty"`

	// Possible values:
	//   "COUNTRY_CODE_SOURCE_UNSPECIFIED"
	//   "FROM_DEFAULT_COUNTRY"
	//   "FROM_NUMBER_WITHOUT_PLUS_SIGN"
	//   "FROM_NUMBER_WITH_IDD"
	//   "FROM_NUMBER_WITH_PLUS_SIGN"
	CountryCodeSource string `json:"countryCodeSource,omitempty"`

	Extension string `json:"extension,omitempty"`

	IsValid bool `json:"isValid,omitempty"`

	LineNumber string `json:"lineNumber,omitempty"`

	NationalNumber uint64 `json:"nationalNumber,omitempty,string"`

	NumberOfLeadingZeros int64 `json:"numberOfLeadingZeros,omitempty"`

	PreferredDomesticCarrierCode string `json:"preferredDomesticCarrierCode,omitempty"`

	RawInput string `json:"rawInput,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "CountryCode") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CountryCode") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *PhoneNumber) MarshalJSON() ([]byte, error) {
	type noMethod PhoneNumber
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type PhoneSetting struct {
	AgentId string `json:"agentId,omitempty"`

	Extension string `json:"extension,omitempty"`

	Name string `json:"name,omitempty"`

	Region string `json:"region,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AgentId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AgentId") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *PhoneSetting) MarshalJSON() ([]byte, error) {
	type noMethod PhoneSetting
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type PhysicalMailingAddress struct {
	AddressLine1 string `json:"addressLine1,omitempty"`

	AddressLine2 string `json:"addressLine2,omitempty"`

	AddressLine3 string `json:"addressLine3,omitempty"`

	Addressee string `json:"addressee,omitempty"`

	City string `json:"city,omitempty"`

	CountryCode string `json:"countryCode,omitempty"`

	PhoneNumber string `json:"phoneNumber,omitempty"`

	PostalCode string `json:"postalCode,omitempty"`

	StateProvinceCode string `json:"stateProvinceCode,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AddressLine1") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AddressLine1") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *PhysicalMailingAddress) MarshalJSON() ([]byte, error) {
	type noMethod PhysicalMailingAddress
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Pitch struct {
	Opportunities []*Opportunity `json:"opportunities,omitempty"`

	// Possible values:
	//   "APOLLO"
	//   "TRADITIONAL"
	//   "UNKNOWN_OPPORTUNITIES_DISPLAY_TYPE"
	OpportunitiesDisplayType string `json:"opportunitiesDisplayType,omitempty"`

	Program *Program `json:"program,omitempty"`

	TotalPoints int64 `json:"totalPoints,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Opportunities") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Opportunities") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Pitch) MarshalJSON() ([]byte, error) {
	type noMethod Pitch
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Pitch1 struct {
	CampaignIndex int64 `json:"campaignIndex,omitempty"`

	Id *PitchId `json:"id,omitempty"`

	OpportunityIndex int64 `json:"opportunityIndex,omitempty"`

	// Possible values:
	//   "ACCOUNT_FEATURE_ADOPTION"
	//   "CAMPAIGN_GOAL"
	//   "UNKNOWN_OPPORTUNITY_TYPE"
	OpportunityType string `json:"opportunityType,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CampaignIndex") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CampaignIndex") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Pitch1) MarshalJSON() ([]byte, error) {
	type noMethod Pitch1
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type PitchId struct {
	CampaignId int64 `json:"campaignId,omitempty,string"`

	OpportunityId string `json:"opportunityId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CampaignId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CampaignId") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *PitchId) MarshalJSON() ([]byte, error) {
	type noMethod PitchId
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Product struct {
	AgentCategories []*Category `json:"agentCategories,omitempty"`

	ProductId string `json:"productId,omitempty"`

	ProductName string `json:"productName,omitempty"`

	RoutingCategory *Category `json:"routingCategory,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "AgentCategories") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AgentCategories") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *Product) MarshalJSON() ([]byte, error) {
	type noMethod Product
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Product1 struct {
	DisplayName string `json:"displayName,omitempty"`

	Name string `json:"name,omitempty"`

	ProductId string `json:"productId,omitempty"`

	ProductName string `json:"productName,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "DisplayName") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "DisplayName") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Product1) MarshalJSON() ([]byte, error) {
	type noMethod Product1
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Product2 struct {
	IsPinned bool `json:"isPinned,omitempty"`

	Locales []string `json:"locales,omitempty"`

	ProductId string `json:"productId,omitempty"`

	ProductName string `json:"productName,omitempty"`

	RoutingTargets []*RoutingTarget `json:"routingTargets,omitempty"`

	// ForceSendFields is a list of field names (e.g. "IsPinned") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "IsPinned") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Product2) MarshalJSON() ([]byte, error) {
	type noMethod Product2
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ProductCount struct {
	Count int64 `json:"count,omitempty"`

	ProductName string `json:"productName,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Count") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Count") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ProductCount) MarshalJSON() ([]byte, error) {
	type noMethod ProductCount
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ProductTransfer struct {
	SourceProduct *Product `json:"sourceProduct,omitempty"`

	TargetProduct *Product `json:"targetProduct,omitempty"`

	// ForceSendFields is a list of field names (e.g. "SourceProduct") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "SourceProduct") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ProductTransfer) MarshalJSON() ([]byte, error) {
	type noMethod ProductTransfer
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Program struct {
	ProgramName string `json:"programName,omitempty"`

	TargetPoints int64 `json:"targetPoints,omitempty"`

	// ForceSendFields is a list of field names (e.g. "ProgramName") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ProgramName") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Program) MarshalJSON() ([]byte, error) {
	type noMethod Program
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Program1 struct {
	Name string `json:"name,omitempty"`

	TargetPoints int64 `json:"targetPoints,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Name") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Name") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Program1) MarshalJSON() ([]byte, error) {
	type noMethod Program1
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Property struct {
	Name string `json:"name,omitempty"`

	Value string `json:"value,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Name") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Name") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Property) MarshalJSON() ([]byte, error) {
	type noMethod Property
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Purchase struct {
	AccessEndTime *LocalizedTimestamp `json:"accessEndTime,omitempty"`

	CancelTime *LocalizedTimestamp `json:"cancelTime,omitempty"`

	EligibleForSelfServeRefund bool `json:"eligibleForSelfServeRefund,omitempty"`

	EntitlementToken string `json:"entitlementToken,omitempty"`

	IsPreorder bool `json:"isPreorder,omitempty"`

	IsRefundable bool `json:"isRefundable,omitempty"`

	IsRefunded bool `json:"isRefunded,omitempty"`

	IsRevokable bool `json:"isRevokable,omitempty"`

	Name string `json:"name,omitempty"`

	OrderId string `json:"orderId,omitempty"`

	PaymentDescription string `json:"paymentDescription,omitempty"`

	// Possible values:
	//   "BANK_ACCOUNT"
	//   "BILLING_ACCOUNT"
	//   "CARRIER_BILLING"
	//   "CREDIT_CARD"
	//   "FINANCING"
	//   "GOOGLE_STANDARD_TOKENIZED"
	//   "MONETIZATION_CHANNEL"
	//   "NETBANKING"
	//   "PAYMENT_METHOD_UNKNOWN"
	//   "PAYPAL"
	//   "STORED_VALUE_CLOSED_LOOP_PLAY"
	//   "STORED_VALUE_OPEN_LOOP"
	PaymentMethod string `json:"paymentMethod,omitempty"`

	// Possible values:
	//   "BUNDLE"
	//   "LIVE_EVENT"
	//   "MOVIE"
	//   "PRODUCT_TYPE_UNKNOWN"
	//   "RED"
	//   "SEASON"
	//   "SHOW"
	//   "UNPLUGGED"
	ProductType string `json:"productType,omitempty"`

	PurchaseTime *LocalizedTimestamp `json:"purchaseTime,omitempty"`

	// Possible values:
	//   "PURCHASE"
	//   "PURCHASE_TYPE_UNKNOWN"
	//   "RENTAL"
	PurchaseType string `json:"purchaseType,omitempty"`

	// Possible values:
	//   "HD"
	//   "SD"
	//   "UHD"
	//   "UNKNOWN_CAP"
	QualityCap string `json:"qualityCap,omitempty"`

	// Possible values:
	//   "CONTENT_PURCHASE_SOURCE_UNKNOWN"
	//   "GOOGLE_PLAY"
	//   "YOUTUBE"
	Source string `json:"source,omitempty"`

	TransactionAmount *Money `json:"transactionAmount,omitempty"`

	// Possible values:
	//   "CANCELLED"
	//   "CHARGED"
	//   "CHARGED_BACK"
	//   "DECLINED"
	//   "OTHER_STATUS"
	//   "PENDING"
	//   "REFUNDED"
	//   "REJECTED"
	//   "TRANSACTION_STATUS_UNKNOWN"
	TransactionStatus string `json:"transactionStatus,omitempty"`

	TransactionTime *LocalizedTimestamp `json:"transactionTime,omitempty"`

	TransactionToken string `json:"transactionToken,omitempty"`

	ViewTime *LocalizedTimestamp `json:"viewTime,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AccessEndTime") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AccessEndTime") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Purchase) MarshalJSON() ([]byte, error) {
	type noMethod Purchase
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type PurchasedApp struct {
	AppId string `json:"appId,omitempty"`

	Name string `json:"name,omitempty"`

	PurchaseTime string `json:"purchaseTime,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AppId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AppId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *PurchasedApp) MarshalJSON() ([]byte, error) {
	type noMethod PurchasedApp
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type PurchasedBook struct {
	BookId string `json:"bookId,omitempty"`

	Name string `json:"name,omitempty"`

	PurchaseTime string `json:"purchaseTime,omitempty"`

	// ForceSendFields is a list of field names (e.g. "BookId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "BookId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *PurchasedBook) MarshalJSON() ([]byte, error) {
	type noMethod PurchasedBook
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type PurchasedVideo struct {
	Name string `json:"name,omitempty"`

	PurchaseTime string `json:"purchaseTime,omitempty"`

	VideoId string `json:"videoId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Name") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Name") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *PurchasedVideo) MarshalJSON() ([]byte, error) {
	type noMethod PurchasedVideo
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type QuestionSet struct {
	AttemptsRemaining int64 `json:"attemptsRemaining,omitempty"`

	AuthenticationBankAccounts []*AuthenticationBankAccount `json:"authenticationBankAccounts,omitempty"`

	AuthenticationCreditCards []*AuthenticationCreditCard1 `json:"authenticationCreditCards,omitempty"`

	// Possible values:
	//   "BANK_ACCOUNT"
	//   "CREDIT_CARD"
	//   "DCB"
	//   "PAYPAL"
	//   "PHONE_NUMBER"
	//   "PLAY_BALANCE"
	//   "POSTAL_CODE"
	//   "UNKNOWN_QUESTION"
	//   "WALLET_BALANCE"
	AvailableQuestions []string `json:"availableQuestions,omitempty"`

	// Possible values:
	//   "PAYMENT_METHOD_QUESTION_SET"
	//   "PHONE_NUMBER_QUESTION_SET"
	//   "POSTAL_CODE_QUESTION_SET"
	//   "UNKNOWN_QUESTION_SET_TYPE"
	QuestionSetType string `json:"questionSetType,omitempty"`

	Questions []*AvailableQuestion `json:"questions,omitempty"`

	// Possible values:
	//   "FAIL"
	//   "PASS"
	//   "PENDING"
	//   "UNKNOWN_RESULT"
	Result string `json:"result,omitempty"`

	TotalNumberOfAttempts int64 `json:"totalNumberOfAttempts,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AttemptsRemaining")
	// to unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AttemptsRemaining") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *QuestionSet) MarshalJSON() ([]byte, error) {
	type noMethod QuestionSet
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type QuestionSource struct {
	// Possible values:
	//   "FOCUS"
	//   "PAYMENTS"
	//   "UNKNOWN_QUESTION_SOURCE_TYPE"
	QuestionSourceType string `json:"questionSourceType,omitempty"`

	Token string `json:"token,omitempty"`

	// ForceSendFields is a list of field names (e.g. "QuestionSourceType")
	// to unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "QuestionSourceType") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *QuestionSource) MarshalJSON() ([]byte, error) {
	type noMethod QuestionSource
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type QuickResponse struct {
	QuickResponseName string `json:"quickResponseName,omitempty"`

	Value string `json:"value,omitempty"`

	// ForceSendFields is a list of field names (e.g. "QuickResponseName")
	// to unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "QuickResponseName") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *QuickResponse) MarshalJSON() ([]byte, error) {
	type noMethod QuickResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ReadCaseRequest struct {
	ReadTime string `json:"readTime,omitempty"`

	// ForceSendFields is a list of field names (e.g. "ReadTime") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ReadTime") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ReadCaseRequest) MarshalJSON() ([]byte, error) {
	type noMethod ReadCaseRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type RealTime struct {
	AttributeMap map[string]string `json:"attributeMap,omitempty"`

	Issue string `json:"issue,omitempty"`

	Pool *RealTimePool `json:"pool,omitempty"`

	RealTimeEvents []*RealTimeEvent `json:"realTimeEvents,omitempty"`

	Requester *Identity `json:"requester,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AttributeMap") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AttributeMap") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *RealTime) MarshalJSON() ([]byte, error) {
	type noMethod RealTime
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type RealTimeEvent struct {
	ChatMessage *ChatMessage `json:"chatMessage,omitempty"`

	CreateTime string `json:"createTime,omitempty"`

	// ForceSendFields is a list of field names (e.g. "ChatMessage") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ChatMessage") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *RealTimeEvent) MarshalJSON() ([]byte, error) {
	type noMethod RealTimeEvent
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type RealTimePool struct {
	PoolId string `json:"poolId,omitempty"`

	PoolName string `json:"poolName,omitempty"`

	// ForceSendFields is a list of field names (e.g. "PoolId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "PoolId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *RealTimePool) MarshalJSON() ([]byte, error) {
	type noMethod RealTimePool
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type RealTimeSetting struct {
	AgentSettingId string `json:"agentSettingId,omitempty"`

	EnableChatQueueSounds bool `json:"enableChatQueueSounds,omitempty"`

	EnableModalChatNotifications bool `json:"enableModalChatNotifications,omitempty"`

	ForceChatQueueNotifications bool `json:"forceChatQueueNotifications,omitempty"`

	GaiaRobotEntityId string `json:"gaiaRobotEntityId,omitempty"`

	Name string `json:"name,omitempty"`

	PlusPageEntityId string `json:"plusPageEntityId,omitempty"`

	QuickResponses []*QuickResponse `json:"quickResponses,omitempty"`

	RealTimeSettingId string `json:"realTimeSettingId,omitempty"`

	// Possible values:
	//   "GAIA_ROBOT"
	//   "PLUS_PAGE"
	//   "UNKNOWN_SUPPORT_IDENTITY_TYPE"
	SupportIdentityType string `json:"supportIdentityType,omitempty"`

	SwitchCaseOnChatFocus bool `json:"switchCaseOnChatFocus,omitempty"`

	UseSupportIdentity bool `json:"useSupportIdentity,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "AgentSettingId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AgentSettingId") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *RealTimeSetting) MarshalJSON() ([]byte, error) {
	type noMethod RealTimeSetting
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type RecentlyViewedSource struct {
}

type RedSignals struct {
	// Possible values:
	//   "FAMILY_MEMBER"
	//   "GOOGLE_PLAY"
	//   "ITUNES"
	//   "OTHER"
	//   "RED_SOURCE_UNKNOWN"
	//   "YOUTUBE"
	Source string `json:"source,omitempty"`

	SubscriptionSignals *SubscriptionSignals `json:"subscriptionSignals,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Source") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Source") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *RedSignals) MarshalJSON() ([]byte, error) {
	type noMethod RedSignals
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type RedeemGiftCardRequest struct {
	ActivationNumber string `json:"activationNumber,omitempty"`

	CaseId string `json:"caseId,omitempty"`

	RedemptionToken *RedemptionToken `json:"redemptionToken,omitempty"`

	SsoCookie string `json:"ssoCookie,omitempty"`

	// ForceSendFields is a list of field names (e.g. "ActivationNumber") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ActivationNumber") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *RedeemGiftCardRequest) MarshalJSON() ([]byte, error) {
	type noMethod RedeemGiftCardRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type RedeemGiftCardResponse struct {
	AmountRedeemed *Money `json:"amountRedeemed,omitempty"`

	AvailableBalance *Money `json:"availableBalance,omitempty"`

	// Possible values:
	//   "CURRENCY_MISMATCH"
	//   "CUSTOMER_CONTROLS_FORBID"
	//   "EXCEEDS_BALANCE_LIMITS"
	//   "MULTIPLE_PAYMENT_ACCOUNTS"
	//   "NO_STORED_VALUE_INSTRUMENT"
	//   "REDEMPTION_STATUS_UNSPECIFIED"
	//   "SUCCESS"
	RedemptionStatus string `json:"redemptionStatus,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "AmountRedeemed") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AmountRedeemed") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *RedeemGiftCardResponse) MarshalJSON() ([]byte, error) {
	type noMethod RedeemGiftCardResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type RedemptionToken struct {
	Token string `json:"token,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Token") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Token") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *RedemptionToken) MarshalJSON() ([]byte, error) {
	type noMethod RedemptionToken
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type RefundDetail struct {
	PaymentDetail *PaymentDetail1 `json:"paymentDetail,omitempty"`

	RefundEntries []*RefundEntry `json:"refundEntries,omitempty"`

	// Possible values:
	//   "DELIVERY_RETURNED"
	//   "EXTENDED_WARRANTY_CANCELATION"
	//   "IN_BOX_ACCESSORIES"
	//   "LOST_STOLEN"
	//   "OTHER"
	//   "PRICE_PROTECTION"
	//   "REFUND_REASON_NOT_SET"
	//   "RMA"
	//   "SHIPPING"
	//   "TAX_EXEMPT"
	//   "UNDELIVERABLE"
	RefundReason string `json:"refundReason,omitempty"`

	RefundTotal *Money `json:"refundTotal,omitempty"`

	// ForceSendFields is a list of field names (e.g. "PaymentDetail") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "PaymentDetail") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *RefundDetail) MarshalJSON() ([]byte, error) {
	type noMethod RefundDetail
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type RefundEntry struct {
	RefundAmount *Money `json:"refundAmount,omitempty"`

	RefundDescription string `json:"refundDescription,omitempty"`

	RefundRequestTime string `json:"refundRequestTime,omitempty"`

	RefundTime string `json:"refundTime,omitempty"`

	// Possible values:
	//   "REFUNDED"
	//   "REFUND_ERROR"
	//   "REFUND_PENDING"
	//   "REFUND_PENDING_RETURN"
	//   "REFUND_PENDING_STUCK"
	//   "STATUS_NOT_SET"
	Status string `json:"status,omitempty"`

	// ForceSendFields is a list of field names (e.g. "RefundAmount") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "RefundAmount") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *RefundEntry) MarshalJSON() ([]byte, error) {
	type noMethod RefundEntry
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type RefundHardwareOrderRequest struct {
	CaseId string `json:"caseId,omitempty"`

	SsoTicket string `json:"ssoTicket,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *RefundHardwareOrderRequest) MarshalJSON() ([]byte, error) {
	type noMethod RefundHardwareOrderRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type RefundHardwareOrderResponse struct {
	// Possible values:
	//   "FAILURE_REASON_NOT_SET"
	//   "REQUEST_ALREADY_EXISTS"
	Reason string `json:"reason,omitempty"`

	RefundId string `json:"refundId,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Reason") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Reason") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *RefundHardwareOrderResponse) MarshalJSON() ([]byte, error) {
	type noMethod RefundHardwareOrderResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type RefundHistorySummaryInfo struct {
	NumberOfRefunds int64 `json:"numberOfRefunds,omitempty"`

	// Possible values:
	//   "BUNDLE"
	//   "LIVE_EVENT"
	//   "MOVIE"
	//   "PRODUCT_TYPE_UNKNOWN"
	//   "RED"
	//   "SEASON"
	//   "SHOW"
	//   "UNPLUGGED"
	ProductType string `json:"productType,omitempty"`

	// Possible values:
	//   "ALREADY_REFUNDED"
	//   "DENIED_CUSTOMER_ABUSE"
	//   "DENIED_FRAUD"
	//   "DENIED_REFUND_EXCEEDS_COURTESY_LIMIT"
	//   "ISSUED"
	//   "PERMANENT_REFUND_FAILED"
	//   "REFUND_RESULT_UNKNOWN"
	//   "REFUND_RETRIABLE"
	RefundResult string `json:"refundResult,omitempty"`

	// ForceSendFields is a list of field names (e.g. "NumberOfRefunds") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "NumberOfRefunds") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *RefundHistorySummaryInfo) MarshalJSON() ([]byte, error) {
	type noMethod RefundHistorySummaryInfo
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type RefundOrdersRequest struct {
	CaseId string `json:"caseId,omitempty"`

	CustomerEmail string `json:"customerEmail,omitempty"`

	Orders []*Order `json:"orders,omitempty"`

	// Possible values:
	//   "ACCIDENTAL_PURCHASE"
	//   "DEFECTIVE"
	//   "DID_NOT_RECEIVE"
	//   "FRAUD"
	//   "FRIENDLY_FRAUD"
	//   "REFUND_REASON_UNSPECIFIED"
	//   "REMORSE"
	RefundReason string `json:"refundReason,omitempty"`

	SsoCookie string `json:"ssoCookie,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *RefundOrdersRequest) MarshalJSON() ([]byte, error) {
	type noMethod RefundOrdersRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type RefundOrdersResponse struct {
	ApprovedOrderInfos []*OrderRefundStatusInfo `json:"approvedOrderInfos,omitempty"`

	ApprovedOrders []*Order `json:"approvedOrders,omitempty"`

	EscalateOrderInfos []*OrderRefundStatusInfo `json:"escalateOrderInfos,omitempty"`

	EscalateOrders []*Order `json:"escalateOrders,omitempty"`

	FailedOrderInfos []*OrderRefundStatusInfo `json:"failedOrderInfos,omitempty"`

	FailedOrders []*Order `json:"failedOrders,omitempty"`

	InProgress bool `json:"inProgress,omitempty"`

	InProgressOrderInfos []*OrderRefundStatusInfo `json:"inProgressOrderInfos,omitempty"`

	InProgressOrders []*Order `json:"inProgressOrders,omitempty"`

	OptionalEscalateOrderInfos []*OrderRefundStatusInfo `json:"optionalEscalateOrderInfos,omitempty"`

	OptionalEscalateOrders []*Order `json:"optionalEscalateOrders,omitempty"`

	ProcessLaterOrderInfos []*OrderRefundStatusInfo `json:"processLaterOrderInfos,omitempty"`

	ProcessLaterOrders []*Order `json:"processLaterOrders,omitempty"`

	RejectedOrderInfos []*OrderRefundStatusInfo `json:"rejectedOrderInfos,omitempty"`

	RejectedOrders []*Order `json:"rejectedOrders,omitempty"`

	SidewinderRejectedOrderInfos []*OrderRefundStatusInfo `json:"sidewinderRejectedOrderInfos,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "ApprovedOrderInfos")
	// to unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ApprovedOrderInfos") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *RefundOrdersResponse) MarshalJSON() ([]byte, error) {
	type noMethod RefundOrdersResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type RefundTransactionsRequest struct {
	CaseId string `json:"caseId,omitempty"`

	ForceRefund bool `json:"forceRefund,omitempty"`

	RefundRequestEntries []*TransactionRefundRequestEntry `json:"refundRequestEntries,omitempty"`

	SsoCookie string `json:"ssoCookie,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *RefundTransactionsRequest) MarshalJSON() ([]byte, error) {
	type noMethod RefundTransactionsRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type RefundTransactionsResponse struct {
	RefundStatuses []*TransactionRefundResponseStatus `json:"refundStatuses,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "RefundStatuses") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "RefundStatuses") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *RefundTransactionsResponse) MarshalJSON() ([]byte, error) {
	type noMethod RefundTransactionsResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type RelatedCommunications struct {
	CaseId string `json:"caseId,omitempty"`

	Communications []*Communication `json:"communications,omitempty"`

	Relations []*Relation1 `json:"relations,omitempty"`

	SlaTime string `json:"slaTime,omitempty"`

	// Possible values:
	//   "ASSIGNED"
	//   "BLOCKED_BY"
	//   "FINISHED"
	//   "IN_CONSULT"
	//   "NEED_INFO"
	//   "NEW"
	//   "SOLUTION_OFFERED"
	//   "UNASSIGNED"
	//   "UNKNOWN_CASE_STATE"
	State string `json:"state,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *RelatedCommunications) MarshalJSON() ([]byte, error) {
	type noMethod RelatedCommunications
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Relation struct {
	Duplicate *Duplicate `json:"duplicate,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Duplicate") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Duplicate") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Relation) MarshalJSON() ([]byte, error) {
	type noMethod Relation
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Relation1 struct {
	BorgAlertId string `json:"borgAlertId,omitempty"`

	BuganizerId int64 `json:"buganizerId,omitempty,string"`

	CaseId string `json:"caseId,omitempty"`

	LegalId string `json:"legalId,omitempty"`

	OrderId string `json:"orderId,omitempty"`

	PcrId int64 `json:"pcrId,omitempty"`

	SourceCaseId string `json:"sourceCaseId,omitempty"`

	SourceCommunicationId string `json:"sourceCommunicationId,omitempty"`

	SpixerId string `json:"spixerId,omitempty"`

	// Possible values:
	//   "PENDING"
	//   "RESOLVED"
	//   "UNKNOWN_RELATION_STATUS"
	State string `json:"state,omitempty"`

	// Possible values:
	//   "BLOCKING"
	//   "CONSULT"
	//   "DUPLICATE"
	//   "SPLIT"
	//   "UNKNOWN_RELATION_TYPE"
	Type string `json:"type,omitempty"`

	WalletPaymentMethodHijackReviewIds *WalletPaymentMethodHijackReviewIds `json:"walletPaymentMethodHijackReviewIds,omitempty"`

	WalletSignInReviewIds *WalletSignInReviewIds `json:"walletSignInReviewIds,omitempty"`

	// ForceSendFields is a list of field names (e.g. "BorgAlertId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "BorgAlertId") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Relation1) MarshalJSON() ([]byte, error) {
	type noMethod Relation1
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ReleaseRequest struct {
}

type ReleaseResponse struct {
	Case *Case `json:"case,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Case") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Case") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ReleaseResponse) MarshalJSON() ([]byte, error) {
	type noMethod ReleaseResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ReplacementDetail struct {
	Shipments []*ReplacementShipment `json:"shipments,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Shipments") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Shipments") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ReplacementDetail) MarshalJSON() ([]byte, error) {
	type noMethod ReplacementDetail
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ReplacementDevice struct {
	CountryCode string `json:"countryCode,omitempty"`

	CountryExceptionEligible bool `json:"countryExceptionEligible,omitempty"`

	Device string `json:"device,omitempty"`

	Gpn string `json:"gpn,omitempty"`

	RmaType string `json:"rmaType,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CountryCode") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CountryCode") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ReplacementDevice) MarshalJSON() ([]byte, error) {
	type noMethod ReplacementDevice
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ReplacementShipment struct {
	// Possible values:
	//   "INITIATE_RMA"
	//   "INVESTIGATE_AUTH_HOLD"
	//   "INVESTIGATE_SHIPPING"
	//   "REPLACEMENT_SHIPMENT_ACTION_NOT_SET"
	//   "REVIEW_RMA"
	//   "SEND_SHIPMENT_STATUS"
	Actions []string `json:"actions,omitempty"`

	ActualDeliveryTime string `json:"actualDeliveryTime,omitempty"`

	ActualShipDate *Date `json:"actualShipDate,omitempty"`

	CarrierName string `json:"carrierName,omitempty"`

	EstimatedDeliveryEndDate *Date `json:"estimatedDeliveryEndDate,omitempty"`

	EstimatedDeliveryStartDate *Date `json:"estimatedDeliveryStartDate,omitempty"`

	IsPastEstimatedDeliveryDate bool `json:"isPastEstimatedDeliveryDate,omitempty"`

	LastEventTime string `json:"lastEventTime,omitempty"`

	LineItems []*LineItem `json:"lineItems,omitempty"`

	// Possible values:
	//   "DELIVERED"
	//   "ERROR"
	//   "IN_TRANSIT"
	//   "NOT_SHIPPED"
	//   "REPLACEMENT_SHIPMENT_STATE_NOT_SET"
	//   "REPLACEMENT_SHIPMENT_STATE_UNKNOWN"
	State string `json:"state,omitempty"`

	TrackingNumber string `json:"trackingNumber,omitempty"`

	TrackingUrl string `json:"trackingUrl,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Actions") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Actions") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ReplacementShipment) MarshalJSON() ([]byte, error) {
	type noMethod ReplacementShipment
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type RequestDeviceSignalsAcceptEvent struct {
	DeviceId string `json:"deviceId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "DeviceId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "DeviceId") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *RequestDeviceSignalsAcceptEvent) MarshalJSON() ([]byte, error) {
	type noMethod RequestDeviceSignalsAcceptEvent
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type RequestDeviceSignalsCancelEvent struct {
}

type RequestDeviceSignalsCleanupEvent struct {
}

type RequestDeviceSignalsDeclineEvent struct {
}

type RequestDeviceSignalsEvent struct {
	AcceptEvent *RequestDeviceSignalsAcceptEvent `json:"acceptEvent,omitempty"`

	CancelEvent *RequestDeviceSignalsCancelEvent `json:"cancelEvent,omitempty"`

	CleanupEvent *RequestDeviceSignalsCleanupEvent `json:"cleanupEvent,omitempty"`

	DeclineEvent *RequestDeviceSignalsDeclineEvent `json:"declineEvent,omitempty"`

	InitiateEvent *RequestDeviceSignalsInitiateEvent `json:"initiateEvent,omitempty"`

	InvitationId string `json:"invitationId,omitempty"`

	InviteEvent *RequestDeviceSignalsInviteEvent `json:"inviteEvent,omitempty"`

	ReceivedEvent *RequestDeviceSignalsReceivedEvent `json:"receivedEvent,omitempty"`

	TimeoutEvent *RequestDeviceSignalsTimeoutEvent `json:"timeoutEvent,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AcceptEvent") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AcceptEvent") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *RequestDeviceSignalsEvent) MarshalJSON() ([]byte, error) {
	type noMethod RequestDeviceSignalsEvent
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type RequestDeviceSignalsInitiateEvent struct {
}

type RequestDeviceSignalsInviteEvent struct {
}

type RequestDeviceSignalsReceivedEvent struct {
}

type RequestDeviceSignalsTimeoutEvent struct {
}

type Requirement struct {
	// Possible values:
	//   "INTERNET"
	//   "OPERATE"
	//   "REQUIREMENT_NOT_SET"
	RequirementType string `json:"requirementType,omitempty"`

	SnippetId string `json:"snippetId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "RequirementType") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "RequirementType") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *Requirement) MarshalJSON() ([]byte, error) {
	type noMethod Requirement
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Resolution struct {
	CannedResponse *CannedResponse1 `json:"cannedResponse,omitempty"`

	HelpCenter *HelpCenterContent2 `json:"helpCenter,omitempty"`

	MatchReason string `json:"matchReason,omitempty"`

	MatchTerms []string `json:"matchTerms,omitempty"`

	PostActions []*Action `json:"postActions,omitempty"`

	PreActions []*Action `json:"preActions,omitempty"`

	Score int64 `json:"score,omitempty"`

	Snippet string `json:"snippet,omitempty"`

	Title string `json:"title,omitempty"`

	Troubleshooter *TroubleShooter `json:"troubleshooter,omitempty"`

	Workflow *Workflow1 `json:"workflow,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CannedResponse") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CannedResponse") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *Resolution) MarshalJSON() ([]byte, error) {
	type noMethod Resolution
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Resolution1 struct {
	HelpCenterContent *HelpCenterContent3 `json:"helpCenterContent,omitempty"`

	Score float64 `json:"score,omitempty"`

	// Possible values:
	//   "ESCALATED"
	//   "FAILED"
	//   "RESOLUTION_STATUS_NOT_SET"
	//   "SUCCEEDED"
	Status string `json:"status,omitempty"`

	WorkflowId string `json:"workflowId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "HelpCenterContent")
	// to unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "HelpCenterContent") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *Resolution1) MarshalJSON() ([]byte, error) {
	type noMethod Resolution1
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

func (s *Resolution1) UnmarshalJSON(data []byte) error {
	type noMethod Resolution1
	var s1 struct {
		Score gensupport.JSONFloat64 `json:"score"`
		*noMethod
	}
	s1.noMethod = (*noMethod)(s)
	if err := json.Unmarshal(data, &s1); err != nil {
		return err
	}
	s.Score = float64(s1.Score)
	return nil
}

type ResolutionActivity struct {
	HelpCenterArticleId string `json:"helpCenterArticleId,omitempty"`

	// Possible values:
	//   "ESCALATED"
	//   "FAILED"
	//   "RESOLUTION_STATUS_NOT_SET"
	//   "SUCCEEDED"
	Status string `json:"status,omitempty"`

	WorkflowId string `json:"workflowId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "HelpCenterArticleId")
	// to unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "HelpCenterArticleId") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *ResolutionActivity) MarshalJSON() ([]byte, error) {
	type noMethod ResolutionActivity
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ResolutionEvent struct {
	ArticleId string `json:"articleId,omitempty"`

	Categories []*CategoryPath1 `json:"categories,omitempty"`

	Description string `json:"description,omitempty"`

	ResolutionId string `json:"resolutionId,omitempty"`

	TroubleshooterId string `json:"troubleshooterId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "ArticleId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ArticleId") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ResolutionEvent) MarshalJSON() ([]byte, error) {
	type noMethod ResolutionEvent
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ResolutionOpened struct {
	AgentActivitySource *AgentActivitySource `json:"agentActivitySource,omitempty"`

	CannedResponse *CannedResponse `json:"cannedResponse,omitempty"`

	DeepLinkSource *HelpCenterDeepLinkSource `json:"deepLinkSource,omitempty"`

	HelpCenterContent *HelpCenterContent `json:"helpCenterContent,omitempty"`

	RecentlyViewedSource *RecentlyViewedSource `json:"recentlyViewedSource,omitempty"`

	SearchSource *ResolutionSearchSource `json:"searchSource,omitempty"`

	Workflow *Workflow `json:"workflow,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AgentActivitySource")
	// to unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AgentActivitySource") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *ResolutionOpened) MarshalJSON() ([]byte, error) {
	type noMethod ResolutionOpened
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ResolutionSearchSource struct {
	Query string `json:"query,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Query") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Query") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ResolutionSearchSource) MarshalJSON() ([]byte, error) {
	type noMethod ResolutionSearchSource
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ReviewKey struct {
	Review3Id string `json:"review3Id,omitempty"`

	ReviewId string `json:"reviewId,omitempty"`

	TargetUnderReview string `json:"targetUnderReview,omitempty"`

	Token string `json:"token,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Review3Id") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Review3Id") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ReviewKey) MarshalJSON() ([]byte, error) {
	type noMethod ReviewKey
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Rma struct {
	AddressUpdateable bool `json:"addressUpdateable,omitempty"`

	BizappSubmitted bool `json:"bizappSubmitted,omitempty"`

	CaseId string `json:"caseId,omitempty"`

	DeviceId string `json:"deviceId,omitempty"`

	EmailAddress string `json:"emailAddress,omitempty"`

	ExchangeDeviceName string `json:"exchangeDeviceName,omitempty"`

	ExchangeGpn string `json:"exchangeGpn,omitempty"`

	ExtendedWarrantyClaimId string `json:"extendedWarrantyClaimId,omitempty"`

	FailureReason string `json:"failureReason,omitempty"`

	// Possible values:
	//   "FAILURE_TYPE_NOT_SET"
	//   "FAILURE_TYPE_UNKNOWN"
	//   "NOTES_INVALID"
	//   "PHONE_NUMBER_INVALID"
	//   "RMA_ALREADY_OPEN_FOR_ASSET"
	//   "SHIPPING_ADDRESS_ADDRESSEE_INVALID"
	//   "SHIPPING_ADDRESS_CITY_INVALID"
	//   "SHIPPING_ADDRESS_COUNTRY_CODE_INVALID"
	//   "SHIPPING_ADDRESS_INVALID"
	//   "SHIPPING_ADDRESS_LINE_1_INVALID"
	//   "SHIPPING_ADDRESS_LINE_2_INVALID"
	//   "SHIPPING_ADDRESS_LINE_3_INVALID"
	//   "SHIPPING_ADDRESS_POSTAL_CODE_INVALID"
	//   "SHIPPING_ADDRESS_STATE_PROVINCE_CODE_INVALID"
	//   "WALLET_ACCOUNT_REQUIRED"
	FailureType string `json:"failureType,omitempty"`

	Failures []*RmaFailure `json:"failures,omitempty"`

	Gpn string `json:"gpn,omitempty"`

	Name string `json:"name,omitempty"`

	Notes string `json:"notes,omitempty"`

	OrderNumber string `json:"orderNumber,omitempty"`

	PackingLabelRequired bool `json:"packingLabelRequired,omitempty"`

	ReasonCodeIdentifier string `json:"reasonCodeIdentifier,omitempty"`

	ReplacementCartLink string `json:"replacementCartLink,omitempty"`

	// Possible values:
	//   "ADVANCED_EXCHANGE"
	//   "EXCHANGE"
	//   "EXCHANGE_WITHOUT_RETURN"
	//   "REPAIR"
	//   "RETURN"
	//   "UNKNOWN_ACTION"
	//   "WARRANTY_REFUND"
	RmaAction string `json:"rmaAction,omitempty"`

	RmaCategory string `json:"rmaCategory,omitempty"`

	RmaId string `json:"rmaId,omitempty"`

	RmaNumber string `json:"rmaNumber,omitempty"`

	RmaSubcategory string `json:"rmaSubcategory,omitempty"`

	RmaType string `json:"rmaType,omitempty"`

	ShipmentId string `json:"shipmentId,omitempty"`

	ShippingAddress *MailingAddress `json:"shippingAddress,omitempty"`

	ShippingLabelRequired bool `json:"shippingLabelRequired,omitempty"`

	// Possible values:
	//   "FEDEX"
	//   "UNKNOWN_SHIPPING_PROVIDER"
	//   "UPS"
	ShippingProvider string `json:"shippingProvider,omitempty"`

	ShippingTrackingNumber string `json:"shippingTrackingNumber,omitempty"`

	// Possible values:
	//   "RMA_CANCELLED"
	//   "RMA_COMPLETED"
	//   "RMA_INCOMPLETE"
	//   "RMA_PENDING"
	//   "RMA_SUBMITTED"
	//   "UNKNOWN_RMA_STATE"
	State string `json:"state,omitempty"`

	SubmitTime string `json:"submitTime,omitempty"`

	WarrantyException string `json:"warrantyException,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "AddressUpdateable")
	// to unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AddressUpdateable") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *Rma) MarshalJSON() ([]byte, error) {
	type noMethod Rma
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type RmaCategory struct {
	CategoryName string `json:"categoryName,omitempty"`

	Disabled bool `json:"disabled,omitempty"`

	ReasonCodes []*RmaReasonCode `json:"reasonCodes,omitempty"`

	Subcategories []string `json:"subcategories,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CategoryName") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CategoryName") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *RmaCategory) MarshalJSON() ([]byte, error) {
	type noMethod RmaCategory
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type RmaDescription struct {
	Notes string `json:"notes,omitempty"`

	// Possible values:
	//   "ADVANCED_EXCHANGE"
	//   "EXCHANGE"
	//   "EXCHANGE_WITHOUT_RETURN"
	//   "REPAIR"
	//   "RETURN"
	//   "UNKNOWN_ACTION"
	//   "WARRANTY_REFUND"
	RmaAction string `json:"rmaAction,omitempty"`

	RmaCategory string `json:"rmaCategory,omitempty"`

	RmaSubcategory string `json:"rmaSubcategory,omitempty"`

	RmaType string `json:"rmaType,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Notes") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Notes") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *RmaDescription) MarshalJSON() ([]byte, error) {
	type noMethod RmaDescription
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type RmaDevice struct {
	DeviceId string `json:"deviceId,omitempty"`

	DeviceName string `json:"deviceName,omitempty"`

	HashedFullDeviceId string `json:"hashedFullDeviceId,omitempty"`

	ShipmentInfo *ShippingInfo1 `json:"shipmentInfo,omitempty"`

	// ForceSendFields is a list of field names (e.g. "DeviceId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "DeviceId") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *RmaDevice) MarshalJSON() ([]byte, error) {
	type noMethod RmaDevice
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type RmaFailure struct {
	FailureExceptionMessage string `json:"failureExceptionMessage,omitempty"`

	// Possible values:
	//   "FAILURE_TYPE_NOT_SET"
	//   "FAILURE_TYPE_UNKNOWN"
	//   "NOTES_INVALID"
	//   "PHONE_NUMBER_INVALID"
	//   "RMA_ALREADY_OPEN_FOR_ASSET"
	//   "SHIPPING_ADDRESS_ADDRESSEE_INVALID"
	//   "SHIPPING_ADDRESS_CITY_INVALID"
	//   "SHIPPING_ADDRESS_COUNTRY_CODE_INVALID"
	//   "SHIPPING_ADDRESS_INVALID"
	//   "SHIPPING_ADDRESS_LINE_1_INVALID"
	//   "SHIPPING_ADDRESS_LINE_2_INVALID"
	//   "SHIPPING_ADDRESS_LINE_3_INVALID"
	//   "SHIPPING_ADDRESS_POSTAL_CODE_INVALID"
	//   "SHIPPING_ADDRESS_STATE_PROVINCE_CODE_INVALID"
	//   "WALLET_ACCOUNT_REQUIRED"
	FailureType string `json:"failureType,omitempty"`

	// Possible values:
	//   "INVALID"
	//   "TOO_LONG"
	//   "VALIDATION_FAILURE_NOT_SET"
	ValidationReason string `json:"validationReason,omitempty"`

	// ForceSendFields is a list of field names (e.g.
	// "FailureExceptionMessage") to unconditionally include in API
	// requests. By default, fields with empty values are omitted from API
	// requests. However, any non-pointer, non-interface field appearing in
	// ForceSendFields will be sent to the server regardless of whether the
	// field is empty or not. This may be used to include empty fields in
	// Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "FailureExceptionMessage")
	// to include in API requests with the JSON null value. By default,
	// fields with empty values are omitted from API requests. However, any
	// field with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *RmaFailure) MarshalJSON() ([]byte, error) {
	type noMethod RmaFailure
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type RmaIdentifier struct {
	RmaId string `json:"rmaId,omitempty"`

	RmaNumber string `json:"rmaNumber,omitempty"`

	// ForceSendFields is a list of field names (e.g. "RmaId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "RmaId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *RmaIdentifier) MarshalJSON() ([]byte, error) {
	type noMethod RmaIdentifier
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type RmaInfo struct {
	OriginalRmaNumber string `json:"originalRmaNumber,omitempty"`

	// Possible values:
	//   "RMA_CANCELLED"
	//   "RMA_COMPLETED"
	//   "RMA_INCOMPLETE"
	//   "RMA_PENDING"
	//   "RMA_STATE_NOT_SET"
	//   "RMA_SUBMITTED"
	OriginalRmaState string `json:"originalRmaState,omitempty"`

	ReplacementRmaNumber string `json:"replacementRmaNumber,omitempty"`

	// Possible values:
	//   "ADVANCED_EXCHANGE"
	//   "EXCHANGE"
	//   "EXCHANGE_WITHOUT_RETURN"
	//   "REPAIR"
	//   "RETURN"
	//   "RMA_ACTION_NOT_SET"
	//   "WARRANTY_REFUND"
	RmaAction string `json:"rmaAction,omitempty"`

	// ForceSendFields is a list of field names (e.g. "OriginalRmaNumber")
	// to unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "OriginalRmaNumber") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *RmaInfo) MarshalJSON() ([]byte, error) {
	type noMethod RmaInfo
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type RmaOrderDetail struct {
	// Possible values:
	//   "ACTION_NOT_SET"
	//   "CANCEL_AUTH_HOLD"
	//   "CANCEL_RMA"
	//   "MARK_ORIGINAL_DEVICE_RECEIVED_IN_STANDARD_EXCHANGE"
	//   "OTHER_ACTIONS_REQUIRE_AUTH"
	//   "REGENERATE_CART_LINK"
	//   "RESEND_PACKING_LABEL"
	//   "RESEND_SHIPPING_LABEL"
	//   "SEND_STATUS"
	Actions []string `json:"actions,omitempty"`

	AuthHold bool `json:"authHold,omitempty"`

	Description *RmaDescription `json:"description,omitempty"`

	OriginalDevice *RmaDevice `json:"originalDevice,omitempty"`

	OriginalOrderId string `json:"originalOrderId,omitempty"`

	OriginalShipmentId string `json:"originalShipmentId,omitempty"`

	RefundDetails *RefundDetail `json:"refundDetails,omitempty"`

	ReplacementDevice *RmaDevice `json:"replacementDevice,omitempty"`

	ReplacementOrderId string `json:"replacementOrderId,omitempty"`

	ReplacementShipmentId string `json:"replacementShipmentId,omitempty"`

	// Possible values:
	//   "CANCEL_AUTH_HOLD_PENDING"
	//   "CLOSED"
	//   "PENDING_RETURN"
	//   "RECEIVED_OLD_DEVICE"
	//   "REFUND_PENDING"
	//   "RMA_INCOMPLETE"
	//   "STATUS_NOT_SET"
	//   "STATUS_UNAVAILABLE"
	Status string `json:"status,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Actions") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Actions") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *RmaOrderDetail) MarshalJSON() ([]byte, error) {
	type noMethod RmaOrderDetail
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type RmaReasonCode struct {
	Id string `json:"id,omitempty"`

	Subcategory string `json:"subcategory,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Id") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Id") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *RmaReasonCode) MarshalJSON() ([]byte, error) {
	type noMethod RmaReasonCode
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type RmaType struct {
	// Possible values:
	//   "ADVANCED_EXCHANGE"
	//   "EXCHANGE"
	//   "EXCHANGE_WITHOUT_RETURN"
	//   "REPAIR"
	//   "RETURN"
	//   "UNKNOWN_ACTION"
	//   "WARRANTY_REFUND"
	Actions []string `json:"actions,omitempty"`

	RmaCategories []*RmaCategory `json:"rmaCategories,omitempty"`

	TypeName string `json:"typeName,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Actions") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Actions") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *RmaType) MarshalJSON() ([]byte, error) {
	type noMethod RmaType
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type RouteRequest struct {
	Locale string `json:"locale,omitempty"`

	ProductId string `json:"productId,omitempty"`

	Reason string `json:"reason,omitempty"`

	RoutingId string `json:"routingId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Locale") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Locale") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *RouteRequest) MarshalJSON() ([]byte, error) {
	type noMethod RouteRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type RouteResponse struct {
	Case *Case `json:"case,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Case") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Case") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *RouteResponse) MarshalJSON() ([]byte, error) {
	type noMethod RouteResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type RoutingInfo struct {
	AgentTransfer *AgentTransfer `json:"agentTransfer,omitempty"`

	ChatTransfer *ChatTransfer `json:"chatTransfer,omitempty"`

	LocaleTransfer *LocaleTransfer `json:"localeTransfer,omitempty"`

	ProductTransfer *ProductTransfer `json:"productTransfer,omitempty"`

	RoutingTargetName string `json:"routingTargetName,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AgentTransfer") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AgentTransfer") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *RoutingInfo) MarshalJSON() ([]byte, error) {
	type noMethod RoutingInfo
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type RoutingTarget struct {
	Chat *Chat1 `json:"chat,omitempty"`

	Email *Email2 `json:"email,omitempty"`

	TargetId string `json:"targetId,omitempty"`

	TargetName string `json:"targetName,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Chat") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Chat") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *RoutingTarget) MarshalJSON() ([]byte, error) {
	type noMethod RoutingTarget
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type RunRmaStepsRequest struct {
	// Possible values:
	//   "ADVANCED_EXCHANGE"
	//   "EXCHANGE"
	//   "EXCHANGE_WITHOUT_RETURN"
	//   "REPAIR"
	//   "RETURN"
	//   "UNKNOWN_ACTION"
	//   "WARRANTY_REFUND"
	Action string `json:"action,omitempty"`

	CaseId string `json:"caseId,omitempty"`

	DraftMessageId string `json:"draftMessageId,omitempty"`

	ShippingAddress *MailingAddress `json:"shippingAddress,omitempty"`

	SkipAddressValidation bool `json:"skipAddressValidation,omitempty"`

	SsoCookie string `json:"ssoCookie,omitempty"`

	// Possible values:
	//   "GENERATE_PACKING_LABEL_STEP"
	//   "GENERATE_REPLACEMENT_CART_LINK_STEP"
	//   "GENERATE_SHIPPING_LABEL_STEP"
	//   "RMA_RUN_STEP_NOT_SET"
	//   "UNKNOWN_RMA_STEP"
	//   "UPDATE_ADDRESS_AND_SEND_SHIPPING_EMAIL_STEP"
	Steps []string `json:"steps,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Action") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Action") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *RunRmaStepsRequest) MarshalJSON() ([]byte, error) {
	type noMethod RunRmaStepsRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type RunRmaStepsResponse struct {
	DraftMessageId string `json:"draftMessageId,omitempty"`

	Rma *Rma `json:"rma,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "DraftMessageId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "DraftMessageId") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *RunRmaStepsResponse) MarshalJSON() ([]byte, error) {
	type noMethod RunRmaStepsResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type RunWorkflowRequest struct {
	CaseId string `json:"caseId,omitempty"`

	DraftMessageId string `json:"draftMessageId,omitempty"`

	RmaId string `json:"rmaId,omitempty"`

	RmaNumber string `json:"rmaNumber,omitempty"`

	ShippingAddress *MailingAddress `json:"shippingAddress,omitempty"`

	SsoCookie string `json:"ssoCookie,omitempty"`

	// Possible values:
	//   "GENERATE_PACKING_LABEL"
	//   "GENERATE_REPLACEMENT_CART_LINK"
	//   "GENERATE_SHIPPING_LABEL"
	//   "SUBMIT_RMA"
	//   "UNKNOWN_FLOW"
	//   "UPDATE_ADDRESS_AND_SEND_SHIPPING_EMAIL"
	Steps []string `json:"steps,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *RunWorkflowRequest) MarshalJSON() ([]byte, error) {
	type noMethod RunWorkflowRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type RunWorkflowResponse struct {
	Result *WorkflowResult `json:"result,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Result") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Result") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *RunWorkflowResponse) MarshalJSON() ([]byte, error) {
	type noMethod RunWorkflowResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type SaveRmaRequest struct {
	Rma *Rma `json:"rma,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Rma") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Rma") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *SaveRmaRequest) MarshalJSON() ([]byte, error) {
	type noMethod SaveRmaRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type SaveRmaResponse struct {
	Rma *Rma `json:"rma,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Rma") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Rma") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *SaveRmaResponse) MarshalJSON() ([]byte, error) {
	type noMethod SaveRmaResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Search struct {
	DisplayName string `json:"displayName,omitempty"`

	Name string `json:"name,omitempty"`

	SearchId string `json:"searchId,omitempty"`

	TeamId string `json:"teamId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "DisplayName") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "DisplayName") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Search) MarshalJSON() ([]byte, error) {
	type noMethod Search
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type SearchAccountReviewsRequest struct {
	CaseId string `json:"caseId,omitempty"`

	SsoCookie string `json:"ssoCookie,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *SearchAccountReviewsRequest) MarshalJSON() ([]byte, error) {
	type noMethod SearchAccountReviewsRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type SearchAccountReviewsResponse struct {
	Review []*AccountReview `json:"review,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Review") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Review") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *SearchAccountReviewsResponse) MarshalJSON() ([]byte, error) {
	type noMethod SearchAccountReviewsResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type SearchCategoryInfosResponse struct {
	CategoryInfos []*CategoryInfo `json:"categoryInfos,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "CategoryInfos") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CategoryInfos") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *SearchCategoryInfosResponse) MarshalJSON() ([]byte, error) {
	type noMethod SearchCategoryInfosResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type SearchCount struct {
	// Possible values:
	//   "ASSIGNED"
	//   "UNKNOWN_CASE_TYPE"
	//   "WAITING"
	CasesType string `json:"casesType,omitempty"`

	// Possible values:
	//   "NONE"
	//   "OVERDUE"
	//   "UNKNOWN_DUE_BY_STATUS"
	//   "URGENT"
	DueByStatus string `json:"dueByStatus,omitempty"`

	SearchCount int64 `json:"searchCount,omitempty,string"`

	// ForceSendFields is a list of field names (e.g. "CasesType") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CasesType") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *SearchCount) MarshalJSON() ([]byte, error) {
	type noMethod SearchCount
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type SearchMultipleCategoryInfosRequest struct {
	FilterConsultCategories bool `json:"filterConsultCategories,omitempty"`

	MaximumResults int64 `json:"maximumResults,omitempty"`

	ProductIds []string `json:"productIds,omitempty"`

	Query string `json:"query,omitempty"`

	TopCategoryPaths []*CategoryPath `json:"topCategoryPaths,omitempty"`

	// ForceSendFields is a list of field names (e.g.
	// "FilterConsultCategories") to unconditionally include in API
	// requests. By default, fields with empty values are omitted from API
	// requests. However, any non-pointer, non-interface field appearing in
	// ForceSendFields will be sent to the server regardless of whether the
	// field is empty or not. This may be used to include empty fields in
	// Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "FilterConsultCategories")
	// to include in API requests with the JSON null value. By default,
	// fields with empty values are omitted from API requests. However, any
	// field with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *SearchMultipleCategoryInfosRequest) MarshalJSON() ([]byte, error) {
	type noMethod SearchMultipleCategoryInfosRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type SearchOrdersRequest struct {
	CaseId string `json:"caseId,omitempty"`

	CustomerEmail string `json:"customerEmail,omitempty"`

	EndAmount *Money `json:"endAmount,omitempty"`

	EndDate string `json:"endDate,omitempty"`

	IncludeFreeOrders bool `json:"includeFreeOrders,omitempty"`

	InstrumentLastFourCharacters string `json:"instrumentLastFourCharacters,omitempty"`

	Locale string `json:"locale,omitempty"`

	PageSize int64 `json:"pageSize,omitempty"`

	PageToken string `json:"pageToken,omitempty"`

	Q string `json:"q,omitempty"`

	QueryId string `json:"queryId,omitempty"`

	SsoCookie string `json:"ssoCookie,omitempty"`

	StartAmount *Money `json:"startAmount,omitempty"`

	StartDate string `json:"startDate,omitempty"`

	SubscriptionId string `json:"subscriptionId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *SearchOrdersRequest) MarshalJSON() ([]byte, error) {
	type noMethod SearchOrdersRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type SearchOrdersResponse struct {
	NextPageToken string `json:"nextPageToken,omitempty"`

	Orders []*Order `json:"orders,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "NextPageToken") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "NextPageToken") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *SearchOrdersResponse) MarshalJSON() ([]byte, error) {
	type noMethod SearchOrdersResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type SearchSetting struct {
	ActiveTeamSearches []*TeamSearches `json:"activeTeamSearches,omitempty"`

	DisabledTeamSearches []*TeamSearches `json:"disabledTeamSearches,omitempty"`

	EnableAssignStream bool `json:"enableAssignStream,omitempty"`

	Name string `json:"name,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "ActiveTeamSearches")
	// to unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ActiveTeamSearches") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *SearchSetting) MarshalJSON() ([]byte, error) {
	type noMethod SearchSetting
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type SendEmailRequest struct {
	CaseId string `json:"caseId,omitempty"`

	SendDelay string `json:"sendDelay,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *SendEmailRequest) MarshalJSON() ([]byte, error) {
	type noMethod SendEmailRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type SendEmailResponse struct {
	Communication *Communication `json:"communication,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Communication") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Communication") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *SendEmailResponse) MarshalJSON() ([]byte, error) {
	type noMethod SendEmailResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type SendRmaRequest struct {
	DraftMessageId string `json:"draftMessageId,omitempty"`

	Rma *Rma `json:"rma,omitempty"`

	SkipAddressValidation bool `json:"skipAddressValidation,omitempty"`

	SsoCookie string `json:"ssoCookie,omitempty"`

	// ForceSendFields is a list of field names (e.g. "DraftMessageId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "DraftMessageId") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *SendRmaRequest) MarshalJSON() ([]byte, error) {
	type noMethod SendRmaRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type SendRmaResponse struct {
	DraftMessageId string `json:"draftMessageId,omitempty"`

	Rma *Rma `json:"rma,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "DraftMessageId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "DraftMessageId") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *SendRmaResponse) MarshalJSON() ([]byte, error) {
	type noMethod SendRmaResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type SetCallbackNumberRequest struct {
	PhoneNumber *PhoneNumber `json:"phoneNumber,omitempty"`

	// ForceSendFields is a list of field names (e.g. "PhoneNumber") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "PhoneNumber") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *SetCallbackNumberRequest) MarshalJSON() ([]byte, error) {
	type noMethod SetCallbackNumberRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type SetCallbackNumberResponse struct {
	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`
}

type Settings struct {
	AuthenticationSettings *AuthenticationSettings `json:"authenticationSettings,omitempty"`

	ConsultSettings *ConsultSettings `json:"consultSettings,omitempty"`

	DisplayName string `json:"displayName,omitempty"`

	// Possible values:
	//   "DUE_TIME_CALCULATION_METHOD_NOT_SET"
	//   "RESOLUTION_TARGET"
	//   "SLA"
	DueTimeCalculationMethod string `json:"dueTimeCalculationMethod,omitempty"`

	EasterEggSettings *EasterEggSettings `json:"easterEggSettings,omitempty"`

	EscalateSettings *EscalateSettings `json:"escalateSettings,omitempty"`

	ExternalToolSettings *ExternalToolSettings `json:"externalToolSettings,omitempty"`

	FeedbackProductId string `json:"feedbackProductId,omitempty"`

	IssueCategorySettings *IssueCategorySettings `json:"issueCategorySettings,omitempty"`

	Name string `json:"name,omitempty"`

	ProductId string `json:"productId,omitempty"`

	ProductName string `json:"productName,omitempty"`

	SupportedLocales []string `json:"supportedLocales,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g.
	// "AuthenticationSettings") to unconditionally include in API requests.
	// By default, fields with empty values are omitted from API requests.
	// However, any non-pointer, non-interface field appearing in
	// ForceSendFields will be sent to the server regardless of whether the
	// field is empty or not. This may be used to include empty fields in
	// Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AuthenticationSettings")
	// to include in API requests with the JSON null value. By default,
	// fields with empty values are omitted from API requests. However, any
	// field with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *Settings) MarshalJSON() ([]byte, error) {
	type noMethod Settings
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ShippingAddress struct {
	Address *PhysicalMailingAddress `json:"address,omitempty"`

	AddressLines []string `json:"addressLines,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Address") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Address") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ShippingAddress) MarshalJSON() ([]byte, error) {
	type noMethod ShippingAddress
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ShippingCustomerName struct {
	CustomerName string `json:"customerName,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "CustomerName") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CustomerName") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ShippingCustomerName) MarshalJSON() ([]byte, error) {
	type noMethod ShippingCustomerName
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ShippingCustomerPhoneNumber struct {
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "PhoneNumber") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "PhoneNumber") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ShippingCustomerPhoneNumber) MarshalJSON() ([]byte, error) {
	type noMethod ShippingCustomerPhoneNumber
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ShippingInfo struct {
	ActualDeliveryTime string `json:"actualDeliveryTime,omitempty"`

	ActualShipDate *Date `json:"actualShipDate,omitempty"`

	CarrierName string `json:"carrierName,omitempty"`

	EstimatedDeliveryEndDate *Date `json:"estimatedDeliveryEndDate,omitempty"`

	EstimatedDeliveryStartDate *Date `json:"estimatedDeliveryStartDate,omitempty"`

	EstimatedShipDate *Date `json:"estimatedShipDate,omitempty"`

	IsDelivered bool `json:"isDelivered,omitempty"`

	IsPastEstimatedDeliveryDate bool `json:"isPastEstimatedDeliveryDate,omitempty"`

	LastEventTime string `json:"lastEventTime,omitempty"`

	// Possible values:
	//   "BUDGET_GROUND"
	//   "GROUND"
	//   "INTERNATIONAL_PRIORITY"
	//   "OVERNIGHT"
	//   "SHIPPING_TYPE_NOT_SET"
	//   "STANDARD"
	//   "TWO_DAY_AIR"
	ShippingType string `json:"shippingType,omitempty"`

	TotalAmount *Money `json:"totalAmount,omitempty"`

	TrackingNumber string `json:"trackingNumber,omitempty"`

	// ForceSendFields is a list of field names (e.g. "ActualDeliveryTime")
	// to unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ActualDeliveryTime") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *ShippingInfo) MarshalJSON() ([]byte, error) {
	type noMethod ShippingInfo
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ShippingInfo1 struct {
	ActualDeliveryTime string `json:"actualDeliveryTime,omitempty"`

	ActualShipDate *Date `json:"actualShipDate,omitempty"`

	CarrierName string `json:"carrierName,omitempty"`

	EstimatedDeliveryEndDate *Date `json:"estimatedDeliveryEndDate,omitempty"`

	EstimatedDeliveryStartDate *Date `json:"estimatedDeliveryStartDate,omitempty"`

	EstimatedShipDate *Date `json:"estimatedShipDate,omitempty"`

	// Possible values:
	//   "NOT_YET_SHIPPED"
	//   "SHIPMENT_ERROR"
	//   "SHIPPED"
	//   "SHIPPING_INFO_STATE_NOT_SET"
	ShipmentState string `json:"shipmentState,omitempty"`

	TrackingNumber string `json:"trackingNumber,omitempty"`

	TrackingUrl string `json:"trackingUrl,omitempty"`

	// ForceSendFields is a list of field names (e.g. "ActualDeliveryTime")
	// to unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ActualDeliveryTime") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *ShippingInfo1) MarshalJSON() ([]byte, error) {
	type noMethod ShippingInfo1
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ShmoovieSignals struct {
	Episode string `json:"episode,omitempty"`

	ExpireTimeFromPurchaseTime string `json:"expireTimeFromPurchaseTime,omitempty"`

	LocalizedExpireTimeFromPurchaseTime *LocalizedTimestamp `json:"localizedExpireTimeFromPurchaseTime,omitempty"`

	LocalizedRentalExpireTime *LocalizedTimestamp `json:"localizedRentalExpireTime,omitempty"`

	LocalizedRentalStartWatchByTime *LocalizedTimestamp `json:"localizedRentalStartWatchByTime,omitempty"`

	LocalizedRentalStartWatchTime *LocalizedTimestamp `json:"localizedRentalStartWatchTime,omitempty"`

	// Possible values:
	//   "PURCHASE"
	//   "RENTAL"
	//   "SELLING_MODEL_UNKNOWN"
	Model string `json:"model,omitempty"`

	Price *Money `json:"price,omitempty"`

	RentalExpireTime string `json:"rentalExpireTime,omitempty"`

	RentalStartWatchByTime string `json:"rentalStartWatchByTime,omitempty"`

	RentalStartWatchTime string `json:"rentalStartWatchTime,omitempty"`

	Season string `json:"season,omitempty"`

	// Possible values:
	//   "GOOGLE_PLAY"
	//   "SHMOOVIE_SOURCE_UNKNOWN"
	//   "YOUTUBE"
	Source string `json:"source,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Episode") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Episode") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ShmoovieSignals) MarshalJSON() ([]byte, error) {
	type noMethod ShmoovieSignals
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ShowSummaryAction struct {
	// Possible values:
	//   "ACCOUNT_INFO_UNSPECIFIED"
	//   "ALERT_REVIEW"
	AccountInfo []string `json:"accountInfo,omitempty"`

	DeclinedTxCount int64 `json:"declinedTxCount,omitempty"`

	PendingTxCount int64 `json:"pendingTxCount,omitempty"`

	RecentStartTime string `json:"recentStartTime,omitempty"`

	RejectedTxCount int64 `json:"rejectedTxCount,omitempty"`

	SearchContext string `json:"searchContext,omitempty"`

	TransactionNotFoundDifmId int64 `json:"transactionNotFoundDifmId,omitempty"`

	TransactionNotFoundScriptId int64 `json:"transactionNotFoundScriptId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AccountInfo") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AccountInfo") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ShowSummaryAction) MarshalJSON() ([]byte, error) {
	type noMethod ShowSummaryAction
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type SidewinderRole struct {
	IsOnsite bool `json:"isOnsite,omitempty"`

	// ForceSendFields is a list of field names (e.g. "IsOnsite") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "IsOnsite") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *SidewinderRole) MarshalJSON() ([]byte, error) {
	type noMethod SidewinderRole
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Source struct {
	AgentEmailAddress string `json:"agentEmailAddress,omitempty"`

	AtlasProduct string `json:"atlasProduct,omitempty"`

	// Possible values:
	//   "BACKEND"
	//   "CHAT"
	//   "EMAIL_PROCESSOR"
	//   "FINISHER"
	//   "OUTBOX_SENDER"
	//   "QUALITY_REVIEW_SELECTOR"
	//   "UNKNOWN_CASES_SERVICE"
	//   "WIPEOUT"
	CasesService string `json:"casesService,omitempty"`

	// Possible values:
	//   "CUF"
	//   "MEDLEY"
	//   "MOJO"
	//   "UDS"
	//   "UNKNOWN_EXTERNAL_SERVICE"
	ExternalService string `json:"externalService,omitempty"`

	RobotEmailAddress string `json:"robotEmailAddress,omitempty"`

	RoutingRuleId string `json:"routingRuleId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AgentEmailAddress")
	// to unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AgentEmailAddress") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *Source) MarshalJSON() ([]byte, error) {
	type noMethod Source
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type SpamRequest struct {
}

type SpamResponse struct {
	Case *Case `json:"case,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Case") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Case") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *SpamResponse) MarshalJSON() ([]byte, error) {
	type noMethod SpamResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type SplitRequest struct {
	CommunicationId string `json:"communicationId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CommunicationId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CommunicationId") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *SplitRequest) MarshalJSON() ([]byte, error) {
	type noMethod SplitRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type SplitResponse struct {
	SourceCase *Case `json:"sourceCase,omitempty"`

	TargetCase *Case `json:"targetCase,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "SourceCase") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "SourceCase") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *SplitResponse) MarshalJSON() ([]byte, error) {
	type noMethod SplitResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type SplitTender struct {
	Amount *Money `json:"amount,omitempty"`

	Instrument string `json:"instrument,omitempty"`

	// Possible values:
	//   "CANCELLED"
	//   "CHARGED"
	//   "CHARGED_BACK"
	//   "DECLINED"
	//   "OTHER_STATUS"
	//   "PENDING"
	//   "REFUNDED"
	//   "REJECTED"
	//   "UNKNOWN_WALLET_TRANSACTION_STATUS"
	Status string `json:"status,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Amount") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Amount") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *SplitTender) MarshalJSON() ([]byte, error) {
	type noMethod SplitTender
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Status struct {
	Code int64 `json:"code,omitempty"`

	Details []googleapi.RawMessage `json:"details,omitempty"`

	Message string `json:"message,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Code") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Code") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Status) MarshalJSON() ([]byte, error) {
	type noMethod Status
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type StepResult struct {
	ErrorMessage string `json:"errorMessage,omitempty"`

	// Possible values:
	//   "FAILED"
	//   "NOT_PROCESSED"
	//   "SUCCESSFUL"
	//   "UNKNOWN_STEP_STATUS"
	Status string `json:"status,omitempty"`

	// Possible values:
	//   "GENERATE_PACKING_LABEL"
	//   "GENERATE_REPLACEMENT_CART_LINK"
	//   "GENERATE_SHIPPING_LABEL"
	//   "SUBMIT_RMA"
	//   "UNKNOWN_FLOW"
	//   "UPDATE_ADDRESS_AND_SEND_SHIPPING_EMAIL"
	Step string `json:"step,omitempty"`

	// ForceSendFields is a list of field names (e.g. "ErrorMessage") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ErrorMessage") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *StepResult) MarshalJSON() ([]byte, error) {
	type noMethod StepResult
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type SubmitRmaRequest struct {
	DraftMessageId string `json:"draftMessageId,omitempty"`

	Rma *Rma `json:"rma,omitempty"`

	SsoCookie string `json:"ssoCookie,omitempty"`

	// ForceSendFields is a list of field names (e.g. "DraftMessageId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "DraftMessageId") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *SubmitRmaRequest) MarshalJSON() ([]byte, error) {
	type noMethod SubmitRmaRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type SubmitRmaResponse struct {
	DraftMessageId string `json:"draftMessageId,omitempty"`

	IsDraftMessageUpdated bool `json:"isDraftMessageUpdated,omitempty"`

	Rma *Rma `json:"rma,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "DraftMessageId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "DraftMessageId") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *SubmitRmaResponse) MarshalJSON() ([]byte, error) {
	type noMethod SubmitRmaResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Subscription struct {
	Amount *Money `json:"amount,omitempty"`

	// Possible values:
	//   "BILLING_PERIOD_UNSPECIFIED"
	//   "DAY"
	//   "HOUR"
	//   "MONTH"
	//   "SEASONAL"
	//   "SIX_MONTHS"
	//   "THREE_MONTHS"
	//   "WEEK"
	//   "YEAR"
	BillingPeriod string `json:"billingPeriod,omitempty"`

	CancelDate string `json:"cancelDate,omitempty"`

	Docid *Docid `json:"docid,omitempty"`

	FirstChargedDate string `json:"firstChargedDate,omitempty"`

	Id string `json:"id,omitempty"`

	IsTrial bool `json:"isTrial,omitempty"`

	// Possible values:
	//   "BUNDLED"
	//   "GROUP_LICENSE"
	//   "LICENSE"
	//   "NONE"
	//   "OFFER_TYPE_UNSPECIFIED"
	//   "PREORDER"
	//   "PURCHASE"
	//   "PURCHASE_HIGH_DEF"
	//   "RENTAL"
	//   "RENTAL_HIGH_DEF"
	//   "SAMPLE"
	//   "SUBSCRIPTION"
	//   "SUBSCRIPTION_CONTENT"
	OfferType string `json:"offerType,omitempty"`

	PaymentDeclinedDate string `json:"paymentDeclinedDate,omitempty"`

	PurchaseIds []string `json:"purchaseIds,omitempty"`

	RenewDate string `json:"renewDate,omitempty"`

	// Possible values:
	//   "ACTIVE"
	//   "CANCELED"
	//   "EXPIRED"
	//   "IN_GRACE_PERIOD"
	//   "SUBSCRIPTION_STATE_UNSPECIFIED"
	State string `json:"state,omitempty"`

	TerminateDate string `json:"terminateDate,omitempty"`

	Title string `json:"title,omitempty"`

	// Possible values:
	//   "ANDROID_APPS"
	//   "BOOKS"
	//   "COMMERCE"
	//   "DEVICES"
	//   "MAGAZINES"
	//   "MOVIES_AND_TV"
	//   "MULTI_CONTAINER"
	//   "MUSIC"
	//   "VERTICAL_UNSPECIFIED"
	Vertical string `json:"vertical,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Amount") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Amount") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Subscription) MarshalJSON() ([]byte, error) {
	type noMethod Subscription
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type SubscriptionComponent struct {
	ComponentData *ComponentData `json:"componentData,omitempty"`

	Name string `json:"name,omitempty"`

	Token *ComponentToken `json:"token,omitempty"`

	// ForceSendFields is a list of field names (e.g. "ComponentData") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ComponentData") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *SubscriptionComponent) MarshalJSON() ([]byte, error) {
	type noMethod SubscriptionComponent
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type SubscriptionSignals struct {
	FeatureExpireTime string `json:"featureExpireTime,omitempty"`

	FreeTrialPeriod *Period `json:"freeTrialPeriod,omitempty"`

	IntroductoryPeriod *Period `json:"introductoryPeriod,omitempty"`

	IntroductoryPrice *Money `json:"introductoryPrice,omitempty"`

	LocalizedFeatureExpireTime *LocalizedTimestamp `json:"localizedFeatureExpireTime,omitempty"`

	LocalizedNextPaymentTime *LocalizedTimestamp `json:"localizedNextPaymentTime,omitempty"`

	NextPaymentTime string `json:"nextPaymentTime,omitempty"`

	PricePerMonth *Money `json:"pricePerMonth,omitempty"`

	// ForceSendFields is a list of field names (e.g. "FeatureExpireTime")
	// to unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "FeatureExpireTime") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *SubscriptionSignals) MarshalJSON() ([]byte, error) {
	type noMethod SubscriptionSignals
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type SuggestNewEmailHeadersResponse struct {
	FromHeaders []*Contact `json:"fromHeaders,omitempty"`

	ToHeaders []*Contact `json:"toHeaders,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "FromHeaders") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "FromHeaders") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *SuggestNewEmailHeadersResponse) MarshalJSON() ([]byte, error) {
	type noMethod SuggestNewEmailHeadersResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type SuggestNoteHeadersResponse struct {
	FromHeaders []*Contact `json:"fromHeaders,omitempty"`

	ToHeaders []*Contact `json:"toHeaders,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "FromHeaders") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "FromHeaders") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *SuggestNoteHeadersResponse) MarshalJSON() ([]byte, error) {
	type noMethod SuggestNoteHeadersResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type SuggestPaymentInstrumentIssuerResponse struct {
	Suggestions []*PaymentsSuggestion `json:"suggestions,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Suggestions") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Suggestions") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *SuggestPaymentInstrumentIssuerResponse) MarshalJSON() ([]byte, error) {
	type noMethod SuggestPaymentInstrumentIssuerResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type SuggestReplyEmailHeadersResponse struct {
	CcHeaders []*Contact `json:"ccHeaders,omitempty"`

	FromHeaders []*Contact `json:"fromHeaders,omitempty"`

	ToHeaders []*Contact `json:"toHeaders,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "CcHeaders") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CcHeaders") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *SuggestReplyEmailHeadersResponse) MarshalJSON() ([]byte, error) {
	type noMethod SuggestReplyEmailHeadersResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type SuggestResolutionsRequest struct {
	CaseId string `json:"caseId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *SuggestResolutionsRequest) MarshalJSON() ([]byte, error) {
	type noMethod SuggestResolutionsRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type SuggestResolutionsResponse struct {
	Resolutions []*SuggestedResolution `json:"resolutions,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Resolutions") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Resolutions") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *SuggestResolutionsResponse) MarshalJSON() ([]byte, error) {
	type noMethod SuggestResolutionsResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type SuggestedResolution struct {
	Id string `json:"id,omitempty"`

	// Possible values:
	//   "CANNED_RESPONSE"
	//   "EXTERNAL_HC"
	//   "INTERNAL_HC"
	//   "SUGGESTED_RESOLUTION_TYPE_UNSPECIFIED"
	//   "TROUBLESHOOTER"
	//   "WORKFLOW"
	Type string `json:"type,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Id") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Id") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *SuggestedResolution) MarshalJSON() ([]byte, error) {
	type noMethod SuggestedResolution
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type SummarizeResponse struct {
	AdwordsCid bool `json:"adwordsCid,omitempty"`

	EmailAddress bool `json:"emailAddress,omitempty"`

	Summary *Summary `json:"summary,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "AdwordsCid") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AdwordsCid") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *SummarizeResponse) MarshalJSON() ([]byte, error) {
	type noMethod SummarizeResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Summary struct {
	CasesByChannel []*ChannelCount `json:"casesByChannel,omitempty"`

	CasesByProduct []*ProductCount `json:"casesByProduct,omitempty"`

	MostRecentClosedCase *Interaction `json:"mostRecentClosedCase,omitempty"`

	MostRecentOpenCase *Interaction `json:"mostRecentOpenCase,omitempty"`

	OpenCases *InteractionCount `json:"openCases,omitempty"`

	TotalCases *InteractionCount `json:"totalCases,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CasesByChannel") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CasesByChannel") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *Summary) MarshalJSON() ([]byte, error) {
	type noMethod Summary
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type SupportLink struct {
	DisplayName string `json:"displayName,omitempty"`

	LinkUrl string `json:"linkUrl,omitempty"`

	// ForceSendFields is a list of field names (e.g. "DisplayName") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "DisplayName") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *SupportLink) MarshalJSON() ([]byte, error) {
	type noMethod SupportLink
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type TakeRequest struct {
}

type TakeResponse struct {
	Case *Case `json:"case,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Case") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Case") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *TakeResponse) MarshalJSON() ([]byte, error) {
	type noMethod TakeResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Tax struct {
	Amount *Money `json:"amount,omitempty"`

	// Possible values:
	//   "SALES_TAX"
	//   "TELECOM_TAX"
	//   "UNKNOWN_TAX"
	Type string `json:"type,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Amount") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Amount") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Tax) MarshalJSON() ([]byte, error) {
	type noMethod Tax
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Team struct {
	DisplayName string `json:"displayName,omitempty"`

	Name string `json:"name,omitempty"`

	TeamId string `json:"teamId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "DisplayName") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "DisplayName") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Team) MarshalJSON() ([]byte, error) {
	type noMethod Team
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type TeamSearches struct {
	SearchIds []string `json:"searchIds,omitempty"`

	TeamId string `json:"teamId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "SearchIds") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "SearchIds") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *TeamSearches) MarshalJSON() ([]byte, error) {
	type noMethod TeamSearches
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Timezone struct {
	UtcOffset int64 `json:"utcOffset,omitempty"`

	// ForceSendFields is a list of field names (e.g. "UtcOffset") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "UtcOffset") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Timezone) MarshalJSON() ([]byte, error) {
	type noMethod Timezone
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Transaction struct {
	// Possible values:
	//   "BILLING"
	//   "CDP"
	//   "PAYMENT_BACKEND_UNDEFINED"
	BillingBackend string `json:"billingBackend,omitempty"`

	IsProratedCharge bool `json:"isProratedCharge,omitempty"`

	IsRefund bool `json:"isRefund,omitempty"`

	IsRefundable bool `json:"isRefundable,omitempty"`

	IsRefunded bool `json:"isRefunded,omitempty"`

	LineItems []*TransactionLineItem `json:"lineItems,omitempty"`

	LocalizedRefundTime *LocalizedTimestamp `json:"localizedRefundTime,omitempty"`

	LocalizedTransactionTime *LocalizedTimestamp `json:"localizedTransactionTime,omitempty"`

	Name string `json:"name,omitempty"`

	OrderCode string `json:"orderCode,omitempty"`

	PaymentDescription string `json:"paymentDescription,omitempty"`

	// Possible values:
	//   "BANK_ACCOUNT"
	//   "BILLING_ACCOUNT"
	//   "CARRIER_BILLING"
	//   "CREDIT_CARD"
	//   "FINANCING"
	//   "GOOGLE_STANDARD_TOKENIZED"
	//   "MONETIZATION_CHANNEL"
	//   "NETBANKING"
	//   "PAYMENT_METHOD_UNKNOWN"
	//   "PAYPAL"
	//   "STORED_VALUE_CLOSED_LOOP_PLAY"
	//   "STORED_VALUE_OPEN_LOOP"
	PaymentMethod string `json:"paymentMethod,omitempty"`

	// Possible values:
	//   "CANCEL_REFUND_REASON_UNKNOWN"
	//   "FEATURE_NOT_WORKING"
	//   "FRIEND_OR_FAMILY_CHARGES"
	//   "NO_LONGER_WANTED_REMORSE"
	//   "PURCHASE_BY_ACCIDENT"
	//   "SELF_SERVICE_REFUND"
	//   "UNRECOGNIZED_CHARGES_PAYMENT_FRAUD"
	RefundReason string `json:"refundReason,omitempty"`

	RefundTime string `json:"refundTime,omitempty"`

	// Possible values:
	//   "TRANSACTION_NOT_REFUNDABLE"
	//   "TRANSACTION_REFUNDABLE"
	//   "TRANSACTION_REFUNDED"
	//   "TRANSACTION_STATE_UNKNOWN"
	State string `json:"state,omitempty"`

	TextDescription string `json:"textDescription,omitempty"`

	TransactionAmount *Money `json:"transactionAmount,omitempty"`

	TransactionId string `json:"transactionId,omitempty"`

	// Possible values:
	//   "CANCELLED"
	//   "CHARGED"
	//   "CHARGED_BACK"
	//   "DECLINED"
	//   "OTHER_STATUS"
	//   "PENDING"
	//   "REFUNDED"
	//   "REJECTED"
	//   "TRANSACTION_STATUS_UNKNOWN"
	TransactionStatus string `json:"transactionStatus,omitempty"`

	TransactionTime string `json:"transactionTime,omitempty"`

	TransactionToken string `json:"transactionToken,omitempty"`

	// ForceSendFields is a list of field names (e.g. "BillingBackend") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "BillingBackend") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *Transaction) MarshalJSON() ([]byte, error) {
	type noMethod Transaction
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type TransactionIdentifier struct {
	OrderId string `json:"orderId,omitempty"`

	TransactionId string `json:"transactionId,omitempty"`

	// Possible values:
	//   "GOOGLE_PLAY"
	//   "GOOGLE_STORE"
	//   "P2P_RECEIVER"
	//   "P2P_SENDER"
	//   "TAP_AND_PAY"
	//   "UNKNOWN_WALLET_TRANSACTION_TYPE"
	//   "WALLET_CARD"
	//   "YOUTUBE_PURCHASE"
	TransactionType string `json:"transactionType,omitempty"`

	YoutubeVideoId string `json:"youtubeVideoId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "OrderId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "OrderId") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *TransactionIdentifier) MarshalJSON() ([]byte, error) {
	type noMethod TransactionIdentifier
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type TransactionLineItem struct {
	ComponentKey string `json:"componentKey,omitempty"`

	Description string `json:"description,omitempty"`

	LineItemIndex int64 `json:"lineItemIndex,omitempty"`

	Name string `json:"name,omitempty"`

	Price *Money `json:"price,omitempty"`

	Tax []*Tax `json:"tax,omitempty"`

	// ForceSendFields is a list of field names (e.g. "ComponentKey") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ComponentKey") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *TransactionLineItem) MarshalJSON() ([]byte, error) {
	type noMethod TransactionLineItem
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type TransactionRefundRequestEntry struct {
	// Possible values:
	//   "CANCEL_REFUND_REASON_UNKNOWN"
	//   "FEATURE_NOT_WORKING"
	//   "FRIEND_OR_FAMILY_CHARGES"
	//   "NO_LONGER_WANTED_REMORSE"
	//   "PURCHASE_BY_ACCIDENT"
	//   "SELF_SERVICE_REFUND"
	//   "UNRECOGNIZED_CHARGES_PAYMENT_FRAUD"
	RefundReason string `json:"refundReason,omitempty"`

	TransactionTokens []string `json:"transactionTokens,omitempty"`

	// ForceSendFields is a list of field names (e.g. "RefundReason") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "RefundReason") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *TransactionRefundRequestEntry) MarshalJSON() ([]byte, error) {
	type noMethod TransactionRefundRequestEntry
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type TransactionRefundResponseStatus struct {
	// Possible values:
	//   "ALREADY_REFUNDED"
	//   "DENIED_CUSTOMER_ABUSE"
	//   "DENIED_FRAUD"
	//   "DENIED_REFUND_EXCEEDS_COURTESY_LIMIT"
	//   "ISSUED"
	//   "PERMANENT_REFUND_FAILED"
	//   "REFUND_RESULT_UNKNOWN"
	//   "REFUND_RETRIABLE"
	RefundResult string `json:"refundResult,omitempty"`

	TransactionToken string `json:"transactionToken,omitempty"`

	// ForceSendFields is a list of field names (e.g. "RefundResult") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "RefundResult") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *TransactionRefundResponseStatus) MarshalJSON() ([]byte, error) {
	type noMethod TransactionRefundResponseStatus
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type TransactionsSummary struct {
	Amount *Money `json:"amount,omitempty"`

	Count int64 `json:"count,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Amount") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Amount") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *TransactionsSummary) MarshalJSON() ([]byte, error) {
	type noMethod TransactionsSummary
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type TransferAction struct {
	ResolutionId int64 `json:"resolutionId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "ResolutionId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ResolutionId") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *TransferAction) MarshalJSON() ([]byte, error) {
	type noMethod TransferAction
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type TransferRequest struct {
	EmailAddress string `json:"emailAddress,omitempty"`

	// ForceSendFields is a list of field names (e.g. "EmailAddress") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "EmailAddress") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *TransferRequest) MarshalJSON() ([]byte, error) {
	type noMethod TransferRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type TransferResponse struct {
	Case *Case `json:"case,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Case") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Case") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *TransferResponse) MarshalJSON() ([]byte, error) {
	type noMethod TransferResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type TroubleShooter struct {
	HcId string `json:"hcId,omitempty"`

	HelpCenter string `json:"helpCenter,omitempty"`

	IsPublic bool `json:"isPublic,omitempty"`

	Locale string `json:"locale,omitempty"`

	Url string `json:"url,omitempty"`

	// ForceSendFields is a list of field names (e.g. "HcId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "HcId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *TroubleShooter) MarshalJSON() ([]byte, error) {
	type noMethod TroubleShooter
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type TroubleshootAccountRequest struct {
	CaseId string `json:"caseId,omitempty"`

	Email string `json:"email,omitempty"`

	SearchRecentStartTimestamp string `json:"searchRecentStartTimestamp,omitempty"`

	SsoCookie string `json:"ssoCookie,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *TroubleshootAccountRequest) MarshalJSON() ([]byte, error) {
	type noMethod TroubleshootAccountRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type TroubleshootAccountResponse struct {
	Action *Action1 `json:"action,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Action") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Action") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *TroubleshootAccountResponse) MarshalJSON() ([]byte, error) {
	type noMethod TroubleshootAccountResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type TroubleshootIssueRequest struct {
	Answers []*Answer `json:"answers,omitempty"`

	CaseId string `json:"caseId,omitempty"`

	SsoCookie string `json:"ssoCookie,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Answers") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Answers") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *TroubleshootIssueRequest) MarshalJSON() ([]byte, error) {
	type noMethod TroubleshootIssueRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type TroubleshootIssueResponse struct {
	AutocheckResults []*AutocheckResult `json:"autocheckResults,omitempty"`

	Issues []*Issue1 `json:"issues,omitempty"`

	// Possible values:
	//   "DEVICE_TYPE"
	//   "PURCHASED_APP_NAME"
	//   "PURCHASED_BOOK_NAME"
	//   "PURCHASED_VIDEO_NAME"
	//   "QUESTION_NOT_SET"
	Questions []string `json:"questions,omitempty"`

	Requirements []*Requirement `json:"requirements,omitempty"`

	Resolutions []*Resolution1 `json:"resolutions,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "AutocheckResults") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AutocheckResults") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *TroubleshootIssueResponse) MarshalJSON() ([]byte, error) {
	type noMethod TroubleshootIssueResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type TroubleshootTransactionRequest struct {
	CaseId string `json:"caseId,omitempty"`

	OrderId string `json:"orderId,omitempty"`

	SearchContext string `json:"searchContext,omitempty"`

	SsoCookie string `json:"ssoCookie,omitempty"`

	TransactionId string `json:"transactionId,omitempty"`

	TransactionIdentifier *TransactionIdentifier `json:"transactionIdentifier,omitempty"`

	// Possible values:
	//   "GOOGLE_PLAY"
	//   "GOOGLE_STORE"
	//   "P2P_RECEIVER"
	//   "P2P_SENDER"
	//   "TAP_AND_PAY"
	//   "UNKNOWN_WALLET_TRANSACTION_TYPE"
	//   "WALLET_CARD"
	//   "YOUTUBE_PURCHASE"
	TransactionType string `json:"transactionType,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *TroubleshootTransactionRequest) MarshalJSON() ([]byte, error) {
	type noMethod TroubleshootTransactionRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type TroubleshootTransactionResponse struct {
	Action *Action1 `json:"action,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Action") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Action") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *TroubleshootTransactionResponse) MarshalJSON() ([]byte, error) {
	type noMethod TroubleshootTransactionResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type TroubleshooterSession struct {
	AutocheckResults []*AutocheckResult `json:"autocheckResults,omitempty"`

	CaseId string `json:"caseId,omitempty"`

	IssueId string `json:"issueId,omitempty"`

	// Possible values:
	//   "DEVICE_TYPE"
	//   "PURCHASED_APP_NAME"
	//   "PURCHASED_BOOK_NAME"
	//   "PURCHASED_VIDEO_NAME"
	//   "QUESTION_NOT_SET"
	Questions []string `json:"questions,omitempty"`

	Requirements []*Requirement `json:"requirements,omitempty"`

	Resolutions []*Resolution1 `json:"resolutions,omitempty"`

	SessionId string `json:"sessionId,omitempty"`

	SubIssues []*Issue1 `json:"subIssues,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "AutocheckResults") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AutocheckResults") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *TroubleshooterSession) MarshalJSON() ([]byte, error) {
	type noMethod TroubleshooterSession
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type UnassignRequest struct {
}

type UnassignResponse struct {
	Case *Case `json:"case,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Case") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Case") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *UnassignResponse) MarshalJSON() ([]byte, error) {
	type noMethod UnassignResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type UnauthorizedChargesWorkflow struct {
	PaymentMethodHijackReviewKeys []*CasesReviewKey `json:"paymentMethodHijackReviewKeys,omitempty"`

	// Possible values:
	//   "ACCOUNT_TAKE_OVER_PLAYDC_REFUNDING"
	//   "CANCELLED"
	//   "COMPLETED"
	//   "FRIENDLY_FRAUD_PLAYDC_REFUNDING"
	//   "INITITIATED"
	//   "PAYMENT_METHOD_HIJACK_REVIEWING"
	//   "PAYMENT_METHOD_HIJACK_REVIEW_COMPLETED"
	//   "STATE_UNSPECIFIED"
	State string `json:"state,omitempty"`

	UserTransactionIds []*CasesTransactionIdentifier `json:"userTransactionIds,omitempty"`

	// ForceSendFields is a list of field names (e.g.
	// "PaymentMethodHijackReviewKeys") to unconditionally include in API
	// requests. By default, fields with empty values are omitted from API
	// requests. However, any non-pointer, non-interface field appearing in
	// ForceSendFields will be sent to the server regardless of whether the
	// field is empty or not. This may be used to include empty fields in
	// Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g.
	// "PaymentMethodHijackReviewKeys") to include in API requests with the
	// JSON null value. By default, fields with empty values are omitted
	// from API requests. However, any field with an empty value appearing
	// in NullFields will be sent to the server as null. It is an error if a
	// field in this list has a non-empty value. This may be used to include
	// null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *UnauthorizedChargesWorkflow) MarshalJSON() ([]byte, error) {
	type noMethod UnauthorizedChargesWorkflow
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type UnblockRequest struct {
	BorgAlertId string `json:"borgAlertId,omitempty"`

	BuganizerId int64 `json:"buganizerId,omitempty,string"`

	OrderId string `json:"orderId,omitempty"`

	PcrId int64 `json:"pcrId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "BorgAlertId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "BorgAlertId") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *UnblockRequest) MarshalJSON() ([]byte, error) {
	type noMethod UnblockRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type UnblockResponse struct {
	Case *Case `json:"case,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Case") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Case") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *UnblockResponse) MarshalJSON() ([]byte, error) {
	type noMethod UnblockResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type UnpluggedSignals struct {
	Components []*EntitlementComponent `json:"components,omitempty"`

	// Possible values:
	//   "FAMILY_MEMBER"
	//   "INDIVIDUAL"
	//   "ITUNES"
	//   "OTHER"
	//   "UNKNOWN"
	Source string `json:"source,omitempty"`

	SubscriptionSignals *SubscriptionSignals `json:"subscriptionSignals,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Components") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Components") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *UnpluggedSignals) MarshalJSON() ([]byte, error) {
	type noMethod UnpluggedSignals
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type UnreadCaseInfo struct {
	CaseId string `json:"caseId,omitempty"`

	IsAssigned bool `json:"isAssigned,omitempty"`

	UnreadTime string `json:"unreadTime,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CaseId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CaseId") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *UnreadCaseInfo) MarshalJSON() ([]byte, error) {
	type noMethod UnreadCaseInfo
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type UnspamRequest struct {
}

type UnspamResponse struct {
	Case *Case `json:"case,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Case") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Case") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *UnspamResponse) MarshalJSON() ([]byte, error) {
	type noMethod UnspamResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type UpdateAccountsRequest struct {
	Accounts []*Account `json:"accounts,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Accounts") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Accounts") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *UpdateAccountsRequest) MarshalJSON() ([]byte, error) {
	type noMethod UpdateAccountsRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type UpdateAccountsResponse struct {
	Accounts []*Account `json:"accounts,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Accounts") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Accounts") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *UpdateAccountsResponse) MarshalJSON() ([]byte, error) {
	type noMethod UpdateAccountsResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type UpdateAgentCategoriesRequest struct {
	Paths []*Path2 `json:"paths,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Paths") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Paths") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *UpdateAgentCategoriesRequest) MarshalJSON() ([]byte, error) {
	type noMethod UpdateAgentCategoriesRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type UpdateAgentCategoriesResponse struct {
	Product *Product `json:"product,omitempty"`

	SubProducts []*Product `json:"subProducts,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Product") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Product") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *UpdateAgentCategoriesResponse) MarshalJSON() ([]byte, error) {
	type noMethod UpdateAgentCategoriesResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type UpdateAttributesRequest struct {
	Attributes []*Attribute1 `json:"attributes,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Attributes") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Attributes") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *UpdateAttributesRequest) MarshalJSON() ([]byte, error) {
	type noMethod UpdateAttributesRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type UpdateAttributesResponse struct {
	Case *Case `json:"case,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Case") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Case") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *UpdateAttributesResponse) MarshalJSON() ([]byte, error) {
	type noMethod UpdateAttributesResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type UpdateConsultNoteRequest struct {
	Body string `json:"body,omitempty"`

	CaseId string `json:"caseId,omitempty"`

	InReplyTo string `json:"inReplyTo,omitempty"`

	IsHtml bool `json:"isHtml,omitempty"`

	Subject string `json:"subject,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Body") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Body") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *UpdateConsultNoteRequest) MarshalJSON() ([]byte, error) {
	type noMethod UpdateConsultNoteRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type UpdateConsultNoteResponse struct {
	Communication *Communication `json:"communication,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Communication") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Communication") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *UpdateConsultNoteResponse) MarshalJSON() ([]byte, error) {
	type noMethod UpdateConsultNoteResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type UpdateContactEmailRequest struct {
	ContactEmail string `json:"contactEmail,omitempty"`

	// ForceSendFields is a list of field names (e.g. "ContactEmail") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ContactEmail") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *UpdateContactEmailRequest) MarshalJSON() ([]byte, error) {
	type noMethod UpdateContactEmailRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type UpdateContactEmailResponse struct {
	Customer *Customer `json:"customer,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Customer") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Customer") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *UpdateContactEmailResponse) MarshalJSON() ([]byte, error) {
	type noMethod UpdateContactEmailResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type UpdateContactNameRequest struct {
	ContactName string `json:"contactName,omitempty"`

	// ForceSendFields is a list of field names (e.g. "ContactName") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ContactName") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *UpdateContactNameRequest) MarshalJSON() ([]byte, error) {
	type noMethod UpdateContactNameRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type UpdateContactNameResponse struct {
	Customer *Customer `json:"customer,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Customer") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Customer") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *UpdateContactNameResponse) MarshalJSON() ([]byte, error) {
	type noMethod UpdateContactNameResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type UpdateCustomerAttributesRequest struct {
	AdwordsExternalCid string `json:"adwordsExternalCid,omitempty"`

	AdwordsInternalCid string `json:"adwordsInternalCid,omitempty"`

	EmailAddress string `json:"emailAddress,omitempty"`

	PhoneNumber string `json:"phoneNumber,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AdwordsExternalCid")
	// to unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AdwordsExternalCid") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *UpdateCustomerAttributesRequest) MarshalJSON() ([]byte, error) {
	type noMethod UpdateCustomerAttributesRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type UpdateCustomerAttributesResponse struct {
	Customer *Customer `json:"customer,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Customer") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Customer") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *UpdateCustomerAttributesResponse) MarshalJSON() ([]byte, error) {
	type noMethod UpdateCustomerAttributesResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type UpdateDisconnectedChannelRequest struct {
	// Possible values:
	//   "CHANNEL_UNSPECIFIED"
	//   "CHAT"
	//   "PHONE"
	Channel string `json:"channel,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Channel") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Channel") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *UpdateDisconnectedChannelRequest) MarshalJSON() ([]byte, error) {
	type noMethod UpdateDisconnectedChannelRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type UpdateEligibleProgramRequest struct {
	ProgramName string `json:"programName,omitempty"`

	// ForceSendFields is a list of field names (e.g. "ProgramName") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ProgramName") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *UpdateEligibleProgramRequest) MarshalJSON() ([]byte, error) {
	type noMethod UpdateEligibleProgramRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type UpdateEligibleProgramResponse struct {
	Customer *Customer `json:"customer,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Customer") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Customer") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *UpdateEligibleProgramResponse) MarshalJSON() ([]byte, error) {
	type noMethod UpdateEligibleProgramResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type UpdateEmailRequest struct {
	AfterSendSetting *AfterSendSetting `json:"afterSendSetting,omitempty"`

	BccAddresses []string `json:"bccAddresses,omitempty"`

	Body string `json:"body,omitempty"`

	CannedResponseIds []string `json:"cannedResponseIds,omitempty"`

	CaseId string `json:"caseId,omitempty"`

	CcAddresses []string `json:"ccAddresses,omitempty"`

	FooterIds []string `json:"footerIds,omitempty"`

	FromAddress string `json:"fromAddress,omitempty"`

	HeaderIds []string `json:"headerIds,omitempty"`

	InReplyTo string `json:"inReplyTo,omitempty"`

	IsHtml bool `json:"isHtml,omitempty"`

	Subject string `json:"subject,omitempty"`

	ToAddresses []string `json:"toAddresses,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AfterSendSetting") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AfterSendSetting") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *UpdateEmailRequest) MarshalJSON() ([]byte, error) {
	type noMethod UpdateEmailRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type UpdateEmailResponse struct {
	Communication *Communication `json:"communication,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Communication") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Communication") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *UpdateEmailResponse) MarshalJSON() ([]byte, error) {
	type noMethod UpdateEmailResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type UpdateLocaleRequest struct {
	Locale string `json:"locale,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Locale") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Locale") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *UpdateLocaleRequest) MarshalJSON() ([]byte, error) {
	type noMethod UpdateLocaleRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type UpdateLocaleResponse struct {
	Issue *Issue `json:"issue,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Issue") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Issue") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *UpdateLocaleResponse) MarshalJSON() ([]byte, error) {
	type noMethod UpdateLocaleResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type UpdateNoteRequest struct {
	Body string `json:"body,omitempty"`

	CannedResponseIds []string `json:"cannedResponseIds,omitempty"`

	CaseId string `json:"caseId,omitempty"`

	IsHtml bool `json:"isHtml,omitempty"`

	// Possible values:
	//   "PHONE"
	//   "UNKNOWN_NOTE_TYPE"
	//   "USER"
	NoteType string `json:"noteType,omitempty"`

	Subject string `json:"subject,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Body") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Body") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *UpdateNoteRequest) MarshalJSON() ([]byte, error) {
	type noMethod UpdateNoteRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type UpdateNoteResponse struct {
	Communication *Communication `json:"communication,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Communication") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Communication") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *UpdateNoteResponse) MarshalJSON() ([]byte, error) {
	type noMethod UpdateNoteResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type UpdateOwnerResponse struct {
	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`
}

type UpdateProductRequest struct {
	FieldMask []string `json:"fieldMask,omitempty"`

	Product *Product `json:"product,omitempty"`

	// ForceSendFields is a list of field names (e.g. "FieldMask") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "FieldMask") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *UpdateProductRequest) MarshalJSON() ([]byte, error) {
	type noMethod UpdateProductRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type UpdateSummaryRequest struct {
	Summary string `json:"summary,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Summary") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Summary") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *UpdateSummaryRequest) MarshalJSON() ([]byte, error) {
	type noMethod UpdateSummaryRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type UpdateSummaryResponse struct {
	Issue *Issue `json:"issue,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Issue") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Issue") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *UpdateSummaryResponse) MarshalJSON() ([]byte, error) {
	type noMethod UpdateSummaryResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type UpdateWorkflowRequest struct {
	FieldMask []string `json:"fieldMask,omitempty"`

	Workflow *CasesWorkflow `json:"workflow,omitempty"`

	// ForceSendFields is a list of field names (e.g. "FieldMask") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "FieldMask") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *UpdateWorkflowRequest) MarshalJSON() ([]byte, error) {
	type noMethod UpdateWorkflowRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ValidateConsultCategory struct {
	Nodes []*ValidateConsultNode `json:"nodes,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Nodes") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Nodes") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ValidateConsultCategory) MarshalJSON() ([]byte, error) {
	type noMethod ValidateConsultCategory
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ValidateConsultFormRequest struct {
	ConsultFormHelpCenterName string `json:"consultFormHelpCenterName,omitempty"`

	ConsultFormId string `json:"consultFormId,omitempty"`

	OriginatingCategory *ValidateConsultCategory `json:"originatingCategory,omitempty"`

	PoolId string `json:"poolId,omitempty"`

	ProductId string `json:"productId,omitempty"`

	TargetCaseCategories []*ValidateConsultCategory `json:"targetCaseCategories,omitempty"`

	TeamId string `json:"teamId,omitempty"`

	// ForceSendFields is a list of field names (e.g.
	// "ConsultFormHelpCenterName") to unconditionally include in API
	// requests. By default, fields with empty values are omitted from API
	// requests. However, any non-pointer, non-interface field appearing in
	// ForceSendFields will be sent to the server regardless of whether the
	// field is empty or not. This may be used to include empty fields in
	// Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g.
	// "ConsultFormHelpCenterName") to include in API requests with the JSON
	// null value. By default, fields with empty values are omitted from API
	// requests. However, any field with an empty value appearing in
	// NullFields will be sent to the server as null. It is an error if a
	// field in this list has a non-empty value. This may be used to include
	// null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ValidateConsultFormRequest) MarshalJSON() ([]byte, error) {
	type noMethod ValidateConsultFormRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ValidateConsultFormResponse struct {
	// Possible values:
	//   "CATEGORY"
	//   "CONSULT_FORM"
	//   "POOL"
	//   "TEAM"
	//   "VALIDATION_ERROR_NOT_SET"
	ValidationErrors []string `json:"validationErrors,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "ValidationErrors") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ValidationErrors") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *ValidateConsultFormResponse) MarshalJSON() ([]byte, error) {
	type noMethod ValidateConsultFormResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type ValidateConsultNode struct {
	CategoryId int64 `json:"categoryId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CategoryId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CategoryId") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ValidateConsultNode) MarshalJSON() ([]byte, error) {
	type noMethod ValidateConsultNode
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type VerificationResult struct {
	// Possible values:
	//   "FAILED"
	//   "PASSED"
	//   "UNABLE_TO_VERIFY"
	//   "UNKNOWN_ANSWER_RESULT"
	AnswerResults []string `json:"answerResults,omitempty"`

	AttemptsRemaining int64 `json:"attemptsRemaining,omitempty"`

	// Possible values:
	//   "PAYMENT_METHOD_QUESTION_SET"
	//   "PHONE_NUMBER_QUESTION_SET"
	//   "POSTAL_CODE_QUESTION_SET"
	//   "UNKNOWN_QUESTION_SET_TYPE"
	QuestionSetType string `json:"questionSetType,omitempty"`

	VerificationResults []*Status `json:"verificationResults,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AnswerResults") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AnswerResults") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *VerificationResult) MarshalJSON() ([]byte, error) {
	type noMethod VerificationResult
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type VerifyGiftCardRequest struct {
	ActivationNumber string `json:"activationNumber,omitempty"`

	CaseId string `json:"caseId,omitempty"`

	PartialCode string `json:"partialCode,omitempty"`

	SsoCookie string `json:"ssoCookie,omitempty"`

	// ForceSendFields is a list of field names (e.g. "ActivationNumber") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ActivationNumber") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *VerifyGiftCardRequest) MarshalJSON() ([]byte, error) {
	type noMethod VerifyGiftCardRequest
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type VerifyGiftCardResponse struct {
	RedemptionToken *RedemptionToken `json:"redemptionToken,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "RedemptionToken") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "RedemptionToken") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *VerifyGiftCardResponse) MarshalJSON() ([]byte, error) {
	type noMethod VerifyGiftCardResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type WaitForConsultRequest struct {
}

type WaitForConsultResponse struct {
	Case *Case `json:"case,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Case") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Case") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *WaitForConsultResponse) MarshalJSON() ([]byte, error) {
	type noMethod WaitForConsultResponse
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type WalletPaymentMethodHijackReviewIds struct {
	Ids []string `json:"ids,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Ids") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Ids") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *WalletPaymentMethodHijackReviewIds) MarshalJSON() ([]byte, error) {
	type noMethod WalletPaymentMethodHijackReviewIds
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type WalletSignInReviewIds struct {
	Ids []string `json:"ids,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Ids") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Ids") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *WalletSignInReviewIds) MarshalJSON() ([]byte, error) {
	type noMethod WalletSignInReviewIds
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type WalletTransaction struct {
	CreationTime string `json:"creationTime,omitempty"`

	Description string `json:"description,omitempty"`

	Instrument string `json:"instrument,omitempty"`

	IsAuthorizationHold bool `json:"isAuthorizationHold,omitempty"`

	OriginalAmount *Money `json:"originalAmount,omitempty"`

	PlaySubscriptionId string `json:"playSubscriptionId,omitempty"`

	ProductLinks []string `json:"productLinks,omitempty"`

	// Possible values:
	//   "DRIVE"
	//   "FI"
	//   "HARDWARE"
	//   "PLAY_APPS"
	//   "PLAY_BOOKS"
	//   "PLAY_GIFT_CARDS"
	//   "PLAY_MOVIES"
	//   "PLAY_MUSIC"
	//   "PLAY_NEWSSTAND"
	//   "PRODUCT_VERTICAL_UNSPECIFIED"
	//   "UNKNOWN"
	//   "WALLET_ANDROID_PAY"
	//   "WALLET_APP"
	//   "WALLET_HANDS_FREE"
	//   "YOUTUBE"
	ProductVertical string `json:"productVertical,omitempty"`

	// Possible values:
	//   "HD"
	//   "SD"
	//   "UHD"
	//   "UNKNOWN_QUALITY"
	//   "VR"
	QualityCap string `json:"qualityCap,omitempty"`

	SplitTenders []*SplitTender `json:"splitTenders,omitempty"`

	// Possible values:
	//   "CANCELLED"
	//   "CHARGED"
	//   "CHARGED_BACK"
	//   "DECLINED"
	//   "OTHER_STATUS"
	//   "PENDING"
	//   "REFUNDED"
	//   "REJECTED"
	//   "UNKNOWN_WALLET_TRANSACTION_STATUS"
	Status string `json:"status,omitempty"`

	TransactionId *TransactionIdentifier `json:"transactionId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CreationTime") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CreationTime") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *WalletTransaction) MarshalJSON() ([]byte, error) {
	type noMethod WalletTransaction
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Workflow struct {
	// Possible values:
	//   "NOE"
	//   "PLAY_APPS"
	//   "PLAY_PURCHASES"
	//   "TROUBLESHOOTER_TYPE_NOT_SET"
	TroubleshooterType string `json:"troubleshooterType,omitempty"`

	WorkflowId string `json:"workflowId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "TroubleshooterType")
	// to unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "TroubleshooterType") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *Workflow) MarshalJSON() ([]byte, error) {
	type noMethod Workflow
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type Workflow1 struct {
	CheckForDraft bool `json:"checkForDraft,omitempty"`

	// Possible values:
	//   "NOE"
	//   "PLAY_APPS"
	//   "PLAY_PURCHASES"
	//   "TROUBLESHOOTER_TYPE_NOT_SET"
	TroubleshooterType string `json:"troubleshooterType,omitempty"`

	Url string `json:"url,omitempty"`

	WorkflowId string `json:"workflowId,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CheckForDraft") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CheckForDraft") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Workflow1) MarshalJSON() ([]byte, error) {
	type noMethod Workflow1
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type WorkflowInfo struct {
	WorkflowIds []int64 `json:"workflowIds,omitempty"`

	// ForceSendFields is a list of field names (e.g. "WorkflowIds") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "WorkflowIds") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *WorkflowInfo) MarshalJSON() ([]byte, error) {
	type noMethod WorkflowInfo
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

type WorkflowResult struct {
	DraftMessageId string `json:"draftMessageId,omitempty"`

	Rma *Rma `json:"rma,omitempty"`

	StepResults []*StepResult `json:"stepResults,omitempty"`

	// ForceSendFields is a list of field names (e.g. "DraftMessageId") to
	// unconditionally include in API requests. By default, fields with
	// empty values are omitted from API requests. However, any non-pointer,
	// non-interface field appearing in ForceSendFields will be sent to the
	// server regardless of whether the field is empty or not. This may be
	// used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "DraftMessageId") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *WorkflowResult) MarshalJSON() ([]byte, error) {
	type noMethod WorkflowResult
	raw := noMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// method id "supportcases.agentActivities.create":

type AgentActivitiesCreateCall struct {
	s                          *Service
	createagentactivityrequest *CreateAgentActivityRequest
	urlParams_                 gensupport.URLParams
	ctx_                       context.Context
	header_                    http.Header
}

// Create: Adds an agent activity.
func (r *AgentActivitiesService) Create(createagentactivityrequest *CreateAgentActivityRequest) *AgentActivitiesCreateCall {
	c := &AgentActivitiesCreateCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.createagentactivityrequest = createagentactivityrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *AgentActivitiesCreateCall) Fields(s ...googleapi.Field) *AgentActivitiesCreateCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *AgentActivitiesCreateCall) Context(ctx context.Context) *AgentActivitiesCreateCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *AgentActivitiesCreateCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *AgentActivitiesCreateCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.createagentactivityrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "agentActivities")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.agentActivities.create" call.
// Exactly one of *AgentActivity or error will be non-nil. Any non-2xx
// status code is an error. Response headers are in either
// *AgentActivity.ServerResponse.Header or (if a response was returned
// at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *AgentActivitiesCreateCall) Do(opts ...googleapi.CallOption) (*AgentActivity, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &AgentActivity{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Adds an agent activity.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.agentActivities.create",
	//   "path": "agentActivities",
	//   "request": {
	//     "$ref": "CreateAgentActivityRequest"
	//   },
	//   "response": {
	//     "$ref": "AgentActivity"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.agentActivities.createFromHelpCenterDeepLink":

type AgentActivitiesCreateFromHelpCenterDeepLinkCall struct {
	s                                   *Service
	createfromhelpcenterdeeplinkrequest *CreateFromHelpCenterDeepLinkRequest
	urlParams_                          gensupport.URLParams
	ctx_                                context.Context
	header_                             http.Header
}

// CreateFromHelpCenterDeepLink: Creates an agent activity from a help
// center deep link.
func (r *AgentActivitiesService) CreateFromHelpCenterDeepLink(createfromhelpcenterdeeplinkrequest *CreateFromHelpCenterDeepLinkRequest) *AgentActivitiesCreateFromHelpCenterDeepLinkCall {
	c := &AgentActivitiesCreateFromHelpCenterDeepLinkCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.createfromhelpcenterdeeplinkrequest = createfromhelpcenterdeeplinkrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *AgentActivitiesCreateFromHelpCenterDeepLinkCall) Fields(s ...googleapi.Field) *AgentActivitiesCreateFromHelpCenterDeepLinkCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *AgentActivitiesCreateFromHelpCenterDeepLinkCall) Context(ctx context.Context) *AgentActivitiesCreateFromHelpCenterDeepLinkCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *AgentActivitiesCreateFromHelpCenterDeepLinkCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *AgentActivitiesCreateFromHelpCenterDeepLinkCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.createfromhelpcenterdeeplinkrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "agentActivities:createFromHelpCenterDeepLink")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.agentActivities.createFromHelpCenterDeepLink" call.
// Exactly one of *AgentActivity or error will be non-nil. Any non-2xx
// status code is an error. Response headers are in either
// *AgentActivity.ServerResponse.Header or (if a response was returned
// at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *AgentActivitiesCreateFromHelpCenterDeepLinkCall) Do(opts ...googleapi.CallOption) (*AgentActivity, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &AgentActivity{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Creates an agent activity from a help center deep link.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.agentActivities.createFromHelpCenterDeepLink",
	//   "path": "agentActivities:createFromHelpCenterDeepLink",
	//   "request": {
	//     "$ref": "CreateFromHelpCenterDeepLinkRequest"
	//   },
	//   "response": {
	//     "$ref": "AgentActivity"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases",
	//     "https://www.googleapis.com/auth/supportcontent"
	//   ]
	// }

}

// method id "supportcases.agentActivities.list":

type AgentActivitiesListCall struct {
	s            *Service
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// List: Lists an agent activities.
func (r *AgentActivitiesService) List() *AgentActivitiesListCall {
	c := &AgentActivitiesListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	return c
}

// CaseId sets the optional parameter "caseId":
func (c *AgentActivitiesListCall) CaseId(caseId string) *AgentActivitiesListCall {
	c.urlParams_.Set("caseId", caseId)
	return c
}

// PageSize sets the optional parameter "pageSize":
func (c *AgentActivitiesListCall) PageSize(pageSize int64) *AgentActivitiesListCall {
	c.urlParams_.Set("pageSize", fmt.Sprint(pageSize))
	return c
}

// PageToken sets the optional parameter "pageToken":
func (c *AgentActivitiesListCall) PageToken(pageToken string) *AgentActivitiesListCall {
	c.urlParams_.Set("pageToken", pageToken)
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *AgentActivitiesListCall) Fields(s ...googleapi.Field) *AgentActivitiesListCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *AgentActivitiesListCall) IfNoneMatch(entityTag string) *AgentActivitiesListCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *AgentActivitiesListCall) Context(ctx context.Context) *AgentActivitiesListCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *AgentActivitiesListCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *AgentActivitiesListCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "agentActivities")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.agentActivities.list" call.
// Exactly one of *ListAgentActivitiesResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *ListAgentActivitiesResponse.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *AgentActivitiesListCall) Do(opts ...googleapi.CallOption) (*ListAgentActivitiesResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ListAgentActivitiesResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Lists an agent activities.",
	//   "httpMethod": "GET",
	//   "id": "supportcases.agentActivities.list",
	//   "parameters": {
	//     "caseId": {
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "pageSize": {
	//       "format": "int32",
	//       "location": "query",
	//       "type": "integer"
	//     },
	//     "pageToken": {
	//       "location": "query",
	//       "type": "string"
	//     }
	//   },
	//   "path": "agentActivities",
	//   "response": {
	//     "$ref": "ListAgentActivitiesResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// Pages invokes f for each page of results.
// A non-nil error returned from f will halt the iteration.
// The provided context supersedes any context provided to the Context method.
func (c *AgentActivitiesListCall) Pages(ctx context.Context, f func(*ListAgentActivitiesResponse) error) error {
	c.ctx_ = ctx
	defer c.PageToken(c.urlParams_.Get("pageToken")) // reset paging to original point
	for {
		x, err := c.Do()
		if err != nil {
			return err
		}
		if err := f(x); err != nil {
			return err
		}
		if x.NextPageToken == "" {
			return nil
		}
		c.PageToken(x.NextPageToken)
	}
}

// method id "supportcases.agentSettings.get":

type AgentSettingsGetCall struct {
	s            *Service
	name         string
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// Get: Gets agent setting for the agent id in the resource name. If
// agent id is "me", get agent setting for the current logged in agent.
func (r *AgentSettingsService) Get(name string) *AgentSettingsGetCall {
	c := &AgentSettingsGetCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *AgentSettingsGetCall) Fields(s ...googleapi.Field) *AgentSettingsGetCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *AgentSettingsGetCall) IfNoneMatch(entityTag string) *AgentSettingsGetCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *AgentSettingsGetCall) Context(ctx context.Context) *AgentSettingsGetCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *AgentSettingsGetCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *AgentSettingsGetCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.agentSettings.get" call.
// Exactly one of *AgentSetting or error will be non-nil. Any non-2xx
// status code is an error. Response headers are in either
// *AgentSetting.ServerResponse.Header or (if a response was returned at
// all) in error.(*googleapi.Error).Header. Use googleapi.IsNotModified
// to check whether the returned error was because
// http.StatusNotModified was returned.
func (c *AgentSettingsGetCall) Do(opts ...googleapi.CallOption) (*AgentSetting, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &AgentSetting{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Gets agent setting for the agent id in the resource name. If agent id is \"me\", get agent setting for the current logged in agent.",
	//   "httpMethod": "GET",
	//   "id": "supportcases.agentSettings.get",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}",
	//   "response": {
	//     "$ref": "AgentSetting"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.agentSettings.getPhoneSetting":

type AgentSettingsGetPhoneSettingCall struct {
	s            *Service
	name         string
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// GetPhoneSetting: Gets phone setting for the given agent id. If agent
// id is "me", gets phone setting for the agent currently logged in.
// This call is already deprecated.
func (r *AgentSettingsService) GetPhoneSetting(name string) *AgentSettingsGetPhoneSettingCall {
	c := &AgentSettingsGetPhoneSettingCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *AgentSettingsGetPhoneSettingCall) Fields(s ...googleapi.Field) *AgentSettingsGetPhoneSettingCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *AgentSettingsGetPhoneSettingCall) IfNoneMatch(entityTag string) *AgentSettingsGetPhoneSettingCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *AgentSettingsGetPhoneSettingCall) Context(ctx context.Context) *AgentSettingsGetPhoneSettingCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *AgentSettingsGetPhoneSettingCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *AgentSettingsGetPhoneSettingCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.agentSettings.getPhoneSetting" call.
// Exactly one of *GetPhoneSettingResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *GetPhoneSettingResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *AgentSettingsGetPhoneSettingCall) Do(opts ...googleapi.CallOption) (*GetPhoneSettingResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &GetPhoneSettingResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Gets phone setting for the given agent id. If agent id is \"me\", gets phone setting for the agent currently logged in. This call is already deprecated.",
	//   "httpMethod": "GET",
	//   "id": "supportcases.agentSettings.getPhoneSetting",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}",
	//   "response": {
	//     "$ref": "GetPhoneSettingResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.agentSettings.getRealTimeSetting":

type AgentSettingsGetRealTimeSettingCall struct {
	s            *Service
	name         string
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// GetRealTimeSetting: Gets agent's real time setting for the given
// agent id in the resource name. If agent id is "me", use the current
// logged in agent.
func (r *AgentSettingsService) GetRealTimeSetting(name string) *AgentSettingsGetRealTimeSettingCall {
	c := &AgentSettingsGetRealTimeSettingCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *AgentSettingsGetRealTimeSettingCall) Fields(s ...googleapi.Field) *AgentSettingsGetRealTimeSettingCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *AgentSettingsGetRealTimeSettingCall) IfNoneMatch(entityTag string) *AgentSettingsGetRealTimeSettingCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *AgentSettingsGetRealTimeSettingCall) Context(ctx context.Context) *AgentSettingsGetRealTimeSettingCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *AgentSettingsGetRealTimeSettingCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *AgentSettingsGetRealTimeSettingCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.agentSettings.getRealTimeSetting" call.
// Exactly one of *RealTimeSetting or error will be non-nil. Any non-2xx
// status code is an error. Response headers are in either
// *RealTimeSetting.ServerResponse.Header or (if a response was returned
// at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *AgentSettingsGetRealTimeSettingCall) Do(opts ...googleapi.CallOption) (*RealTimeSetting, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &RealTimeSetting{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Gets agent's real time setting for the given agent id in the resource name. If agent id is \"me\", use the current logged in agent.",
	//   "httpMethod": "GET",
	//   "id": "supportcases.agentSettings.getRealTimeSetting",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}",
	//   "response": {
	//     "$ref": "RealTimeSetting"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.agentSettings.getSearchSetting":

type AgentSettingsGetSearchSettingCall struct {
	s            *Service
	name         string
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// GetSearchSetting: Gets agent's search settings for the agent id in
// the resource name. If agent id is "me", use the current logged in
// agent.
func (r *AgentSettingsService) GetSearchSetting(name string) *AgentSettingsGetSearchSettingCall {
	c := &AgentSettingsGetSearchSettingCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *AgentSettingsGetSearchSettingCall) Fields(s ...googleapi.Field) *AgentSettingsGetSearchSettingCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *AgentSettingsGetSearchSettingCall) IfNoneMatch(entityTag string) *AgentSettingsGetSearchSettingCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *AgentSettingsGetSearchSettingCall) Context(ctx context.Context) *AgentSettingsGetSearchSettingCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *AgentSettingsGetSearchSettingCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *AgentSettingsGetSearchSettingCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.agentSettings.getSearchSetting" call.
// Exactly one of *SearchSetting or error will be non-nil. Any non-2xx
// status code is an error. Response headers are in either
// *SearchSetting.ServerResponse.Header or (if a response was returned
// at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *AgentSettingsGetSearchSettingCall) Do(opts ...googleapi.CallOption) (*SearchSetting, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &SearchSetting{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Gets agent's search settings for the agent id in the resource name. If agent id is \"me\", use the current logged in agent.",
	//   "httpMethod": "GET",
	//   "id": "supportcases.agentSettings.getSearchSetting",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}",
	//   "response": {
	//     "$ref": "SearchSetting"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.agentSettings.list":

type AgentSettingsListCall struct {
	s            *Service
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// List: List all agent settings.
func (r *AgentSettingsService) List() *AgentSettingsListCall {
	c := &AgentSettingsListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *AgentSettingsListCall) Fields(s ...googleapi.Field) *AgentSettingsListCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *AgentSettingsListCall) IfNoneMatch(entityTag string) *AgentSettingsListCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *AgentSettingsListCall) Context(ctx context.Context) *AgentSettingsListCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *AgentSettingsListCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *AgentSettingsListCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "agentSettings")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.agentSettings.list" call.
// Exactly one of *ListAgentSettingsResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *ListAgentSettingsResponse.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *AgentSettingsListCall) Do(opts ...googleapi.CallOption) (*ListAgentSettingsResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ListAgentSettingsResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "List all agent settings.",
	//   "httpMethod": "GET",
	//   "id": "supportcases.agentSettings.list",
	//   "path": "agentSettings",
	//   "response": {
	//     "$ref": "ListAgentSettingsResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.agentSettings.listSettings":

type AgentSettingsListSettingsCall struct {
	s            *Service
	name         string
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// ListSettings: Lists settings for the agent id in the resource name.
// If agent id is "me", get agent setting for the current logged in
// agent.
func (r *AgentSettingsService) ListSettings(name string) *AgentSettingsListSettingsCall {
	c := &AgentSettingsListSettingsCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	return c
}

// RequestedSettingTypes sets the optional parameter
// "requestedSettingTypes":
//
// Possible values:
//   "AGENT_SETTING"
//   "SEARCH_SETTING"
//   "UNKNOWN_AGENT_SETTING_TYPE"
func (c *AgentSettingsListSettingsCall) RequestedSettingTypes(requestedSettingTypes ...string) *AgentSettingsListSettingsCall {
	c.urlParams_.SetMulti("requestedSettingTypes", append([]string{}, requestedSettingTypes...))
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *AgentSettingsListSettingsCall) Fields(s ...googleapi.Field) *AgentSettingsListSettingsCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *AgentSettingsListSettingsCall) IfNoneMatch(entityTag string) *AgentSettingsListSettingsCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *AgentSettingsListSettingsCall) Context(ctx context.Context) *AgentSettingsListSettingsCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *AgentSettingsListSettingsCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *AgentSettingsListSettingsCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:listSettings")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.agentSettings.listSettings" call.
// Exactly one of *ListSettingsResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *ListSettingsResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *AgentSettingsListSettingsCall) Do(opts ...googleapi.CallOption) (*ListSettingsResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ListSettingsResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Lists settings for the agent id in the resource name. If agent id is \"me\", get agent setting for the current logged in agent.",
	//   "httpMethod": "GET",
	//   "id": "supportcases.agentSettings.listSettings",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     },
	//     "requestedSettingTypes": {
	//       "enum": [
	//         "AGENT_SETTING",
	//         "SEARCH_SETTING",
	//         "UNKNOWN_AGENT_SETTING_TYPE"
	//       ],
	//       "enumDescriptions": [
	//         "",
	//         "",
	//         ""
	//       ],
	//       "location": "query",
	//       "repeated": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:listSettings",
	//   "response": {
	//     "$ref": "ListSettingsResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.agentSettings.updateSearchSetting":

type AgentSettingsUpdateSearchSettingCall struct {
	s             *Service
	name          string
	searchsetting *SearchSetting
	urlParams_    gensupport.URLParams
	ctx_          context.Context
	header_       http.Header
}

// UpdateSearchSetting: Updates search settings for the agent id in the
// resource name. If agent id is "me", use the current logged in agent.
func (r *AgentSettingsService) UpdateSearchSetting(name string, searchsetting *SearchSetting) *AgentSettingsUpdateSearchSettingCall {
	c := &AgentSettingsUpdateSearchSettingCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.searchsetting = searchsetting
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *AgentSettingsUpdateSearchSettingCall) Fields(s ...googleapi.Field) *AgentSettingsUpdateSearchSettingCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *AgentSettingsUpdateSearchSettingCall) Context(ctx context.Context) *AgentSettingsUpdateSearchSettingCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *AgentSettingsUpdateSearchSettingCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *AgentSettingsUpdateSearchSettingCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.searchsetting)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("PUT", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.agentSettings.updateSearchSetting" call.
// Exactly one of *SearchSetting or error will be non-nil. Any non-2xx
// status code is an error. Response headers are in either
// *SearchSetting.ServerResponse.Header or (if a response was returned
// at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *AgentSettingsUpdateSearchSettingCall) Do(opts ...googleapi.CallOption) (*SearchSetting, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &SearchSetting{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Updates search settings for the agent id in the resource name. If agent id is \"me\", use the current logged in agent.",
	//   "httpMethod": "PUT",
	//   "id": "supportcases.agentSettings.updateSearchSetting",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}",
	//   "request": {
	//     "$ref": "SearchSetting"
	//   },
	//   "response": {
	//     "$ref": "SearchSetting"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.attributes.get":

type AttributesGetCall struct {
	s            *Service
	name         string
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// Get: Gets the specified attribute.
func (r *AttributesService) Get(name string) *AttributesGetCall {
	c := &AttributesGetCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *AttributesGetCall) Fields(s ...googleapi.Field) *AttributesGetCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *AttributesGetCall) IfNoneMatch(entityTag string) *AttributesGetCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *AttributesGetCall) Context(ctx context.Context) *AttributesGetCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *AttributesGetCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *AttributesGetCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.attributes.get" call.
// Exactly one of *Attribute or error will be non-nil. Any non-2xx
// status code is an error. Response headers are in either
// *Attribute.ServerResponse.Header or (if a response was returned at
// all) in error.(*googleapi.Error).Header. Use googleapi.IsNotModified
// to check whether the returned error was because
// http.StatusNotModified was returned.
func (c *AttributesGetCall) Do(opts ...googleapi.CallOption) (*Attribute, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &Attribute{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Gets the specified attribute.",
	//   "httpMethod": "GET",
	//   "id": "supportcases.attributes.get",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}",
	//   "response": {
	//     "$ref": "Attribute"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.cases.assign":

type CasesAssignCall struct {
	s             *Service
	name          string
	assignrequest *AssignRequest
	urlParams_    gensupport.URLParams
	ctx_          context.Context
	header_       http.Header
}

// Assign: Assigns the specified case.
func (r *CasesService) Assign(name string, assignrequest *AssignRequest) *CasesAssignCall {
	c := &CasesAssignCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.assignrequest = assignrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesAssignCall) Fields(s ...googleapi.Field) *CasesAssignCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesAssignCall) Context(ctx context.Context) *CasesAssignCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesAssignCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesAssignCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.assignrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:assign")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.assign" call.
// Exactly one of *AssignResponse or error will be non-nil. Any non-2xx
// status code is an error. Response headers are in either
// *AssignResponse.ServerResponse.Header or (if a response was returned
// at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesAssignCall) Do(opts ...googleapi.CallOption) (*AssignResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &AssignResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Assigns the specified case.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.cases.assign",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:assign",
	//   "request": {
	//     "$ref": "AssignRequest"
	//   },
	//   "response": {
	//     "$ref": "AssignResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.cases.autoAssign":

type CasesAutoAssignCall struct {
	s                 *Service
	autoassignrequest *AutoAssignRequest
	urlParams_        gensupport.URLParams
	ctx_              context.Context
	header_           http.Header
}

// AutoAssign: Auto assign a case to the calling user.
func (r *CasesService) AutoAssign(autoassignrequest *AutoAssignRequest) *CasesAutoAssignCall {
	c := &CasesAutoAssignCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.autoassignrequest = autoassignrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesAutoAssignCall) Fields(s ...googleapi.Field) *CasesAutoAssignCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesAutoAssignCall) Context(ctx context.Context) *CasesAutoAssignCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesAutoAssignCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesAutoAssignCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.autoassignrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "cases:autoAssign")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.autoAssign" call.
// Exactly one of *AutoAssignResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *AutoAssignResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesAutoAssignCall) Do(opts ...googleapi.CallOption) (*AutoAssignResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &AutoAssignResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Auto assign a case to the calling user.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.cases.autoAssign",
	//   "path": "cases:autoAssign",
	//   "request": {
	//     "$ref": "AutoAssignRequest"
	//   },
	//   "response": {
	//     "$ref": "AutoAssignResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.cases.block":

type CasesBlockCall struct {
	s            *Service
	name         string
	blockrequest *BlockRequest
	urlParams_   gensupport.URLParams
	ctx_         context.Context
	header_      http.Header
}

// Block: Indicate the specified case is blocked by a bug/case/legal
// order, etc.
func (r *CasesService) Block(name string, blockrequest *BlockRequest) *CasesBlockCall {
	c := &CasesBlockCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.blockrequest = blockrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesBlockCall) Fields(s ...googleapi.Field) *CasesBlockCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesBlockCall) Context(ctx context.Context) *CasesBlockCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesBlockCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesBlockCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.blockrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:block")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.block" call.
// Exactly one of *BlockResponse or error will be non-nil. Any non-2xx
// status code is an error. Response headers are in either
// *BlockResponse.ServerResponse.Header or (if a response was returned
// at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesBlockCall) Do(opts ...googleapi.CallOption) (*BlockResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &BlockResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Indicate the specified case is blocked by a bug/case/legal order, etc.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.cases.block",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:block",
	//   "request": {
	//     "$ref": "BlockRequest"
	//   },
	//   "response": {
	//     "$ref": "BlockResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.cases.callBack":

type CasesCallBackCall struct {
	s               *Service
	name            string
	callbackrequest *CallBackRequest
	urlParams_      gensupport.URLParams
	ctx_            context.Context
	header_         http.Header
}

// CallBack: Makes a callback. Deauthenticates customer.
func (r *CasesService) CallBack(name string, callbackrequest *CallBackRequest) *CasesCallBackCall {
	c := &CasesCallBackCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.callbackrequest = callbackrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesCallBackCall) Fields(s ...googleapi.Field) *CasesCallBackCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesCallBackCall) Context(ctx context.Context) *CasesCallBackCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesCallBackCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesCallBackCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.callbackrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:callBack")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.callBack" call.
// Exactly one of *CallBackResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *CallBackResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesCallBackCall) Do(opts ...googleapi.CallOption) (*CallBackResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &CallBackResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Makes a callback. Deauthenticates customer.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.cases.callBack",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:callBack",
	//   "request": {
	//     "$ref": "CallBackRequest"
	//   },
	//   "response": {
	//     "$ref": "CallBackResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.cases.createNewCase":

type CasesCreateNewCaseCall struct {
	s                    *Service
	createnewcaserequest *CreateNewCaseRequest
	urlParams_           gensupport.URLParams
	ctx_                 context.Context
	header_              http.Header
}

// CreateNewCase: Creates a new case (Note this is not a true CRUD
// method as no resource is being passed in).
func (r *CasesService) CreateNewCase(createnewcaserequest *CreateNewCaseRequest) *CasesCreateNewCaseCall {
	c := &CasesCreateNewCaseCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.createnewcaserequest = createnewcaserequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesCreateNewCaseCall) Fields(s ...googleapi.Field) *CasesCreateNewCaseCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesCreateNewCaseCall) Context(ctx context.Context) *CasesCreateNewCaseCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesCreateNewCaseCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesCreateNewCaseCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.createnewcaserequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "cases:createNewCase")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.createNewCase" call.
// Exactly one of *CreateNewCaseResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *CreateNewCaseResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesCreateNewCaseCall) Do(opts ...googleapi.CallOption) (*CreateNewCaseResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &CreateNewCaseResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Creates a new case (Note this is not a true CRUD method as no resource is being passed in).",
	//   "httpMethod": "POST",
	//   "id": "supportcases.cases.createNewCase",
	//   "path": "cases:createNewCase",
	//   "request": {
	//     "$ref": "CreateNewCaseRequest"
	//   },
	//   "response": {
	//     "$ref": "CreateNewCaseResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.cases.createNoteConsult":

type CasesCreateNoteConsultCall struct {
	s                            *Service
	name                         string
	createnoteconsultcaserequest *CreateNoteConsultCaseRequest
	urlParams_                   gensupport.URLParams
	ctx_                         context.Context
	header_                      http.Header
}

// CreateNoteConsult: Creates a consult case via note channel for this
// case.
func (r *CasesService) CreateNoteConsult(name string, createnoteconsultcaserequest *CreateNoteConsultCaseRequest) *CasesCreateNoteConsultCall {
	c := &CasesCreateNoteConsultCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.createnoteconsultcaserequest = createnoteconsultcaserequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesCreateNoteConsultCall) Fields(s ...googleapi.Field) *CasesCreateNoteConsultCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesCreateNoteConsultCall) Context(ctx context.Context) *CasesCreateNoteConsultCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesCreateNoteConsultCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesCreateNoteConsultCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.createnoteconsultcaserequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:createNoteConsult")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.createNoteConsult" call.
// Exactly one of *CreateNoteConsultCaseResponse or error will be
// non-nil. Any non-2xx status code is an error. Response headers are in
// either *CreateNoteConsultCaseResponse.ServerResponse.Header or (if a
// response was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesCreateNoteConsultCall) Do(opts ...googleapi.CallOption) (*CreateNoteConsultCaseResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &CreateNoteConsultCaseResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Creates a consult case via note channel for this case.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.cases.createNoteConsult",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:createNoteConsult",
	//   "request": {
	//     "$ref": "CreateNoteConsultCaseRequest"
	//   },
	//   "response": {
	//     "$ref": "CreateNoteConsultCaseResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.cases.createRealTimeConsult":

type CasesCreateRealTimeConsultCall struct {
	s                                *Service
	name                             string
	createrealtimeconsultcaserequest *CreateRealTimeConsultCaseRequest
	urlParams_                       gensupport.URLParams
	ctx_                             context.Context
	header_                          http.Header
}

// CreateRealTimeConsult: Creates a consult case via RealTime channel
// for this case.
func (r *CasesService) CreateRealTimeConsult(name string, createrealtimeconsultcaserequest *CreateRealTimeConsultCaseRequest) *CasesCreateRealTimeConsultCall {
	c := &CasesCreateRealTimeConsultCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.createrealtimeconsultcaserequest = createrealtimeconsultcaserequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesCreateRealTimeConsultCall) Fields(s ...googleapi.Field) *CasesCreateRealTimeConsultCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesCreateRealTimeConsultCall) Context(ctx context.Context) *CasesCreateRealTimeConsultCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesCreateRealTimeConsultCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesCreateRealTimeConsultCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.createrealtimeconsultcaserequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:createRealTimeConsult")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.createRealTimeConsult" call.
// Exactly one of *CreateRealTimeConsultCaseResponse or error will be
// non-nil. Any non-2xx status code is an error. Response headers are in
// either *CreateRealTimeConsultCaseResponse.ServerResponse.Header or
// (if a response was returned at all) in
// error.(*googleapi.Error).Header. Use googleapi.IsNotModified to check
// whether the returned error was because http.StatusNotModified was
// returned.
func (c *CasesCreateRealTimeConsultCall) Do(opts ...googleapi.CallOption) (*CreateRealTimeConsultCaseResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &CreateRealTimeConsultCaseResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Creates a consult case via RealTime channel for this case.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.cases.createRealTimeConsult",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:createRealTimeConsult",
	//   "request": {
	//     "$ref": "CreateRealTimeConsultCaseRequest"
	//   },
	//   "response": {
	//     "$ref": "CreateRealTimeConsultCaseResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.cases.dedupe":

type CasesDedupeCall struct {
	s             *Service
	name          string
	deduperequest *DedupeRequest
	urlParams_    gensupport.URLParams
	ctx_          context.Context
	header_       http.Header
}

// Dedupe: Deduplicates a case by closing duplicates cases.
func (r *CasesService) Dedupe(name string, deduperequest *DedupeRequest) *CasesDedupeCall {
	c := &CasesDedupeCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.deduperequest = deduperequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesDedupeCall) Fields(s ...googleapi.Field) *CasesDedupeCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesDedupeCall) Context(ctx context.Context) *CasesDedupeCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesDedupeCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesDedupeCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.deduperequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:dedupe")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.dedupe" call.
// Exactly one of *DedupeResponse or error will be non-nil. Any non-2xx
// status code is an error. Response headers are in either
// *DedupeResponse.ServerResponse.Header or (if a response was returned
// at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesDedupeCall) Do(opts ...googleapi.CallOption) (*DedupeResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &DedupeResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Deduplicates a case by closing duplicates cases.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.cases.dedupe",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:dedupe",
	//   "request": {
	//     "$ref": "DedupeRequest"
	//   },
	//   "response": {
	//     "$ref": "DedupeResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.cases.escalate":

type CasesEscalateCall struct {
	s               *Service
	name            string
	escalaterequest *EscalateRequest
	urlParams_      gensupport.URLParams
	ctx_            context.Context
	header_         http.Header
}

// Escalate: Escalates a case.
func (r *CasesService) Escalate(name string, escalaterequest *EscalateRequest) *CasesEscalateCall {
	c := &CasesEscalateCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.escalaterequest = escalaterequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesEscalateCall) Fields(s ...googleapi.Field) *CasesEscalateCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesEscalateCall) Context(ctx context.Context) *CasesEscalateCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesEscalateCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesEscalateCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.escalaterequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:escalate")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.escalate" call.
// Exactly one of *EscalateResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *EscalateResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesEscalateCall) Do(opts ...googleapi.CallOption) (*EscalateResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &EscalateResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Escalates a case.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.cases.escalate",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:escalate",
	//   "request": {
	//     "$ref": "EscalateRequest"
	//   },
	//   "response": {
	//     "$ref": "EscalateResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.cases.finish":

type CasesFinishCall struct {
	s             *Service
	name          string
	finishrequest *FinishRequest
	urlParams_    gensupport.URLParams
	ctx_          context.Context
	header_       http.Header
}

// Finish: Sets the specified case to the finished state and triggers
// other finisher related workflows.
func (r *CasesService) Finish(name string, finishrequest *FinishRequest) *CasesFinishCall {
	c := &CasesFinishCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.finishrequest = finishrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesFinishCall) Fields(s ...googleapi.Field) *CasesFinishCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesFinishCall) Context(ctx context.Context) *CasesFinishCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesFinishCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesFinishCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.finishrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:finish")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.finish" call.
// Exactly one of *FinishResponse or error will be non-nil. Any non-2xx
// status code is an error. Response headers are in either
// *FinishResponse.ServerResponse.Header or (if a response was returned
// at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesFinishCall) Do(opts ...googleapi.CallOption) (*FinishResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &FinishResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Sets the specified case to the finished state and triggers other finisher related workflows.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.cases.finish",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:finish",
	//   "request": {
	//     "$ref": "FinishRequest"
	//   },
	//   "response": {
	//     "$ref": "FinishResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.cases.get":

type CasesGetCall struct {
	s            *Service
	name         string
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// Get: Gets the specified case.
func (r *CasesService) Get(name string) *CasesGetCall {
	c := &CasesGetCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesGetCall) Fields(s ...googleapi.Field) *CasesGetCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *CasesGetCall) IfNoneMatch(entityTag string) *CasesGetCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesGetCall) Context(ctx context.Context) *CasesGetCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesGetCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesGetCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.get" call.
// Exactly one of *Case or error will be non-nil. Any non-2xx status
// code is an error. Response headers are in either
// *Case.ServerResponse.Header or (if a response was returned at all) in
// error.(*googleapi.Error).Header. Use googleapi.IsNotModified to check
// whether the returned error was because http.StatusNotModified was
// returned.
func (c *CasesGetCall) Do(opts ...googleapi.CallOption) (*Case, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &Case{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Gets the specified case.",
	//   "httpMethod": "GET",
	//   "id": "supportcases.cases.get",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}",
	//   "response": {
	//     "$ref": "Case"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.cases.getAgentSearchCount":

type CasesGetAgentSearchCountCall struct {
	s            *Service
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// GetAgentSearchCount: Gets the search count for cases associated with
// the calling agent, and begin sending Tango notifications when the
// count changes.
func (r *CasesService) GetAgentSearchCount() *CasesGetAgentSearchCountCall {
	c := &CasesGetAgentSearchCountCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesGetAgentSearchCountCall) Fields(s ...googleapi.Field) *CasesGetAgentSearchCountCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *CasesGetAgentSearchCountCall) IfNoneMatch(entityTag string) *CasesGetAgentSearchCountCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesGetAgentSearchCountCall) Context(ctx context.Context) *CasesGetAgentSearchCountCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesGetAgentSearchCountCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesGetAgentSearchCountCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "cases:getAgentSearchCount")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.getAgentSearchCount" call.
// Exactly one of *GetAgentSearchCountResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *GetAgentSearchCountResponse.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesGetAgentSearchCountCall) Do(opts ...googleapi.CallOption) (*GetAgentSearchCountResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &GetAgentSearchCountResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Gets the search count for cases associated with the calling agent, and begin sending Tango notifications when the count changes.",
	//   "httpMethod": "GET",
	//   "id": "supportcases.cases.getAgentSearchCount",
	//   "path": "cases:getAgentSearchCount",
	//   "response": {
	//     "$ref": "GetAgentSearchCountResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.cases.getAgentUnreadCasesInfo":

type CasesGetAgentUnreadCasesInfoCall struct {
	s            *Service
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// GetAgentUnreadCasesInfo: Gets information about unread cases for the
// calling agent. Only intended for use by the Cases frontend.
func (r *CasesService) GetAgentUnreadCasesInfo() *CasesGetAgentUnreadCasesInfoCall {
	c := &CasesGetAgentUnreadCasesInfoCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesGetAgentUnreadCasesInfoCall) Fields(s ...googleapi.Field) *CasesGetAgentUnreadCasesInfoCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *CasesGetAgentUnreadCasesInfoCall) IfNoneMatch(entityTag string) *CasesGetAgentUnreadCasesInfoCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesGetAgentUnreadCasesInfoCall) Context(ctx context.Context) *CasesGetAgentUnreadCasesInfoCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesGetAgentUnreadCasesInfoCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesGetAgentUnreadCasesInfoCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "cases:GetAgentUnreadCasesInfo")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.getAgentUnreadCasesInfo" call.
// Exactly one of *GetAgentUnreadCasesInfoResponse or error will be
// non-nil. Any non-2xx status code is an error. Response headers are in
// either *GetAgentUnreadCasesInfoResponse.ServerResponse.Header or (if
// a response was returned at all) in error.(*googleapi.Error).Header.
// Use googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesGetAgentUnreadCasesInfoCall) Do(opts ...googleapi.CallOption) (*GetAgentUnreadCasesInfoResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &GetAgentUnreadCasesInfoResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Gets information about unread cases for the calling agent. Only intended for use by the Cases frontend.",
	//   "httpMethod": "GET",
	//   "id": "supportcases.cases.getAgentUnreadCasesInfo",
	//   "path": "cases:GetAgentUnreadCasesInfo",
	//   "response": {
	//     "$ref": "GetAgentUnreadCasesInfoResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.cases.getConsultSla":

type CasesGetConsultSlaCall struct {
	s                    *Service
	name                 string
	getconsultslarequest *GetConsultSlaRequest
	urlParams_           gensupport.URLParams
	ctx_                 context.Context
	header_              http.Header
}

// GetConsultSla: Calculates the SLA due by time that a new consult case
// would have.
func (r *CasesService) GetConsultSla(name string, getconsultslarequest *GetConsultSlaRequest) *CasesGetConsultSlaCall {
	c := &CasesGetConsultSlaCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.getconsultslarequest = getconsultslarequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesGetConsultSlaCall) Fields(s ...googleapi.Field) *CasesGetConsultSlaCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesGetConsultSlaCall) Context(ctx context.Context) *CasesGetConsultSlaCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesGetConsultSlaCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesGetConsultSlaCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.getconsultslarequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:getConsultSla")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.getConsultSla" call.
// Exactly one of *GetConsultSlaResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *GetConsultSlaResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesGetConsultSlaCall) Do(opts ...googleapi.CallOption) (*GetConsultSlaResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &GetConsultSlaResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Calculates the SLA due by time that a new consult case would have.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.cases.getConsultSla",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:getConsultSla",
	//   "request": {
	//     "$ref": "GetConsultSlaRequest"
	//   },
	//   "response": {
	//     "$ref": "GetConsultSlaResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.cases.listByAgent":

type CasesListByAgentCall struct {
	s            *Service
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// ListByAgent: Lists cases associated with the agent. Only intended for
// use by the Cases frontend.
func (r *CasesService) ListByAgent() *CasesListByAgentCall {
	c := &CasesListByAgentCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	return c
}

// CaseType sets the optional parameter "caseType":
//
// Possible values:
//   "ASSIGNED"
//   "RECENT"
//   "UNKNOWN_CASE_TYPE"
//   "WAITING"
func (c *CasesListByAgentCall) CaseType(caseType string) *CasesListByAgentCall {
	c.urlParams_.Set("caseType", caseType)
	return c
}

// PageSize sets the optional parameter "pageSize":
func (c *CasesListByAgentCall) PageSize(pageSize int64) *CasesListByAgentCall {
	c.urlParams_.Set("pageSize", fmt.Sprint(pageSize))
	return c
}

// PageToken sets the optional parameter "pageToken":
func (c *CasesListByAgentCall) PageToken(pageToken string) *CasesListByAgentCall {
	c.urlParams_.Set("pageToken", pageToken)
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesListByAgentCall) Fields(s ...googleapi.Field) *CasesListByAgentCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *CasesListByAgentCall) IfNoneMatch(entityTag string) *CasesListByAgentCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesListByAgentCall) Context(ctx context.Context) *CasesListByAgentCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesListByAgentCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesListByAgentCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "cases:listByAgent")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.listByAgent" call.
// Exactly one of *ListCasesByAgentResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *ListCasesByAgentResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesListByAgentCall) Do(opts ...googleapi.CallOption) (*ListCasesByAgentResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ListCasesByAgentResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Lists cases associated with the agent. Only intended for use by the Cases frontend.",
	//   "httpMethod": "GET",
	//   "id": "supportcases.cases.listByAgent",
	//   "parameters": {
	//     "caseType": {
	//       "enum": [
	//         "ASSIGNED",
	//         "RECENT",
	//         "UNKNOWN_CASE_TYPE",
	//         "WAITING"
	//       ],
	//       "enumDescriptions": [
	//         "",
	//         "",
	//         "",
	//         ""
	//       ],
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "pageSize": {
	//       "format": "int32",
	//       "location": "query",
	//       "type": "integer"
	//     },
	//     "pageToken": {
	//       "location": "query",
	//       "type": "string"
	//     }
	//   },
	//   "path": "cases:listByAgent",
	//   "response": {
	//     "$ref": "ListCasesByAgentResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// Pages invokes f for each page of results.
// A non-nil error returned from f will halt the iteration.
// The provided context supersedes any context provided to the Context method.
func (c *CasesListByAgentCall) Pages(ctx context.Context, f func(*ListCasesByAgentResponse) error) error {
	c.ctx_ = ctx
	defer c.PageToken(c.urlParams_.Get("pageToken")) // reset paging to original point
	for {
		x, err := c.Do()
		if err != nil {
			return err
		}
		if err := f(x); err != nil {
			return err
		}
		if x.PageToken == "" {
			return nil
		}
		c.PageToken(x.PageToken)
	}
}

// method id "supportcases.cases.needsInfo":

type CasesNeedsInfoCall struct {
	s                *Service
	name             string
	needsinforequest *NeedsInfoRequest
	urlParams_       gensupport.URLParams
	ctx_             context.Context
	header_          http.Header
}

// NeedsInfo: Sets the specified case to the needs info state.
func (r *CasesService) NeedsInfo(name string, needsinforequest *NeedsInfoRequest) *CasesNeedsInfoCall {
	c := &CasesNeedsInfoCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.needsinforequest = needsinforequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesNeedsInfoCall) Fields(s ...googleapi.Field) *CasesNeedsInfoCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesNeedsInfoCall) Context(ctx context.Context) *CasesNeedsInfoCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesNeedsInfoCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesNeedsInfoCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.needsinforequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:needsInfo")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.needsInfo" call.
// Exactly one of *NeedsInfoResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *NeedsInfoResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesNeedsInfoCall) Do(opts ...googleapi.CallOption) (*NeedsInfoResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &NeedsInfoResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Sets the specified case to the needs info state.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.cases.needsInfo",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:needsInfo",
	//   "request": {
	//     "$ref": "NeedsInfoRequest"
	//   },
	//   "response": {
	//     "$ref": "NeedsInfoResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.cases.offeredSolution":

type CasesOfferedSolutionCall struct {
	s                      *Service
	name                   string
	offeredsolutionrequest *OfferedSolutionRequest
	urlParams_             gensupport.URLParams
	ctx_                   context.Context
	header_                http.Header
}

// OfferedSolution: Sets the specified case to the solution offered
// state indicating that a previous communication was a "solution".
func (r *CasesService) OfferedSolution(name string, offeredsolutionrequest *OfferedSolutionRequest) *CasesOfferedSolutionCall {
	c := &CasesOfferedSolutionCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.offeredsolutionrequest = offeredsolutionrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesOfferedSolutionCall) Fields(s ...googleapi.Field) *CasesOfferedSolutionCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesOfferedSolutionCall) Context(ctx context.Context) *CasesOfferedSolutionCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesOfferedSolutionCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesOfferedSolutionCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.offeredsolutionrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:offeredSolution")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.offeredSolution" call.
// Exactly one of *OfferedSolutionResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *OfferedSolutionResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesOfferedSolutionCall) Do(opts ...googleapi.CallOption) (*OfferedSolutionResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &OfferedSolutionResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Sets the specified case to the solution offered state indicating that a previous communication was a \"solution\".",
	//   "httpMethod": "POST",
	//   "id": "supportcases.cases.offeredSolution",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:offeredSolution",
	//   "request": {
	//     "$ref": "OfferedSolutionRequest"
	//   },
	//   "response": {
	//     "$ref": "OfferedSolutionResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.cases.read":

type CasesReadCall struct {
	s               *Service
	name            string
	readcaserequest *ReadCaseRequest
	urlParams_      gensupport.URLParams
	ctx_            context.Context
	header_         http.Header
}

// Read: Marks a case as read by the calling agent if they are the
// assignee.
func (r *CasesService) Read(name string, readcaserequest *ReadCaseRequest) *CasesReadCall {
	c := &CasesReadCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.readcaserequest = readcaserequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesReadCall) Fields(s ...googleapi.Field) *CasesReadCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesReadCall) Context(ctx context.Context) *CasesReadCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesReadCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesReadCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.readcaserequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:read")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.read" call.
// Exactly one of *Empty or error will be non-nil. Any non-2xx status
// code is an error. Response headers are in either
// *Empty.ServerResponse.Header or (if a response was returned at all)
// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to
// check whether the returned error was because http.StatusNotModified
// was returned.
func (c *CasesReadCall) Do(opts ...googleapi.CallOption) (*Empty, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &Empty{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Marks a case as read by the calling agent if they are the assignee.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.cases.read",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:read",
	//   "request": {
	//     "$ref": "ReadCaseRequest"
	//   },
	//   "response": {
	//     "$ref": "Empty"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.cases.release":

type CasesReleaseCall struct {
	s              *Service
	name           string
	releaserequest *ReleaseRequest
	urlParams_     gensupport.URLParams
	ctx_           context.Context
	header_        http.Header
}

// Release: Unassigns the specified case from the gaia user associated
// with this call.
func (r *CasesService) Release(name string, releaserequest *ReleaseRequest) *CasesReleaseCall {
	c := &CasesReleaseCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.releaserequest = releaserequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesReleaseCall) Fields(s ...googleapi.Field) *CasesReleaseCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesReleaseCall) Context(ctx context.Context) *CasesReleaseCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesReleaseCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesReleaseCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.releaserequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:release")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.release" call.
// Exactly one of *ReleaseResponse or error will be non-nil. Any non-2xx
// status code is an error. Response headers are in either
// *ReleaseResponse.ServerResponse.Header or (if a response was returned
// at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesReleaseCall) Do(opts ...googleapi.CallOption) (*ReleaseResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ReleaseResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Unassigns the specified case from the gaia user associated with this call.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.cases.release",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:release",
	//   "request": {
	//     "$ref": "ReleaseRequest"
	//   },
	//   "response": {
	//     "$ref": "ReleaseResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.cases.route":

type CasesRouteCall struct {
	s            *Service
	name         string
	routerequest *RouteRequest
	urlParams_   gensupport.URLParams
	ctx_         context.Context
	header_      http.Header
}

// Route: Routes the specified case to another product or team.
func (r *CasesService) Route(name string, routerequest *RouteRequest) *CasesRouteCall {
	c := &CasesRouteCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.routerequest = routerequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesRouteCall) Fields(s ...googleapi.Field) *CasesRouteCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesRouteCall) Context(ctx context.Context) *CasesRouteCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesRouteCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesRouteCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.routerequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:route")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.route" call.
// Exactly one of *RouteResponse or error will be non-nil. Any non-2xx
// status code is an error. Response headers are in either
// *RouteResponse.ServerResponse.Header or (if a response was returned
// at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesRouteCall) Do(opts ...googleapi.CallOption) (*RouteResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &RouteResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Routes the specified case to another product or team.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.cases.route",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:route",
	//   "request": {
	//     "$ref": "RouteRequest"
	//   },
	//   "response": {
	//     "$ref": "RouteResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.cases.spam":

type CasesSpamCall struct {
	s           *Service
	name        string
	spamrequest *SpamRequest
	urlParams_  gensupport.URLParams
	ctx_        context.Context
	header_     http.Header
}

// Spam: Marks the specified case as spam.
func (r *CasesService) Spam(name string, spamrequest *SpamRequest) *CasesSpamCall {
	c := &CasesSpamCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.spamrequest = spamrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesSpamCall) Fields(s ...googleapi.Field) *CasesSpamCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesSpamCall) Context(ctx context.Context) *CasesSpamCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesSpamCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesSpamCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.spamrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:spam")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.spam" call.
// Exactly one of *SpamResponse or error will be non-nil. Any non-2xx
// status code is an error. Response headers are in either
// *SpamResponse.ServerResponse.Header or (if a response was returned at
// all) in error.(*googleapi.Error).Header. Use googleapi.IsNotModified
// to check whether the returned error was because
// http.StatusNotModified was returned.
func (c *CasesSpamCall) Do(opts ...googleapi.CallOption) (*SpamResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &SpamResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Marks the specified case as spam.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.cases.spam",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:spam",
	//   "request": {
	//     "$ref": "SpamRequest"
	//   },
	//   "response": {
	//     "$ref": "SpamResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.cases.split":

type CasesSplitCall struct {
	s            *Service
	name         string
	splitrequest *SplitRequest
	urlParams_   gensupport.URLParams
	ctx_         context.Context
	header_      http.Header
}

// Split: Move a case's communication into a new case.
func (r *CasesService) Split(name string, splitrequest *SplitRequest) *CasesSplitCall {
	c := &CasesSplitCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.splitrequest = splitrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesSplitCall) Fields(s ...googleapi.Field) *CasesSplitCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesSplitCall) Context(ctx context.Context) *CasesSplitCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesSplitCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesSplitCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.splitrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:split")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.split" call.
// Exactly one of *SplitResponse or error will be non-nil. Any non-2xx
// status code is an error. Response headers are in either
// *SplitResponse.ServerResponse.Header or (if a response was returned
// at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesSplitCall) Do(opts ...googleapi.CallOption) (*SplitResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &SplitResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Move a case's communication into a new case.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.cases.split",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:split",
	//   "request": {
	//     "$ref": "SplitRequest"
	//   },
	//   "response": {
	//     "$ref": "SplitResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.cases.suggestNewEmailHeaders":

type CasesSuggestNewEmailHeadersCall struct {
	s            *Service
	name         string
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// SuggestNewEmailHeaders: Suggests a set of headers (like from aliases)
// for a new email on a case. Suppresses warning: GET requires method
// name starting with "Get" or "List"
func (r *CasesService) SuggestNewEmailHeaders(name string) *CasesSuggestNewEmailHeadersCall {
	c := &CasesSuggestNewEmailHeadersCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesSuggestNewEmailHeadersCall) Fields(s ...googleapi.Field) *CasesSuggestNewEmailHeadersCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *CasesSuggestNewEmailHeadersCall) IfNoneMatch(entityTag string) *CasesSuggestNewEmailHeadersCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesSuggestNewEmailHeadersCall) Context(ctx context.Context) *CasesSuggestNewEmailHeadersCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesSuggestNewEmailHeadersCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesSuggestNewEmailHeadersCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:suggestNewEmailHeaders")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.suggestNewEmailHeaders" call.
// Exactly one of *SuggestNewEmailHeadersResponse or error will be
// non-nil. Any non-2xx status code is an error. Response headers are in
// either *SuggestNewEmailHeadersResponse.ServerResponse.Header or (if a
// response was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesSuggestNewEmailHeadersCall) Do(opts ...googleapi.CallOption) (*SuggestNewEmailHeadersResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &SuggestNewEmailHeadersResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Suggests a set of headers (like from aliases) for a new email on a case. Suppresses warning: GET requires method name starting with \"Get\" or \"List\"",
	//   "httpMethod": "GET",
	//   "id": "supportcases.cases.suggestNewEmailHeaders",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:suggestNewEmailHeaders",
	//   "response": {
	//     "$ref": "SuggestNewEmailHeadersResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.cases.suggestNoteHeaders":

type CasesSuggestNoteHeadersCall struct {
	s            *Service
	name         string
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// SuggestNoteHeaders: Suggests a set of headers (like from aliases) for
// a note Suppresses warning: GET requires method name starting with
// "Get" or "List"
func (r *CasesService) SuggestNoteHeaders(name string) *CasesSuggestNoteHeadersCall {
	c := &CasesSuggestNoteHeadersCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesSuggestNoteHeadersCall) Fields(s ...googleapi.Field) *CasesSuggestNoteHeadersCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *CasesSuggestNoteHeadersCall) IfNoneMatch(entityTag string) *CasesSuggestNoteHeadersCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesSuggestNoteHeadersCall) Context(ctx context.Context) *CasesSuggestNoteHeadersCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesSuggestNoteHeadersCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesSuggestNoteHeadersCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:suggestNoteHeaders")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.suggestNoteHeaders" call.
// Exactly one of *SuggestNoteHeadersResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *SuggestNoteHeadersResponse.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesSuggestNoteHeadersCall) Do(opts ...googleapi.CallOption) (*SuggestNoteHeadersResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &SuggestNoteHeadersResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Suggests a set of headers (like from aliases) for a note Suppresses warning: GET requires method name starting with \"Get\" or \"List\"",
	//   "httpMethod": "GET",
	//   "id": "supportcases.cases.suggestNoteHeaders",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:suggestNoteHeaders",
	//   "response": {
	//     "$ref": "SuggestNoteHeadersResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.cases.take":

type CasesTakeCall struct {
	s           *Service
	name        string
	takerequest *TakeRequest
	urlParams_  gensupport.URLParams
	ctx_        context.Context
	header_     http.Header
}

// Take: Assigns the specified case to the gaia user associated with
// this call.
func (r *CasesService) Take(name string, takerequest *TakeRequest) *CasesTakeCall {
	c := &CasesTakeCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.takerequest = takerequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesTakeCall) Fields(s ...googleapi.Field) *CasesTakeCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesTakeCall) Context(ctx context.Context) *CasesTakeCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesTakeCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesTakeCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.takerequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:take")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.take" call.
// Exactly one of *TakeResponse or error will be non-nil. Any non-2xx
// status code is an error. Response headers are in either
// *TakeResponse.ServerResponse.Header or (if a response was returned at
// all) in error.(*googleapi.Error).Header. Use googleapi.IsNotModified
// to check whether the returned error was because
// http.StatusNotModified was returned.
func (c *CasesTakeCall) Do(opts ...googleapi.CallOption) (*TakeResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &TakeResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Assigns the specified case to the gaia user associated with this call.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.cases.take",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:take",
	//   "request": {
	//     "$ref": "TakeRequest"
	//   },
	//   "response": {
	//     "$ref": "TakeResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.cases.transfer":

type CasesTransferCall struct {
	s               *Service
	name            string
	transferrequest *TransferRequest
	urlParams_      gensupport.URLParams
	ctx_            context.Context
	header_         http.Header
}

// Transfer: Transfers the specified case from the gaia user associated
// with this call to another user.
func (r *CasesService) Transfer(name string, transferrequest *TransferRequest) *CasesTransferCall {
	c := &CasesTransferCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.transferrequest = transferrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesTransferCall) Fields(s ...googleapi.Field) *CasesTransferCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesTransferCall) Context(ctx context.Context) *CasesTransferCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesTransferCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesTransferCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.transferrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:transfer")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.transfer" call.
// Exactly one of *TransferResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *TransferResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesTransferCall) Do(opts ...googleapi.CallOption) (*TransferResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &TransferResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Transfers the specified case from the gaia user associated with this call to another user.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.cases.transfer",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:transfer",
	//   "request": {
	//     "$ref": "TransferRequest"
	//   },
	//   "response": {
	//     "$ref": "TransferResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.cases.unassign":

type CasesUnassignCall struct {
	s               *Service
	name            string
	unassignrequest *UnassignRequest
	urlParams_      gensupport.URLParams
	ctx_            context.Context
	header_         http.Header
}

// Unassign: Unassigns the specified case from its current assignee.
// Note that this also moves the case to the UNASSIGNED state.
func (r *CasesService) Unassign(name string, unassignrequest *UnassignRequest) *CasesUnassignCall {
	c := &CasesUnassignCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.unassignrequest = unassignrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesUnassignCall) Fields(s ...googleapi.Field) *CasesUnassignCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesUnassignCall) Context(ctx context.Context) *CasesUnassignCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesUnassignCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesUnassignCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.unassignrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:unassign")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.unassign" call.
// Exactly one of *UnassignResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *UnassignResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesUnassignCall) Do(opts ...googleapi.CallOption) (*UnassignResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &UnassignResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Unassigns the specified case from its current assignee. Note that this also moves the case to the UNASSIGNED state.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.cases.unassign",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:unassign",
	//   "request": {
	//     "$ref": "UnassignRequest"
	//   },
	//   "response": {
	//     "$ref": "UnassignResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.cases.unblock":

type CasesUnblockCall struct {
	s              *Service
	name           string
	unblockrequest *UnblockRequest
	urlParams_     gensupport.URLParams
	ctx_           context.Context
	header_        http.Header
}

// Unblock: Indicate the specified case is no longer blocked by a
// bug/case/ legal order, etc.
func (r *CasesService) Unblock(name string, unblockrequest *UnblockRequest) *CasesUnblockCall {
	c := &CasesUnblockCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.unblockrequest = unblockrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesUnblockCall) Fields(s ...googleapi.Field) *CasesUnblockCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesUnblockCall) Context(ctx context.Context) *CasesUnblockCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesUnblockCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesUnblockCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.unblockrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:unblock")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.unblock" call.
// Exactly one of *UnblockResponse or error will be non-nil. Any non-2xx
// status code is an error. Response headers are in either
// *UnblockResponse.ServerResponse.Header or (if a response was returned
// at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesUnblockCall) Do(opts ...googleapi.CallOption) (*UnblockResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &UnblockResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Indicate the specified case is no longer blocked by a bug/case/ legal order, etc.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.cases.unblock",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:unblock",
	//   "request": {
	//     "$ref": "UnblockRequest"
	//   },
	//   "response": {
	//     "$ref": "UnblockResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.cases.unspam":

type CasesUnspamCall struct {
	s             *Service
	name          string
	unspamrequest *UnspamRequest
	urlParams_    gensupport.URLParams
	ctx_          context.Context
	header_       http.Header
}

// Unspam: Unmark the specified case as spam.
func (r *CasesService) Unspam(name string, unspamrequest *UnspamRequest) *CasesUnspamCall {
	c := &CasesUnspamCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.unspamrequest = unspamrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesUnspamCall) Fields(s ...googleapi.Field) *CasesUnspamCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesUnspamCall) Context(ctx context.Context) *CasesUnspamCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesUnspamCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesUnspamCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.unspamrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:unspam")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.unspam" call.
// Exactly one of *UnspamResponse or error will be non-nil. Any non-2xx
// status code is an error. Response headers are in either
// *UnspamResponse.ServerResponse.Header or (if a response was returned
// at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesUnspamCall) Do(opts ...googleapi.CallOption) (*UnspamResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &UnspamResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Unmark the specified case as spam.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.cases.unspam",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:unspam",
	//   "request": {
	//     "$ref": "UnspamRequest"
	//   },
	//   "response": {
	//     "$ref": "UnspamResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.cases.updateDisconnectedChannel":

type CasesUpdateDisconnectedChannelCall struct {
	s                                *Service
	name                             string
	updatedisconnectedchannelrequest *UpdateDisconnectedChannelRequest
	urlParams_                       gensupport.URLParams
	ctx_                             context.Context
	header_                          http.Header
}

// UpdateDisconnectedChannel: Updates disconnected channel for the
// specified case.
func (r *CasesService) UpdateDisconnectedChannel(name string, updatedisconnectedchannelrequest *UpdateDisconnectedChannelRequest) *CasesUpdateDisconnectedChannelCall {
	c := &CasesUpdateDisconnectedChannelCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.updatedisconnectedchannelrequest = updatedisconnectedchannelrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesUpdateDisconnectedChannelCall) Fields(s ...googleapi.Field) *CasesUpdateDisconnectedChannelCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesUpdateDisconnectedChannelCall) Context(ctx context.Context) *CasesUpdateDisconnectedChannelCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesUpdateDisconnectedChannelCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesUpdateDisconnectedChannelCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.updatedisconnectedchannelrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:updateDisconnectedChannel")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.updateDisconnectedChannel" call.
// Exactly one of *Empty or error will be non-nil. Any non-2xx status
// code is an error. Response headers are in either
// *Empty.ServerResponse.Header or (if a response was returned at all)
// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to
// check whether the returned error was because http.StatusNotModified
// was returned.
func (c *CasesUpdateDisconnectedChannelCall) Do(opts ...googleapi.CallOption) (*Empty, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &Empty{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Updates disconnected channel for the specified case.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.cases.updateDisconnectedChannel",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:updateDisconnectedChannel",
	//   "request": {
	//     "$ref": "UpdateDisconnectedChannelRequest"
	//   },
	//   "response": {
	//     "$ref": "Empty"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.cases.updateEligibleProgram":

type CasesUpdateEligibleProgramCall struct {
	s                            *Service
	name                         string
	updateeligibleprogramrequest *UpdateEligibleProgramRequest
	urlParams_                   gensupport.URLParams
	ctx_                         context.Context
	header_                      http.Header
}

// UpdateEligibleProgram: Update customer attributes indicating
// eligibility for opportunities.
func (r *CasesService) UpdateEligibleProgram(name string, updateeligibleprogramrequest *UpdateEligibleProgramRequest) *CasesUpdateEligibleProgramCall {
	c := &CasesUpdateEligibleProgramCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.updateeligibleprogramrequest = updateeligibleprogramrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesUpdateEligibleProgramCall) Fields(s ...googleapi.Field) *CasesUpdateEligibleProgramCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesUpdateEligibleProgramCall) Context(ctx context.Context) *CasesUpdateEligibleProgramCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesUpdateEligibleProgramCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesUpdateEligibleProgramCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.updateeligibleprogramrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:updateEligibleProgram")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.updateEligibleProgram" call.
// Exactly one of *UpdateEligibleProgramResponse or error will be
// non-nil. Any non-2xx status code is an error. Response headers are in
// either *UpdateEligibleProgramResponse.ServerResponse.Header or (if a
// response was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesUpdateEligibleProgramCall) Do(opts ...googleapi.CallOption) (*UpdateEligibleProgramResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &UpdateEligibleProgramResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Update customer attributes indicating eligibility for opportunities.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.cases.updateEligibleProgram",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:updateEligibleProgram",
	//   "request": {
	//     "$ref": "UpdateEligibleProgramRequest"
	//   },
	//   "response": {
	//     "$ref": "UpdateEligibleProgramResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.cases.validateConsultForm":

type CasesValidateConsultFormCall struct {
	s                          *Service
	validateconsultformrequest *ValidateConsultFormRequest
	urlParams_                 gensupport.URLParams
	ctx_                       context.Context
	header_                    http.Header
}

// ValidateConsultForm: Validates that consult forms are properly
// configured.
func (r *CasesService) ValidateConsultForm(validateconsultformrequest *ValidateConsultFormRequest) *CasesValidateConsultFormCall {
	c := &CasesValidateConsultFormCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.validateconsultformrequest = validateconsultformrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesValidateConsultFormCall) Fields(s ...googleapi.Field) *CasesValidateConsultFormCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesValidateConsultFormCall) Context(ctx context.Context) *CasesValidateConsultFormCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesValidateConsultFormCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesValidateConsultFormCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.validateconsultformrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "cases:validateConsultForm")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.validateConsultForm" call.
// Exactly one of *ValidateConsultFormResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *ValidateConsultFormResponse.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesValidateConsultFormCall) Do(opts ...googleapi.CallOption) (*ValidateConsultFormResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ValidateConsultFormResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Validates that consult forms are properly configured.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.cases.validateConsultForm",
	//   "path": "cases:validateConsultForm",
	//   "request": {
	//     "$ref": "ValidateConsultFormRequest"
	//   },
	//   "response": {
	//     "$ref": "ValidateConsultFormResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly",
	//     "https://www.googleapis.com/auth/supportcontent"
	//   ]
	// }

}

// method id "supportcases.cases.waitForConsult":

type CasesWaitForConsultCall struct {
	s                     *Service
	name                  string
	waitforconsultrequest *WaitForConsultRequest
	urlParams_            gensupport.URLParams
	ctx_                  context.Context
	header_               http.Header
}

// WaitForConsult: Sets a case with an active consult case to IN_CONSULT
// state.
func (r *CasesService) WaitForConsult(name string, waitforconsultrequest *WaitForConsultRequest) *CasesWaitForConsultCall {
	c := &CasesWaitForConsultCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.waitforconsultrequest = waitforconsultrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesWaitForConsultCall) Fields(s ...googleapi.Field) *CasesWaitForConsultCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesWaitForConsultCall) Context(ctx context.Context) *CasesWaitForConsultCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesWaitForConsultCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesWaitForConsultCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.waitforconsultrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:WaitForConsult")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.waitForConsult" call.
// Exactly one of *WaitForConsultResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *WaitForConsultResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesWaitForConsultCall) Do(opts ...googleapi.CallOption) (*WaitForConsultResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &WaitForConsultResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Sets a case with an active consult case to IN_CONSULT state.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.cases.waitForConsult",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:WaitForConsult",
	//   "request": {
	//     "$ref": "WaitForConsultRequest"
	//   },
	//   "response": {
	//     "$ref": "WaitForConsultResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.cases.attributes.batchUpdate":

type CasesAttributesBatchUpdateCall struct {
	s                            *Service
	name                         string
	batchupdateattributesrequest *BatchUpdateAttributesRequest
	urlParams_                   gensupport.URLParams
	ctx_                         context.Context
	header_                      http.Header
}

// BatchUpdate: Updates attributes for a case in batch.
func (r *CasesAttributesService) BatchUpdate(name string, batchupdateattributesrequest *BatchUpdateAttributesRequest) *CasesAttributesBatchUpdateCall {
	c := &CasesAttributesBatchUpdateCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.batchupdateattributesrequest = batchupdateattributesrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesAttributesBatchUpdateCall) Fields(s ...googleapi.Field) *CasesAttributesBatchUpdateCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesAttributesBatchUpdateCall) Context(ctx context.Context) *CasesAttributesBatchUpdateCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesAttributesBatchUpdateCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesAttributesBatchUpdateCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.batchupdateattributesrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:batchUpdate")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.attributes.batchUpdate" call.
// Exactly one of *BatchUpdateAttributesResponse or error will be
// non-nil. Any non-2xx status code is an error. Response headers are in
// either *BatchUpdateAttributesResponse.ServerResponse.Header or (if a
// response was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesAttributesBatchUpdateCall) Do(opts ...googleapi.CallOption) (*BatchUpdateAttributesResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &BatchUpdateAttributesResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Updates attributes for a case in batch.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.cases.attributes.batchUpdate",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:batchUpdate",
	//   "request": {
	//     "$ref": "BatchUpdateAttributesRequest"
	//   },
	//   "response": {
	//     "$ref": "BatchUpdateAttributesResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.cases.attributes.update":

type CasesAttributesUpdateCall struct {
	s                       *Service
	name                    string
	updateattributesrequest *UpdateAttributesRequest
	urlParams_              gensupport.URLParams
	ctx_                    context.Context
	header_                 http.Header
}

// Update: Updates attributes for the specified case. Note: This call
// adds the attributes that are not present on the case to the case. If
// attribute is already present on the case, the value is replaced.
func (r *CasesAttributesService) Update(name string, updateattributesrequest *UpdateAttributesRequest) *CasesAttributesUpdateCall {
	c := &CasesAttributesUpdateCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.updateattributesrequest = updateattributesrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesAttributesUpdateCall) Fields(s ...googleapi.Field) *CasesAttributesUpdateCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesAttributesUpdateCall) Context(ctx context.Context) *CasesAttributesUpdateCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesAttributesUpdateCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesAttributesUpdateCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.updateattributesrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:update")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.attributes.update" call.
// Exactly one of *UpdateAttributesResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *UpdateAttributesResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesAttributesUpdateCall) Do(opts ...googleapi.CallOption) (*UpdateAttributesResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &UpdateAttributesResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Updates attributes for the specified case. Note: This call adds the attributes that are not present on the case to the case. If attribute is already present on the case, the value is replaced.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.cases.attributes.update",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:update",
	//   "request": {
	//     "$ref": "UpdateAttributesRequest"
	//   },
	//   "response": {
	//     "$ref": "UpdateAttributesResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.cases.customer.authenticate":

type CasesCustomerAuthenticateCall struct {
	s                   *Service
	name                string
	authenticaterequest *AuthenticateRequest
	urlParams_          gensupport.URLParams
	ctx_                context.Context
	header_             http.Header
}

// Authenticate: Authenticates a customer for a case.
func (r *CasesCustomerService) Authenticate(name string, authenticaterequest *AuthenticateRequest) *CasesCustomerAuthenticateCall {
	c := &CasesCustomerAuthenticateCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.authenticaterequest = authenticaterequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesCustomerAuthenticateCall) Fields(s ...googleapi.Field) *CasesCustomerAuthenticateCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesCustomerAuthenticateCall) Context(ctx context.Context) *CasesCustomerAuthenticateCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesCustomerAuthenticateCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesCustomerAuthenticateCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.authenticaterequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:authenticate")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.customer.authenticate" call.
// Exactly one of *AuthenticateResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *AuthenticateResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesCustomerAuthenticateCall) Do(opts ...googleapi.CallOption) (*AuthenticateResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &AuthenticateResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Authenticates a customer for a case.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.cases.customer.authenticate",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:authenticate",
	//   "request": {
	//     "$ref": "AuthenticateRequest"
	//   },
	//   "response": {
	//     "$ref": "AuthenticateResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.cases.customer.billingAddresses":

type CasesCustomerBillingAddressesCall struct {
	s                           *Service
	name                        string
	listbillingaddressesrequest *ListBillingAddressesRequest
	urlParams_                  gensupport.URLParams
	ctx_                        context.Context
	header_                     http.Header
}

// BillingAddresses: Lists customer billing addresses. Only intended for
// use by the Cases frontend.
func (r *CasesCustomerService) BillingAddresses(name string, listbillingaddressesrequest *ListBillingAddressesRequest) *CasesCustomerBillingAddressesCall {
	c := &CasesCustomerBillingAddressesCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.listbillingaddressesrequest = listbillingaddressesrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesCustomerBillingAddressesCall) Fields(s ...googleapi.Field) *CasesCustomerBillingAddressesCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesCustomerBillingAddressesCall) Context(ctx context.Context) *CasesCustomerBillingAddressesCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesCustomerBillingAddressesCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesCustomerBillingAddressesCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.listbillingaddressesrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}/customer/billingAddresses")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.customer.billingAddresses" call.
// Exactly one of *ListBillingAddressesResponse or error will be
// non-nil. Any non-2xx status code is an error. Response headers are in
// either *ListBillingAddressesResponse.ServerResponse.Header or (if a
// response was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesCustomerBillingAddressesCall) Do(opts ...googleapi.CallOption) (*ListBillingAddressesResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ListBillingAddressesResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Lists customer billing addresses. Only intended for use by the Cases frontend.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.cases.customer.billingAddresses",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}/customer/billingAddresses",
	//   "request": {
	//     "$ref": "ListBillingAddressesRequest"
	//   },
	//   "response": {
	//     "$ref": "ListBillingAddressesResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.cases.customer.checkWalletAccount":

type CasesCustomerCheckWalletAccountCall struct {
	s            *Service
	name         string
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// CheckWalletAccount: Check if a customer has a valid Wallet account.
// Suppresses warning: GET requires method name starting with "Get" or
// "List"
func (r *CasesCustomerService) CheckWalletAccount(name string) *CasesCustomerCheckWalletAccountCall {
	c := &CasesCustomerCheckWalletAccountCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	return c
}

// Email sets the optional parameter "email":
func (c *CasesCustomerCheckWalletAccountCall) Email(email string) *CasesCustomerCheckWalletAccountCall {
	c.urlParams_.Set("email", email)
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesCustomerCheckWalletAccountCall) Fields(s ...googleapi.Field) *CasesCustomerCheckWalletAccountCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *CasesCustomerCheckWalletAccountCall) IfNoneMatch(entityTag string) *CasesCustomerCheckWalletAccountCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesCustomerCheckWalletAccountCall) Context(ctx context.Context) *CasesCustomerCheckWalletAccountCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesCustomerCheckWalletAccountCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesCustomerCheckWalletAccountCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:checkWalletAccount")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.customer.checkWalletAccount" call.
// Exactly one of *CheckWalletAccountResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *CheckWalletAccountResponse.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesCustomerCheckWalletAccountCall) Do(opts ...googleapi.CallOption) (*CheckWalletAccountResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &CheckWalletAccountResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Check if a customer has a valid Wallet account. Suppresses warning: GET requires method name starting with \"Get\" or \"List\"",
	//   "httpMethod": "GET",
	//   "id": "supportcases.cases.customer.checkWalletAccount",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "email": {
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:checkWalletAccount",
	//   "response": {
	//     "$ref": "CheckWalletAccountResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.cases.customer.deauthenticate":

type CasesCustomerDeauthenticateCall struct {
	s                     *Service
	name                  string
	deauthenticaterequest *DeauthenticateRequest
	urlParams_            gensupport.URLParams
	ctx_                  context.Context
	header_               http.Header
}

// Deauthenticate: Deauthenticates a customer for a case.
func (r *CasesCustomerService) Deauthenticate(name string, deauthenticaterequest *DeauthenticateRequest) *CasesCustomerDeauthenticateCall {
	c := &CasesCustomerDeauthenticateCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.deauthenticaterequest = deauthenticaterequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesCustomerDeauthenticateCall) Fields(s ...googleapi.Field) *CasesCustomerDeauthenticateCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesCustomerDeauthenticateCall) Context(ctx context.Context) *CasesCustomerDeauthenticateCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesCustomerDeauthenticateCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesCustomerDeauthenticateCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.deauthenticaterequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:deauthenticate")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.customer.deauthenticate" call.
// Exactly one of *DeauthenticateResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *DeauthenticateResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesCustomerDeauthenticateCall) Do(opts ...googleapi.CallOption) (*DeauthenticateResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &DeauthenticateResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Deauthenticates a customer for a case.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.cases.customer.deauthenticate",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:deauthenticate",
	//   "request": {
	//     "$ref": "DeauthenticateRequest"
	//   },
	//   "response": {
	//     "$ref": "DeauthenticateResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.cases.customer.getAuthenticationCreditCardTypes":

type CasesCustomerGetAuthenticationCreditCardTypesCall struct {
	s                                       *Service
	name                                    string
	getauthenticationcreditcardtypesrequest *GetAuthenticationCreditCardTypesRequest
	urlParams_                              gensupport.URLParams
	ctx_                                    context.Context
	header_                                 http.Header
}

// GetAuthenticationCreditCardTypes: Get credit card types for
// authentication.
func (r *CasesCustomerService) GetAuthenticationCreditCardTypes(name string, getauthenticationcreditcardtypesrequest *GetAuthenticationCreditCardTypesRequest) *CasesCustomerGetAuthenticationCreditCardTypesCall {
	c := &CasesCustomerGetAuthenticationCreditCardTypesCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.getauthenticationcreditcardtypesrequest = getauthenticationcreditcardtypesrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesCustomerGetAuthenticationCreditCardTypesCall) Fields(s ...googleapi.Field) *CasesCustomerGetAuthenticationCreditCardTypesCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesCustomerGetAuthenticationCreditCardTypesCall) Context(ctx context.Context) *CasesCustomerGetAuthenticationCreditCardTypesCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesCustomerGetAuthenticationCreditCardTypesCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesCustomerGetAuthenticationCreditCardTypesCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.getauthenticationcreditcardtypesrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:getAuthenticationCreditCardTypes")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.customer.getAuthenticationCreditCardTypes" call.
// Exactly one of *GetAuthenticationCreditCardTypesResponse or error
// will be non-nil. Any non-2xx status code is an error. Response
// headers are in either
// *GetAuthenticationCreditCardTypesResponse.ServerResponse.Header or
// (if a response was returned at all) in
// error.(*googleapi.Error).Header. Use googleapi.IsNotModified to check
// whether the returned error was because http.StatusNotModified was
// returned.
func (c *CasesCustomerGetAuthenticationCreditCardTypesCall) Do(opts ...googleapi.CallOption) (*GetAuthenticationCreditCardTypesResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &GetAuthenticationCreditCardTypesResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Get credit card types for authentication.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.cases.customer.getAuthenticationCreditCardTypes",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:getAuthenticationCreditCardTypes",
	//   "request": {
	//     "$ref": "GetAuthenticationCreditCardTypesRequest"
	//   },
	//   "response": {
	//     "$ref": "GetAuthenticationCreditCardTypesResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.cases.customer.getAuthenticationQuestions":

type CasesCustomerGetAuthenticationQuestionsCall struct {
	s                                 *Service
	name                              string
	getauthenticationquestionsrequest *GetAuthenticationQuestionsRequest
	urlParams_                        gensupport.URLParams
	ctx_                              context.Context
	header_                           http.Header
}

// GetAuthenticationQuestions: Get authentication options for a customer
// for a case.
func (r *CasesCustomerService) GetAuthenticationQuestions(name string, getauthenticationquestionsrequest *GetAuthenticationQuestionsRequest) *CasesCustomerGetAuthenticationQuestionsCall {
	c := &CasesCustomerGetAuthenticationQuestionsCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.getauthenticationquestionsrequest = getauthenticationquestionsrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesCustomerGetAuthenticationQuestionsCall) Fields(s ...googleapi.Field) *CasesCustomerGetAuthenticationQuestionsCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesCustomerGetAuthenticationQuestionsCall) Context(ctx context.Context) *CasesCustomerGetAuthenticationQuestionsCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesCustomerGetAuthenticationQuestionsCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesCustomerGetAuthenticationQuestionsCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.getauthenticationquestionsrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:getAuthenticationQuestions")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.customer.getAuthenticationQuestions" call.
// Exactly one of *GetAuthenticationQuestionsResponse or error will be
// non-nil. Any non-2xx status code is an error. Response headers are in
// either *GetAuthenticationQuestionsResponse.ServerResponse.Header or
// (if a response was returned at all) in
// error.(*googleapi.Error).Header. Use googleapi.IsNotModified to check
// whether the returned error was because http.StatusNotModified was
// returned.
func (c *CasesCustomerGetAuthenticationQuestionsCall) Do(opts ...googleapi.CallOption) (*GetAuthenticationQuestionsResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &GetAuthenticationQuestionsResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Get authentication options for a customer for a case.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.cases.customer.getAuthenticationQuestions",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:getAuthenticationQuestions",
	//   "request": {
	//     "$ref": "GetAuthenticationQuestionsRequest"
	//   },
	//   "response": {
	//     "$ref": "GetAuthenticationQuestionsResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.cases.customer.getAuthenticationResult":

type CasesCustomerGetAuthenticationResultCall struct {
	s                              *Service
	name                           string
	getauthenticationresultrequest *GetAuthenticationResultRequest
	urlParams_                     gensupport.URLParams
	ctx_                           context.Context
	header_                        http.Header
}

// GetAuthenticationResult: Get authentication status for a customer of
// a case.
func (r *CasesCustomerService) GetAuthenticationResult(name string, getauthenticationresultrequest *GetAuthenticationResultRequest) *CasesCustomerGetAuthenticationResultCall {
	c := &CasesCustomerGetAuthenticationResultCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.getauthenticationresultrequest = getauthenticationresultrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesCustomerGetAuthenticationResultCall) Fields(s ...googleapi.Field) *CasesCustomerGetAuthenticationResultCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesCustomerGetAuthenticationResultCall) Context(ctx context.Context) *CasesCustomerGetAuthenticationResultCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesCustomerGetAuthenticationResultCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesCustomerGetAuthenticationResultCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.getauthenticationresultrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:getAuthenticationResult")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.customer.getAuthenticationResult" call.
// Exactly one of *GetAuthenticationResultResponse or error will be
// non-nil. Any non-2xx status code is an error. Response headers are in
// either *GetAuthenticationResultResponse.ServerResponse.Header or (if
// a response was returned at all) in error.(*googleapi.Error).Header.
// Use googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesCustomerGetAuthenticationResultCall) Do(opts ...googleapi.CallOption) (*GetAuthenticationResultResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &GetAuthenticationResultResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Get authentication status for a customer of a case.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.cases.customer.getAuthenticationResult",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:getAuthenticationResult",
	//   "request": {
	//     "$ref": "GetAuthenticationResultRequest"
	//   },
	//   "response": {
	//     "$ref": "GetAuthenticationResultResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.cases.customer.getBusinessListings":

type CasesCustomerGetBusinessListingsCall struct {
	s                          *Service
	name                       string
	getbusinesslistingsrequest *GetBusinessListingsRequest
	urlParams_                 gensupport.URLParams
	ctx_                       context.Context
	header_                    http.Header
}

// GetBusinessListings: Gets the business listings for a customer.
func (r *CasesCustomerService) GetBusinessListings(name string, getbusinesslistingsrequest *GetBusinessListingsRequest) *CasesCustomerGetBusinessListingsCall {
	c := &CasesCustomerGetBusinessListingsCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.getbusinesslistingsrequest = getbusinesslistingsrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesCustomerGetBusinessListingsCall) Fields(s ...googleapi.Field) *CasesCustomerGetBusinessListingsCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesCustomerGetBusinessListingsCall) Context(ctx context.Context) *CasesCustomerGetBusinessListingsCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesCustomerGetBusinessListingsCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesCustomerGetBusinessListingsCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.getbusinesslistingsrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:getBusinessListings")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.customer.getBusinessListings" call.
// Exactly one of *GetBusinessListingsResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *GetBusinessListingsResponse.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesCustomerGetBusinessListingsCall) Do(opts ...googleapi.CallOption) (*GetBusinessListingsResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &GetBusinessListingsResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Gets the business listings for a customer.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.cases.customer.getBusinessListings",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:getBusinessListings",
	//   "request": {
	//     "$ref": "GetBusinessListingsRequest"
	//   },
	//   "response": {
	//     "$ref": "GetBusinessListingsResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.cases.customer.shippingAddresses":

type CasesCustomerShippingAddressesCall struct {
	s                            *Service
	name                         string
	listshippingaddressesrequest *ListShippingAddressesRequest
	urlParams_                   gensupport.URLParams
	ctx_                         context.Context
	header_                      http.Header
}

// ShippingAddresses: Lists customer shipping addresses. Only intended
// for use by the Cases frontend.
func (r *CasesCustomerService) ShippingAddresses(name string, listshippingaddressesrequest *ListShippingAddressesRequest) *CasesCustomerShippingAddressesCall {
	c := &CasesCustomerShippingAddressesCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.listshippingaddressesrequest = listshippingaddressesrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesCustomerShippingAddressesCall) Fields(s ...googleapi.Field) *CasesCustomerShippingAddressesCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesCustomerShippingAddressesCall) Context(ctx context.Context) *CasesCustomerShippingAddressesCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesCustomerShippingAddressesCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesCustomerShippingAddressesCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.listshippingaddressesrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}/customer/shippingAddresses")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.customer.shippingAddresses" call.
// Exactly one of *ListShippingAddressesResponse or error will be
// non-nil. Any non-2xx status code is an error. Response headers are in
// either *ListShippingAddressesResponse.ServerResponse.Header or (if a
// response was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesCustomerShippingAddressesCall) Do(opts ...googleapi.CallOption) (*ListShippingAddressesResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ListShippingAddressesResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Lists customer shipping addresses. Only intended for use by the Cases frontend.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.cases.customer.shippingAddresses",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}/customer/shippingAddresses",
	//   "request": {
	//     "$ref": "ListShippingAddressesRequest"
	//   },
	//   "response": {
	//     "$ref": "ListShippingAddressesResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.cases.customer.updateContactEmail":

type CasesCustomerUpdateContactEmailCall struct {
	s                         *Service
	name                      string
	updatecontactemailrequest *UpdateContactEmailRequest
	urlParams_                gensupport.URLParams
	ctx_                      context.Context
	header_                   http.Header
}

// UpdateContactEmail: Updates contact email for the specified case.
func (r *CasesCustomerService) UpdateContactEmail(name string, updatecontactemailrequest *UpdateContactEmailRequest) *CasesCustomerUpdateContactEmailCall {
	c := &CasesCustomerUpdateContactEmailCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.updatecontactemailrequest = updatecontactemailrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesCustomerUpdateContactEmailCall) Fields(s ...googleapi.Field) *CasesCustomerUpdateContactEmailCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesCustomerUpdateContactEmailCall) Context(ctx context.Context) *CasesCustomerUpdateContactEmailCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesCustomerUpdateContactEmailCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesCustomerUpdateContactEmailCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.updatecontactemailrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:updateContactEmail")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.customer.updateContactEmail" call.
// Exactly one of *UpdateContactEmailResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *UpdateContactEmailResponse.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesCustomerUpdateContactEmailCall) Do(opts ...googleapi.CallOption) (*UpdateContactEmailResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &UpdateContactEmailResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Updates contact email for the specified case.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.cases.customer.updateContactEmail",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:updateContactEmail",
	//   "request": {
	//     "$ref": "UpdateContactEmailRequest"
	//   },
	//   "response": {
	//     "$ref": "UpdateContactEmailResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.cases.customer.updateContactName":

type CasesCustomerUpdateContactNameCall struct {
	s                        *Service
	name                     string
	updatecontactnamerequest *UpdateContactNameRequest
	urlParams_               gensupport.URLParams
	ctx_                     context.Context
	header_                  http.Header
}

// UpdateContactName: Updates contact name for the specified case.
func (r *CasesCustomerService) UpdateContactName(name string, updatecontactnamerequest *UpdateContactNameRequest) *CasesCustomerUpdateContactNameCall {
	c := &CasesCustomerUpdateContactNameCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.updatecontactnamerequest = updatecontactnamerequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesCustomerUpdateContactNameCall) Fields(s ...googleapi.Field) *CasesCustomerUpdateContactNameCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesCustomerUpdateContactNameCall) Context(ctx context.Context) *CasesCustomerUpdateContactNameCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesCustomerUpdateContactNameCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesCustomerUpdateContactNameCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.updatecontactnamerequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:updateContactName")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.customer.updateContactName" call.
// Exactly one of *UpdateContactNameResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *UpdateContactNameResponse.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesCustomerUpdateContactNameCall) Do(opts ...googleapi.CallOption) (*UpdateContactNameResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &UpdateContactNameResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Updates contact name for the specified case.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.cases.customer.updateContactName",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:updateContactName",
	//   "request": {
	//     "$ref": "UpdateContactNameRequest"
	//   },
	//   "response": {
	//     "$ref": "UpdateContactNameResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.cases.customer.updateCustomerAttributes":

type CasesCustomerUpdateCustomerAttributesCall struct {
	s                               *Service
	name                            string
	updatecustomerattributesrequest *UpdateCustomerAttributesRequest
	urlParams_                      gensupport.URLParams
	ctx_                            context.Context
	header_                         http.Header
}

// UpdateCustomerAttributes: Updates customer attributes for the
// specified case.
func (r *CasesCustomerService) UpdateCustomerAttributes(name string, updatecustomerattributesrequest *UpdateCustomerAttributesRequest) *CasesCustomerUpdateCustomerAttributesCall {
	c := &CasesCustomerUpdateCustomerAttributesCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.updatecustomerattributesrequest = updatecustomerattributesrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesCustomerUpdateCustomerAttributesCall) Fields(s ...googleapi.Field) *CasesCustomerUpdateCustomerAttributesCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesCustomerUpdateCustomerAttributesCall) Context(ctx context.Context) *CasesCustomerUpdateCustomerAttributesCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesCustomerUpdateCustomerAttributesCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesCustomerUpdateCustomerAttributesCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.updatecustomerattributesrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:updateCustomerAttributes")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.customer.updateCustomerAttributes" call.
// Exactly one of *UpdateCustomerAttributesResponse or error will be
// non-nil. Any non-2xx status code is an error. Response headers are in
// either *UpdateCustomerAttributesResponse.ServerResponse.Header or (if
// a response was returned at all) in error.(*googleapi.Error).Header.
// Use googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesCustomerUpdateCustomerAttributesCall) Do(opts ...googleapi.CallOption) (*UpdateCustomerAttributesResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &UpdateCustomerAttributesResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Updates customer attributes for the specified case.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.cases.customer.updateCustomerAttributes",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:updateCustomerAttributes",
	//   "request": {
	//     "$ref": "UpdateCustomerAttributesRequest"
	//   },
	//   "response": {
	//     "$ref": "UpdateCustomerAttributesResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.cases.customer.contact.callbackNumber":

type CasesCustomerContactCallbackNumberCall struct {
	s                        *Service
	name                     string
	setcallbacknumberrequest *SetCallbackNumberRequest
	urlParams_               gensupport.URLParams
	ctx_                     context.Context
	header_                  http.Header
}

// CallbackNumber: Sets a callback phone number.
func (r *CasesCustomerContactService) CallbackNumber(name string, setcallbacknumberrequest *SetCallbackNumberRequest) *CasesCustomerContactCallbackNumberCall {
	c := &CasesCustomerContactCallbackNumberCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.setcallbacknumberrequest = setcallbacknumberrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesCustomerContactCallbackNumberCall) Fields(s ...googleapi.Field) *CasesCustomerContactCallbackNumberCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesCustomerContactCallbackNumberCall) Context(ctx context.Context) *CasesCustomerContactCallbackNumberCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesCustomerContactCallbackNumberCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesCustomerContactCallbackNumberCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.setcallbacknumberrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.customer.contact.callbackNumber" call.
// Exactly one of *SetCallbackNumberResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *SetCallbackNumberResponse.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesCustomerContactCallbackNumberCall) Do(opts ...googleapi.CallOption) (*SetCallbackNumberResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &SetCallbackNumberResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Sets a callback phone number.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.cases.customer.contact.callbackNumber",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}",
	//   "request": {
	//     "$ref": "SetCallbackNumberRequest"
	//   },
	//   "response": {
	//     "$ref": "SetCallbackNumberResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.cases.customer.contact.getCallbackNumber":

type CasesCustomerContactGetCallbackNumberCall struct {
	s            *Service
	name         string
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// GetCallbackNumber: Gets the callback phone number associated with a
// case.
func (r *CasesCustomerContactService) GetCallbackNumber(name string) *CasesCustomerContactGetCallbackNumberCall {
	c := &CasesCustomerContactGetCallbackNumberCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesCustomerContactGetCallbackNumberCall) Fields(s ...googleapi.Field) *CasesCustomerContactGetCallbackNumberCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *CasesCustomerContactGetCallbackNumberCall) IfNoneMatch(entityTag string) *CasesCustomerContactGetCallbackNumberCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesCustomerContactGetCallbackNumberCall) Context(ctx context.Context) *CasesCustomerContactGetCallbackNumberCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesCustomerContactGetCallbackNumberCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesCustomerContactGetCallbackNumberCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.customer.contact.getCallbackNumber" call.
// Exactly one of *PhoneNumber or error will be non-nil. Any non-2xx
// status code is an error. Response headers are in either
// *PhoneNumber.ServerResponse.Header or (if a response was returned at
// all) in error.(*googleapi.Error).Header. Use googleapi.IsNotModified
// to check whether the returned error was because
// http.StatusNotModified was returned.
func (c *CasesCustomerContactGetCallbackNumberCall) Do(opts ...googleapi.CallOption) (*PhoneNumber, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &PhoneNumber{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Gets the callback phone number associated with a case.",
	//   "httpMethod": "GET",
	//   "id": "supportcases.cases.customer.contact.getCallbackNumber",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}",
	//   "response": {
	//     "$ref": "PhoneNumber"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.cases.issue.updateAccounts":

type CasesIssueUpdateAccountsCall struct {
	s                     *Service
	name                  string
	updateaccountsrequest *UpdateAccountsRequest
	urlParams_            gensupport.URLParams
	ctx_                  context.Context
	header_               http.Header
}

// UpdateAccounts: Updates case's accounts.
func (r *CasesIssueService) UpdateAccounts(name string, updateaccountsrequest *UpdateAccountsRequest) *CasesIssueUpdateAccountsCall {
	c := &CasesIssueUpdateAccountsCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.updateaccountsrequest = updateaccountsrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesIssueUpdateAccountsCall) Fields(s ...googleapi.Field) *CasesIssueUpdateAccountsCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesIssueUpdateAccountsCall) Context(ctx context.Context) *CasesIssueUpdateAccountsCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesIssueUpdateAccountsCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesIssueUpdateAccountsCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.updateaccountsrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("PUT", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.issue.updateAccounts" call.
// Exactly one of *UpdateAccountsResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *UpdateAccountsResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesIssueUpdateAccountsCall) Do(opts ...googleapi.CallOption) (*UpdateAccountsResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &UpdateAccountsResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Updates case's accounts.",
	//   "httpMethod": "PUT",
	//   "id": "supportcases.cases.issue.updateAccounts",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}",
	//   "request": {
	//     "$ref": "UpdateAccountsRequest"
	//   },
	//   "response": {
	//     "$ref": "UpdateAccountsResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.cases.issue.updateLocale":

type CasesIssueUpdateLocaleCall struct {
	s                   *Service
	name                string
	updatelocalerequest *UpdateLocaleRequest
	urlParams_          gensupport.URLParams
	ctx_                context.Context
	header_             http.Header
}

// UpdateLocale: Updates the case's issue locale.
func (r *CasesIssueService) UpdateLocale(name string, updatelocalerequest *UpdateLocaleRequest) *CasesIssueUpdateLocaleCall {
	c := &CasesIssueUpdateLocaleCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.updatelocalerequest = updatelocalerequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesIssueUpdateLocaleCall) Fields(s ...googleapi.Field) *CasesIssueUpdateLocaleCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesIssueUpdateLocaleCall) Context(ctx context.Context) *CasesIssueUpdateLocaleCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesIssueUpdateLocaleCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesIssueUpdateLocaleCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.updatelocalerequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:updateLocale")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.issue.updateLocale" call.
// Exactly one of *UpdateLocaleResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *UpdateLocaleResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesIssueUpdateLocaleCall) Do(opts ...googleapi.CallOption) (*UpdateLocaleResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &UpdateLocaleResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Updates the case's issue locale.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.cases.issue.updateLocale",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:updateLocale",
	//   "request": {
	//     "$ref": "UpdateLocaleRequest"
	//   },
	//   "response": {
	//     "$ref": "UpdateLocaleResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.cases.issue.updateProduct":

type CasesIssueUpdateProductCall struct {
	s                    *Service
	name                 string
	updateproductrequest *UpdateProductRequest
	urlParams_           gensupport.URLParams
	ctx_                 context.Context
	header_              http.Header
}

// UpdateProduct: Updates product for the specified case.
func (r *CasesIssueService) UpdateProduct(name string, updateproductrequest *UpdateProductRequest) *CasesIssueUpdateProductCall {
	c := &CasesIssueUpdateProductCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.updateproductrequest = updateproductrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesIssueUpdateProductCall) Fields(s ...googleapi.Field) *CasesIssueUpdateProductCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesIssueUpdateProductCall) Context(ctx context.Context) *CasesIssueUpdateProductCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesIssueUpdateProductCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesIssueUpdateProductCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.updateproductrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("PUT", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.issue.updateProduct" call.
// Exactly one of *Product or error will be non-nil. Any non-2xx status
// code is an error. Response headers are in either
// *Product.ServerResponse.Header or (if a response was returned at all)
// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to
// check whether the returned error was because http.StatusNotModified
// was returned.
func (c *CasesIssueUpdateProductCall) Do(opts ...googleapi.CallOption) (*Product, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &Product{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Updates product for the specified case.",
	//   "httpMethod": "PUT",
	//   "id": "supportcases.cases.issue.updateProduct",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}",
	//   "request": {
	//     "$ref": "UpdateProductRequest"
	//   },
	//   "response": {
	//     "$ref": "Product"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.cases.issue.updateSummary":

type CasesIssueUpdateSummaryCall struct {
	s                    *Service
	name                 string
	updatesummaryrequest *UpdateSummaryRequest
	urlParams_           gensupport.URLParams
	ctx_                 context.Context
	header_              http.Header
}

// UpdateSummary: Updates case's issue summary.
func (r *CasesIssueService) UpdateSummary(name string, updatesummaryrequest *UpdateSummaryRequest) *CasesIssueUpdateSummaryCall {
	c := &CasesIssueUpdateSummaryCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.updatesummaryrequest = updatesummaryrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesIssueUpdateSummaryCall) Fields(s ...googleapi.Field) *CasesIssueUpdateSummaryCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesIssueUpdateSummaryCall) Context(ctx context.Context) *CasesIssueUpdateSummaryCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesIssueUpdateSummaryCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesIssueUpdateSummaryCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.updatesummaryrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:updateSummary")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.issue.updateSummary" call.
// Exactly one of *UpdateSummaryResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *UpdateSummaryResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesIssueUpdateSummaryCall) Do(opts ...googleapi.CallOption) (*UpdateSummaryResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &UpdateSummaryResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Updates case's issue summary.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.cases.issue.updateSummary",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:updateSummary",
	//   "request": {
	//     "$ref": "UpdateSummaryRequest"
	//   },
	//   "response": {
	//     "$ref": "UpdateSummaryResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.cases.issue.product.updateAgentCategories":

type CasesIssueProductUpdateAgentCategoriesCall struct {
	s                            *Service
	name                         string
	updateagentcategoriesrequest *UpdateAgentCategoriesRequest
	urlParams_                   gensupport.URLParams
	ctx_                         context.Context
	header_                      http.Header
}

// UpdateAgentCategories: Updates agent categories for the specified
// case. Note: This call replaces categories on the case by new
// categories passed in the request.
func (r *CasesIssueProductService) UpdateAgentCategories(name string, updateagentcategoriesrequest *UpdateAgentCategoriesRequest) *CasesIssueProductUpdateAgentCategoriesCall {
	c := &CasesIssueProductUpdateAgentCategoriesCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.updateagentcategoriesrequest = updateagentcategoriesrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesIssueProductUpdateAgentCategoriesCall) Fields(s ...googleapi.Field) *CasesIssueProductUpdateAgentCategoriesCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesIssueProductUpdateAgentCategoriesCall) Context(ctx context.Context) *CasesIssueProductUpdateAgentCategoriesCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesIssueProductUpdateAgentCategoriesCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesIssueProductUpdateAgentCategoriesCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.updateagentcategoriesrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:updateAgentCategories")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.issue.product.updateAgentCategories" call.
// Exactly one of *UpdateAgentCategoriesResponse or error will be
// non-nil. Any non-2xx status code is an error. Response headers are in
// either *UpdateAgentCategoriesResponse.ServerResponse.Header or (if a
// response was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesIssueProductUpdateAgentCategoriesCall) Do(opts ...googleapi.CallOption) (*UpdateAgentCategoriesResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &UpdateAgentCategoriesResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Updates agent categories for the specified case. Note: This call replaces categories on the case by new categories passed in the request.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.cases.issue.product.updateAgentCategories",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:updateAgentCategories",
	//   "request": {
	//     "$ref": "UpdateAgentCategoriesRequest"
	//   },
	//   "response": {
	//     "$ref": "UpdateAgentCategoriesResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.cases.workflows.get":

type CasesWorkflowsGetCall struct {
	s            *Service
	name         string
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// Get: Get workflow state.
func (r *CasesWorkflowsService) Get(name string) *CasesWorkflowsGetCall {
	c := &CasesWorkflowsGetCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesWorkflowsGetCall) Fields(s ...googleapi.Field) *CasesWorkflowsGetCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *CasesWorkflowsGetCall) IfNoneMatch(entityTag string) *CasesWorkflowsGetCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesWorkflowsGetCall) Context(ctx context.Context) *CasesWorkflowsGetCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesWorkflowsGetCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesWorkflowsGetCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.workflows.get" call.
// Exactly one of *CasesWorkflow or error will be non-nil. Any non-2xx
// status code is an error. Response headers are in either
// *CasesWorkflow.ServerResponse.Header or (if a response was returned
// at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesWorkflowsGetCall) Do(opts ...googleapi.CallOption) (*CasesWorkflow, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &CasesWorkflow{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Get workflow state.",
	//   "httpMethod": "GET",
	//   "id": "supportcases.cases.workflows.get",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}",
	//   "response": {
	//     "$ref": "CasesWorkflow"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.cases.workflows.post":

type CasesWorkflowsPostCall struct {
	s                     *Service
	name                  string
	createworkflowrequest *CreateWorkflowRequest
	urlParams_            gensupport.URLParams
	ctx_                  context.Context
	header_               http.Header
}

// Post: Creates a new workflow state on a case.
func (r *CasesWorkflowsService) Post(name string, createworkflowrequest *CreateWorkflowRequest) *CasesWorkflowsPostCall {
	c := &CasesWorkflowsPostCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.createworkflowrequest = createworkflowrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesWorkflowsPostCall) Fields(s ...googleapi.Field) *CasesWorkflowsPostCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesWorkflowsPostCall) Context(ctx context.Context) *CasesWorkflowsPostCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesWorkflowsPostCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesWorkflowsPostCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.createworkflowrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.workflows.post" call.
// Exactly one of *CasesWorkflow or error will be non-nil. Any non-2xx
// status code is an error. Response headers are in either
// *CasesWorkflow.ServerResponse.Header or (if a response was returned
// at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesWorkflowsPostCall) Do(opts ...googleapi.CallOption) (*CasesWorkflow, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &CasesWorkflow{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Creates a new workflow state on a case.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.cases.workflows.post",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}",
	//   "request": {
	//     "$ref": "CreateWorkflowRequest"
	//   },
	//   "response": {
	//     "$ref": "CasesWorkflow"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.cases.workflows.update":

type CasesWorkflowsUpdateCall struct {
	s                     *Service
	name                  string
	updateworkflowrequest *UpdateWorkflowRequest
	urlParams_            gensupport.URLParams
	ctx_                  context.Context
	header_               http.Header
}

// Update: Updates workflow state.
func (r *CasesWorkflowsService) Update(name string, updateworkflowrequest *UpdateWorkflowRequest) *CasesWorkflowsUpdateCall {
	c := &CasesWorkflowsUpdateCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.updateworkflowrequest = updateworkflowrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CasesWorkflowsUpdateCall) Fields(s ...googleapi.Field) *CasesWorkflowsUpdateCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CasesWorkflowsUpdateCall) Context(ctx context.Context) *CasesWorkflowsUpdateCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CasesWorkflowsUpdateCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CasesWorkflowsUpdateCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.updateworkflowrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:update")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("PUT", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.cases.workflows.update" call.
// Exactly one of *CasesWorkflow or error will be non-nil. Any non-2xx
// status code is an error. Response headers are in either
// *CasesWorkflow.ServerResponse.Header or (if a response was returned
// at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CasesWorkflowsUpdateCall) Do(opts ...googleapi.CallOption) (*CasesWorkflow, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &CasesWorkflow{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Updates workflow state.",
	//   "httpMethod": "PUT",
	//   "id": "supportcases.cases.workflows.update",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:update",
	//   "request": {
	//     "$ref": "UpdateWorkflowRequest"
	//   },
	//   "response": {
	//     "$ref": "CasesWorkflow"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.categoryInfos.batchGet":

type CategoryInfosBatchGetCall struct {
	s            *Service
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// BatchGet: Batch gets category info. (Best effort, returns valid
// category infos only) Suppresses warning: GET requires method name
// starting with "Get" or "List"
func (r *CategoryInfosService) BatchGet() *CategoryInfosBatchGetCall {
	c := &CategoryInfosBatchGetCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	return c
}

// Names sets the optional parameter "names":
func (c *CategoryInfosBatchGetCall) Names(names ...string) *CategoryInfosBatchGetCall {
	c.urlParams_.SetMulti("names", append([]string{}, names...))
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CategoryInfosBatchGetCall) Fields(s ...googleapi.Field) *CategoryInfosBatchGetCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *CategoryInfosBatchGetCall) IfNoneMatch(entityTag string) *CategoryInfosBatchGetCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CategoryInfosBatchGetCall) Context(ctx context.Context) *CategoryInfosBatchGetCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CategoryInfosBatchGetCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CategoryInfosBatchGetCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "categoryInfos:batchGet")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.categoryInfos.batchGet" call.
// Exactly one of *BatchGetCategoryInfosResponse or error will be
// non-nil. Any non-2xx status code is an error. Response headers are in
// either *BatchGetCategoryInfosResponse.ServerResponse.Header or (if a
// response was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CategoryInfosBatchGetCall) Do(opts ...googleapi.CallOption) (*BatchGetCategoryInfosResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &BatchGetCategoryInfosResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Batch gets category info. (Best effort, returns valid category infos only) Suppresses warning: GET requires method name starting with \"Get\" or \"List\"",
	//   "httpMethod": "GET",
	//   "id": "supportcases.categoryInfos.batchGet",
	//   "parameters": {
	//     "names": {
	//       "location": "query",
	//       "repeated": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "categoryInfos:batchGet",
	//   "response": {
	//     "$ref": "BatchGetCategoryInfosResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.categoryInfos.get":

type CategoryInfosGetCall struct {
	s            *Service
	name         string
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// Get: Gets the specified category info.
func (r *CategoryInfosService) Get(name string) *CategoryInfosGetCall {
	c := &CategoryInfosGetCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CategoryInfosGetCall) Fields(s ...googleapi.Field) *CategoryInfosGetCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *CategoryInfosGetCall) IfNoneMatch(entityTag string) *CategoryInfosGetCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CategoryInfosGetCall) Context(ctx context.Context) *CategoryInfosGetCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CategoryInfosGetCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CategoryInfosGetCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.categoryInfos.get" call.
// Exactly one of *CategoryInfo or error will be non-nil. Any non-2xx
// status code is an error. Response headers are in either
// *CategoryInfo.ServerResponse.Header or (if a response was returned at
// all) in error.(*googleapi.Error).Header. Use googleapi.IsNotModified
// to check whether the returned error was because
// http.StatusNotModified was returned.
func (c *CategoryInfosGetCall) Do(opts ...googleapi.CallOption) (*CategoryInfo, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &CategoryInfo{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Gets the specified category info.",
	//   "httpMethod": "GET",
	//   "id": "supportcases.categoryInfos.get",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}",
	//   "response": {
	//     "$ref": "CategoryInfo"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.categoryInfos.listChildren":

type CategoryInfosListChildrenCall struct {
	s            *Service
	name         string
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// ListChildren: Lists children category info.
func (r *CategoryInfosService) ListChildren(name string) *CategoryInfosListChildrenCall {
	c := &CategoryInfosListChildrenCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CategoryInfosListChildrenCall) Fields(s ...googleapi.Field) *CategoryInfosListChildrenCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *CategoryInfosListChildrenCall) IfNoneMatch(entityTag string) *CategoryInfosListChildrenCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CategoryInfosListChildrenCall) Context(ctx context.Context) *CategoryInfosListChildrenCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CategoryInfosListChildrenCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CategoryInfosListChildrenCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:listChildren")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.categoryInfos.listChildren" call.
// Exactly one of *ListChildrenCategoryInfosResponse or error will be
// non-nil. Any non-2xx status code is an error. Response headers are in
// either *ListChildrenCategoryInfosResponse.ServerResponse.Header or
// (if a response was returned at all) in
// error.(*googleapi.Error).Header. Use googleapi.IsNotModified to check
// whether the returned error was because http.StatusNotModified was
// returned.
func (c *CategoryInfosListChildrenCall) Do(opts ...googleapi.CallOption) (*ListChildrenCategoryInfosResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ListChildrenCategoryInfosResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Lists children category info.",
	//   "httpMethod": "GET",
	//   "id": "supportcases.categoryInfos.listChildren",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:listChildren",
	//   "response": {
	//     "$ref": "ListChildrenCategoryInfosResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.categoryInfos.listTopLevel":

type CategoryInfosListTopLevelCall struct {
	s            *Service
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// ListTopLevel: Lists gKMS top level category info.
func (r *CategoryInfosService) ListTopLevel() *CategoryInfosListTopLevelCall {
	c := &CategoryInfosListTopLevelCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CategoryInfosListTopLevelCall) Fields(s ...googleapi.Field) *CategoryInfosListTopLevelCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *CategoryInfosListTopLevelCall) IfNoneMatch(entityTag string) *CategoryInfosListTopLevelCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CategoryInfosListTopLevelCall) Context(ctx context.Context) *CategoryInfosListTopLevelCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CategoryInfosListTopLevelCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CategoryInfosListTopLevelCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "categoryInfos:listTopLevel")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.categoryInfos.listTopLevel" call.
// Exactly one of *ListTopLevelCategoryInfosResponse or error will be
// non-nil. Any non-2xx status code is an error. Response headers are in
// either *ListTopLevelCategoryInfosResponse.ServerResponse.Header or
// (if a response was returned at all) in
// error.(*googleapi.Error).Header. Use googleapi.IsNotModified to check
// whether the returned error was because http.StatusNotModified was
// returned.
func (c *CategoryInfosListTopLevelCall) Do(opts ...googleapi.CallOption) (*ListTopLevelCategoryInfosResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ListTopLevelCategoryInfosResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Lists gKMS top level category info.",
	//   "httpMethod": "GET",
	//   "id": "supportcases.categoryInfos.listTopLevel",
	//   "path": "categoryInfos:listTopLevel",
	//   "response": {
	//     "$ref": "ListTopLevelCategoryInfosResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.categoryInfos.search":

type CategoryInfosSearchCall struct {
	s            *Service
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// Search: Searches category info. Suppresses warning: GET requires
// method name starting with "Get" or "List"
func (r *CategoryInfosService) Search() *CategoryInfosSearchCall {
	c := &CategoryInfosSearchCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	return c
}

// BaselineOnly sets the optional parameter "baselineOnly":
func (c *CategoryInfosSearchCall) BaselineOnly(baselineOnly bool) *CategoryInfosSearchCall {
	c.urlParams_.Set("baselineOnly", fmt.Sprint(baselineOnly))
	return c
}

// FilterByParentCategoryId sets the optional parameter
// "filterByParentCategoryId":
func (c *CategoryInfosSearchCall) FilterByParentCategoryId(filterByParentCategoryId int64) *CategoryInfosSearchCall {
	c.urlParams_.Set("filterByParentCategoryId", fmt.Sprint(filterByParentCategoryId))
	return c
}

// FilterConsultCategories sets the optional parameter
// "filterConsultCategories":
func (c *CategoryInfosSearchCall) FilterConsultCategories(filterConsultCategories bool) *CategoryInfosSearchCall {
	c.urlParams_.Set("filterConsultCategories", fmt.Sprint(filterConsultCategories))
	return c
}

// MaximumResults sets the optional parameter "maximumResults":
func (c *CategoryInfosSearchCall) MaximumResults(maximumResults int64) *CategoryInfosSearchCall {
	c.urlParams_.Set("maximumResults", fmt.Sprint(maximumResults))
	return c
}

// ProductIds sets the optional parameter "productIds":
func (c *CategoryInfosSearchCall) ProductIds(productIds ...string) *CategoryInfosSearchCall {
	c.urlParams_.SetMulti("productIds", append([]string{}, productIds...))
	return c
}

// Query sets the optional parameter "query":
func (c *CategoryInfosSearchCall) Query(query string) *CategoryInfosSearchCall {
	c.urlParams_.Set("query", query)
	return c
}

// TopCategoryPathNodeIds sets the optional parameter
// "topCategoryPathNodeIds":
func (c *CategoryInfosSearchCall) TopCategoryPathNodeIds(topCategoryPathNodeIds ...int64) *CategoryInfosSearchCall {
	var topCategoryPathNodeIds_ []string
	for _, v := range topCategoryPathNodeIds {
		topCategoryPathNodeIds_ = append(topCategoryPathNodeIds_, fmt.Sprint(v))
	}
	c.urlParams_.SetMulti("topCategoryPathNodeIds", topCategoryPathNodeIds_)
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CategoryInfosSearchCall) Fields(s ...googleapi.Field) *CategoryInfosSearchCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *CategoryInfosSearchCall) IfNoneMatch(entityTag string) *CategoryInfosSearchCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CategoryInfosSearchCall) Context(ctx context.Context) *CategoryInfosSearchCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CategoryInfosSearchCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CategoryInfosSearchCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "categoryInfos:search")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.categoryInfos.search" call.
// Exactly one of *SearchCategoryInfosResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *SearchCategoryInfosResponse.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CategoryInfosSearchCall) Do(opts ...googleapi.CallOption) (*SearchCategoryInfosResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &SearchCategoryInfosResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Searches category info. Suppresses warning: GET requires method name starting with \"Get\" or \"List\"",
	//   "httpMethod": "GET",
	//   "id": "supportcases.categoryInfos.search",
	//   "parameters": {
	//     "baselineOnly": {
	//       "location": "query",
	//       "type": "boolean"
	//     },
	//     "filterByParentCategoryId": {
	//       "format": "int32",
	//       "location": "query",
	//       "type": "integer"
	//     },
	//     "filterConsultCategories": {
	//       "location": "query",
	//       "type": "boolean"
	//     },
	//     "maximumResults": {
	//       "format": "int32",
	//       "location": "query",
	//       "type": "integer"
	//     },
	//     "productIds": {
	//       "location": "query",
	//       "repeated": true,
	//       "type": "string"
	//     },
	//     "query": {
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "topCategoryPathNodeIds": {
	//       "format": "int32",
	//       "location": "query",
	//       "repeated": true,
	//       "type": "integer"
	//     }
	//   },
	//   "path": "categoryInfos:search",
	//   "response": {
	//     "$ref": "SearchCategoryInfosResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.categoryInfos.searchMultiple":

type CategoryInfosSearchMultipleCall struct {
	s                                  *Service
	searchmultiplecategoryinfosrequest *SearchMultipleCategoryInfosRequest
	urlParams_                         gensupport.URLParams
	ctx_                               context.Context
	header_                            http.Header
}

// SearchMultiple: Searches multiple category info.
func (r *CategoryInfosService) SearchMultiple(searchmultiplecategoryinfosrequest *SearchMultipleCategoryInfosRequest) *CategoryInfosSearchMultipleCall {
	c := &CategoryInfosSearchMultipleCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.searchmultiplecategoryinfosrequest = searchmultiplecategoryinfosrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CategoryInfosSearchMultipleCall) Fields(s ...googleapi.Field) *CategoryInfosSearchMultipleCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CategoryInfosSearchMultipleCall) Context(ctx context.Context) *CategoryInfosSearchMultipleCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CategoryInfosSearchMultipleCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CategoryInfosSearchMultipleCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.searchmultiplecategoryinfosrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "categoryInfos:searchMultiple")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.categoryInfos.searchMultiple" call.
// Exactly one of *SearchCategoryInfosResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *SearchCategoryInfosResponse.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CategoryInfosSearchMultipleCall) Do(opts ...googleapi.CallOption) (*SearchCategoryInfosResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &SearchCategoryInfosResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Searches multiple category info.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.categoryInfos.searchMultiple",
	//   "path": "categoryInfos:searchMultiple",
	//   "request": {
	//     "$ref": "SearchMultipleCategoryInfosRequest"
	//   },
	//   "response": {
	//     "$ref": "SearchCategoryInfosResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.categoryInfos.properties.list":

type CategoryInfosPropertiesListCall struct {
	s            *Service
	name         string
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// List: Lists all properties associated with a category info.
func (r *CategoryInfosPropertiesService) List(name string) *CategoryInfosPropertiesListCall {
	c := &CategoryInfosPropertiesListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CategoryInfosPropertiesListCall) Fields(s ...googleapi.Field) *CategoryInfosPropertiesListCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *CategoryInfosPropertiesListCall) IfNoneMatch(entityTag string) *CategoryInfosPropertiesListCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CategoryInfosPropertiesListCall) Context(ctx context.Context) *CategoryInfosPropertiesListCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CategoryInfosPropertiesListCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CategoryInfosPropertiesListCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}/properties")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.categoryInfos.properties.list" call.
// Exactly one of *ListPropertiesResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *ListPropertiesResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CategoryInfosPropertiesListCall) Do(opts ...googleapi.CallOption) (*ListPropertiesResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ListPropertiesResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Lists all properties associated with a category info.",
	//   "httpMethod": "GET",
	//   "id": "supportcases.categoryInfos.properties.list",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}/properties",
	//   "response": {
	//     "$ref": "ListPropertiesResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.communications.buildNewEmail":

type CommunicationsBuildNewEmailCall struct {
	s                    *Service
	buildnewemailrequest *BuildNewEmailRequest
	urlParams_           gensupport.URLParams
	ctx_                 context.Context
	header_              http.Header
}

// BuildNewEmail: Builds an email template for the first email on a
// case.
func (r *CommunicationsService) BuildNewEmail(buildnewemailrequest *BuildNewEmailRequest) *CommunicationsBuildNewEmailCall {
	c := &CommunicationsBuildNewEmailCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.buildnewemailrequest = buildnewemailrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CommunicationsBuildNewEmailCall) Fields(s ...googleapi.Field) *CommunicationsBuildNewEmailCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CommunicationsBuildNewEmailCall) Context(ctx context.Context) *CommunicationsBuildNewEmailCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CommunicationsBuildNewEmailCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CommunicationsBuildNewEmailCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.buildnewemailrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "communications:buildNewEmail")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.communications.buildNewEmail" call.
// Exactly one of *BuildNewEmailResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *BuildNewEmailResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CommunicationsBuildNewEmailCall) Do(opts ...googleapi.CallOption) (*BuildNewEmailResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &BuildNewEmailResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Builds an email template for the first email on a case.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.communications.buildNewEmail",
	//   "path": "communications:buildNewEmail",
	//   "request": {
	//     "$ref": "BuildNewEmailRequest"
	//   },
	//   "response": {
	//     "$ref": "BuildNewEmailResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.communications.buildReplyEmail":

type CommunicationsBuildReplyEmailCall struct {
	s                      *Service
	buildreplyemailrequest *BuildReplyEmailRequest
	urlParams_             gensupport.URLParams
	ctx_                   context.Context
	header_                http.Header
}

// BuildReplyEmail: Builds an email template for a reply to an existing
// email.
func (r *CommunicationsService) BuildReplyEmail(buildreplyemailrequest *BuildReplyEmailRequest) *CommunicationsBuildReplyEmailCall {
	c := &CommunicationsBuildReplyEmailCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.buildreplyemailrequest = buildreplyemailrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CommunicationsBuildReplyEmailCall) Fields(s ...googleapi.Field) *CommunicationsBuildReplyEmailCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CommunicationsBuildReplyEmailCall) Context(ctx context.Context) *CommunicationsBuildReplyEmailCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CommunicationsBuildReplyEmailCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CommunicationsBuildReplyEmailCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.buildreplyemailrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "communications:buildReplyEmail")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.communications.buildReplyEmail" call.
// Exactly one of *BuildReplyEmailResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *BuildReplyEmailResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CommunicationsBuildReplyEmailCall) Do(opts ...googleapi.CallOption) (*BuildReplyEmailResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &BuildReplyEmailResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Builds an email template for a reply to an existing email.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.communications.buildReplyEmail",
	//   "path": "communications:buildReplyEmail",
	//   "request": {
	//     "$ref": "BuildReplyEmailRequest"
	//   },
	//   "response": {
	//     "$ref": "BuildReplyEmailResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.communications.cancelSend":

type CommunicationsCancelSendCall struct {
	s                 *Service
	name              string
	cancelsendrequest *CancelSendRequest
	urlParams_        gensupport.URLParams
	ctx_              context.Context
	header_           http.Header
}

// CancelSend: Cancel a pending send (for email only).
func (r *CommunicationsService) CancelSend(name string, cancelsendrequest *CancelSendRequest) *CommunicationsCancelSendCall {
	c := &CommunicationsCancelSendCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.cancelsendrequest = cancelsendrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CommunicationsCancelSendCall) Fields(s ...googleapi.Field) *CommunicationsCancelSendCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CommunicationsCancelSendCall) Context(ctx context.Context) *CommunicationsCancelSendCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CommunicationsCancelSendCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CommunicationsCancelSendCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.cancelsendrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:cancelSend")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.communications.cancelSend" call.
// Exactly one of *Empty or error will be non-nil. Any non-2xx status
// code is an error. Response headers are in either
// *Empty.ServerResponse.Header or (if a response was returned at all)
// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to
// check whether the returned error was because http.StatusNotModified
// was returned.
func (c *CommunicationsCancelSendCall) Do(opts ...googleapi.CallOption) (*Empty, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &Empty{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Cancel a pending send (for email only).",
	//   "httpMethod": "POST",
	//   "id": "supportcases.communications.cancelSend",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:cancelSend",
	//   "request": {
	//     "$ref": "CancelSendRequest"
	//   },
	//   "response": {
	//     "$ref": "Empty"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.communications.createConsultNote":

type CommunicationsCreateConsultNoteCall struct {
	s                        *Service
	createconsultnoterequest *CreateConsultNoteRequest
	urlParams_               gensupport.URLParams
	ctx_                     context.Context
	header_                  http.Header
}

// CreateConsultNote: Creates a draft note that replies to a consult
// note.
func (r *CommunicationsService) CreateConsultNote(createconsultnoterequest *CreateConsultNoteRequest) *CommunicationsCreateConsultNoteCall {
	c := &CommunicationsCreateConsultNoteCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.createconsultnoterequest = createconsultnoterequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CommunicationsCreateConsultNoteCall) Fields(s ...googleapi.Field) *CommunicationsCreateConsultNoteCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CommunicationsCreateConsultNoteCall) Context(ctx context.Context) *CommunicationsCreateConsultNoteCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CommunicationsCreateConsultNoteCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CommunicationsCreateConsultNoteCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.createconsultnoterequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "communications:createConsultNote")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.communications.createConsultNote" call.
// Exactly one of *CreateConsultNoteResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *CreateConsultNoteResponse.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CommunicationsCreateConsultNoteCall) Do(opts ...googleapi.CallOption) (*CreateConsultNoteResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &CreateConsultNoteResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Creates a draft note that replies to a consult note.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.communications.createConsultNote",
	//   "path": "communications:createConsultNote",
	//   "request": {
	//     "$ref": "CreateConsultNoteRequest"
	//   },
	//   "response": {
	//     "$ref": "CreateConsultNoteResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.communications.createEmail":

type CommunicationsCreateEmailCall struct {
	s                  *Service
	createemailrequest *CreateEmailRequest
	urlParams_         gensupport.URLParams
	ctx_               context.Context
	header_            http.Header
}

// CreateEmail: Creates a draft email and adds it to a case.
func (r *CommunicationsService) CreateEmail(createemailrequest *CreateEmailRequest) *CommunicationsCreateEmailCall {
	c := &CommunicationsCreateEmailCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.createemailrequest = createemailrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CommunicationsCreateEmailCall) Fields(s ...googleapi.Field) *CommunicationsCreateEmailCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CommunicationsCreateEmailCall) Context(ctx context.Context) *CommunicationsCreateEmailCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CommunicationsCreateEmailCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CommunicationsCreateEmailCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.createemailrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "communications:createEmail")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.communications.createEmail" call.
// Exactly one of *CreateEmailResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *CreateEmailResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CommunicationsCreateEmailCall) Do(opts ...googleapi.CallOption) (*CreateEmailResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &CreateEmailResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Creates a draft email and adds it to a case.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.communications.createEmail",
	//   "path": "communications:createEmail",
	//   "request": {
	//     "$ref": "CreateEmailRequest"
	//   },
	//   "response": {
	//     "$ref": "CreateEmailResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.communications.createNote":

type CommunicationsCreateNoteCall struct {
	s                 *Service
	createnoterequest *CreateNoteRequest
	urlParams_        gensupport.URLParams
	ctx_              context.Context
	header_           http.Header
}

// CreateNote: Creates a note.
func (r *CommunicationsService) CreateNote(createnoterequest *CreateNoteRequest) *CommunicationsCreateNoteCall {
	c := &CommunicationsCreateNoteCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.createnoterequest = createnoterequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CommunicationsCreateNoteCall) Fields(s ...googleapi.Field) *CommunicationsCreateNoteCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CommunicationsCreateNoteCall) Context(ctx context.Context) *CommunicationsCreateNoteCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CommunicationsCreateNoteCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CommunicationsCreateNoteCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.createnoterequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "communications:createNote")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.communications.createNote" call.
// Exactly one of *CreateNoteResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *CreateNoteResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CommunicationsCreateNoteCall) Do(opts ...googleapi.CallOption) (*CreateNoteResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &CreateNoteResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Creates a note.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.communications.createNote",
	//   "path": "communications:createNote",
	//   "request": {
	//     "$ref": "CreateNoteRequest"
	//   },
	//   "response": {
	//     "$ref": "CreateNoteResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.communications.discardDraft":

type CommunicationsDiscardDraftCall struct {
	s                   *Service
	name                string
	discarddraftrequest *DiscardDraftRequest
	urlParams_          gensupport.URLParams
	ctx_                context.Context
	header_             http.Header
}

// DiscardDraft: Discards a draft communication.
func (r *CommunicationsService) DiscardDraft(name string, discarddraftrequest *DiscardDraftRequest) *CommunicationsDiscardDraftCall {
	c := &CommunicationsDiscardDraftCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.discarddraftrequest = discarddraftrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CommunicationsDiscardDraftCall) Fields(s ...googleapi.Field) *CommunicationsDiscardDraftCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CommunicationsDiscardDraftCall) Context(ctx context.Context) *CommunicationsDiscardDraftCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CommunicationsDiscardDraftCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CommunicationsDiscardDraftCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.discarddraftrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:discardDraft")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.communications.discardDraft" call.
// Exactly one of *DiscardDraftResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *DiscardDraftResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CommunicationsDiscardDraftCall) Do(opts ...googleapi.CallOption) (*DiscardDraftResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &DiscardDraftResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Discards a draft communication.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.communications.discardDraft",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:discardDraft",
	//   "request": {
	//     "$ref": "DiscardDraftRequest"
	//   },
	//   "response": {
	//     "$ref": "DiscardDraftResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.communications.finalizeConsultNote":

type CommunicationsFinalizeConsultNoteCall struct {
	s                          *Service
	name                       string
	finalizeconsultnoterequest *FinalizeConsultNoteRequest
	urlParams_                 gensupport.URLParams
	ctx_                       context.Context
	header_                    http.Header
}

// FinalizeConsultNote: Finalizes and sends a draft note for a consult
// case.
func (r *CommunicationsService) FinalizeConsultNote(name string, finalizeconsultnoterequest *FinalizeConsultNoteRequest) *CommunicationsFinalizeConsultNoteCall {
	c := &CommunicationsFinalizeConsultNoteCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.finalizeconsultnoterequest = finalizeconsultnoterequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CommunicationsFinalizeConsultNoteCall) Fields(s ...googleapi.Field) *CommunicationsFinalizeConsultNoteCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CommunicationsFinalizeConsultNoteCall) Context(ctx context.Context) *CommunicationsFinalizeConsultNoteCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CommunicationsFinalizeConsultNoteCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CommunicationsFinalizeConsultNoteCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.finalizeconsultnoterequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:finalizeConsultNote")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.communications.finalizeConsultNote" call.
// Exactly one of *FinalizeConsultNoteResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *FinalizeConsultNoteResponse.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CommunicationsFinalizeConsultNoteCall) Do(opts ...googleapi.CallOption) (*FinalizeConsultNoteResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &FinalizeConsultNoteResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Finalizes and sends a draft note for a consult case.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.communications.finalizeConsultNote",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:finalizeConsultNote",
	//   "request": {
	//     "$ref": "FinalizeConsultNoteRequest"
	//   },
	//   "response": {
	//     "$ref": "FinalizeConsultNoteResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.communications.finalizeNote":

type CommunicationsFinalizeNoteCall struct {
	s                   *Service
	name                string
	finalizenoterequest *FinalizeNoteRequest
	urlParams_          gensupport.URLParams
	ctx_                context.Context
	header_             http.Header
}

// FinalizeNote: Finalize a note (a note cannot be updated after it is
// finalized).
func (r *CommunicationsService) FinalizeNote(name string, finalizenoterequest *FinalizeNoteRequest) *CommunicationsFinalizeNoteCall {
	c := &CommunicationsFinalizeNoteCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.finalizenoterequest = finalizenoterequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CommunicationsFinalizeNoteCall) Fields(s ...googleapi.Field) *CommunicationsFinalizeNoteCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CommunicationsFinalizeNoteCall) Context(ctx context.Context) *CommunicationsFinalizeNoteCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CommunicationsFinalizeNoteCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CommunicationsFinalizeNoteCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.finalizenoterequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:finalizeNote")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.communications.finalizeNote" call.
// Exactly one of *FinalizeNoteResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *FinalizeNoteResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CommunicationsFinalizeNoteCall) Do(opts ...googleapi.CallOption) (*FinalizeNoteResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &FinalizeNoteResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Finalize a note (a note cannot be updated after it is finalized).",
	//   "httpMethod": "POST",
	//   "id": "supportcases.communications.finalizeNote",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:finalizeNote",
	//   "request": {
	//     "$ref": "FinalizeNoteRequest"
	//   },
	//   "response": {
	//     "$ref": "FinalizeNoteResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.communications.list":

type CommunicationsListCall struct {
	s            *Service
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// List: Lists communications that match the filter.
func (r *CommunicationsService) List() *CommunicationsListCall {
	c := &CommunicationsListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	return c
}

// CaseIds sets the optional parameter "caseIds":
func (c *CommunicationsListCall) CaseIds(caseIds ...string) *CommunicationsListCall {
	c.urlParams_.SetMulti("caseIds", append([]string{}, caseIds...))
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CommunicationsListCall) Fields(s ...googleapi.Field) *CommunicationsListCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *CommunicationsListCall) IfNoneMatch(entityTag string) *CommunicationsListCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CommunicationsListCall) Context(ctx context.Context) *CommunicationsListCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CommunicationsListCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CommunicationsListCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "communications")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.communications.list" call.
// Exactly one of *ListCommunicationsResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *ListCommunicationsResponse.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CommunicationsListCall) Do(opts ...googleapi.CallOption) (*ListCommunicationsResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ListCommunicationsResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Lists communications that match the filter.",
	//   "httpMethod": "GET",
	//   "id": "supportcases.communications.list",
	//   "parameters": {
	//     "caseIds": {
	//       "location": "query",
	//       "repeated": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "communications",
	//   "response": {
	//     "$ref": "ListCommunicationsResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.communications.listRelated":

type CommunicationsListRelatedCall struct {
	s            *Service
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// ListRelated: Lists communications that are related to each other,
// including the communications on the requested case. Related
// communications include consult communications from target cases.
// Currently, only related communications from consult cases are
// supported.
func (r *CommunicationsService) ListRelated() *CommunicationsListRelatedCall {
	c := &CommunicationsListRelatedCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	return c
}

// CaseId sets the optional parameter "caseId":
func (c *CommunicationsListRelatedCall) CaseId(caseId string) *CommunicationsListRelatedCall {
	c.urlParams_.Set("caseId", caseId)
	return c
}

// ContextCaseId sets the optional parameter "contextCaseId":
func (c *CommunicationsListRelatedCall) ContextCaseId(contextCaseId string) *CommunicationsListRelatedCall {
	c.urlParams_.Set("contextCaseId", contextCaseId)
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CommunicationsListRelatedCall) Fields(s ...googleapi.Field) *CommunicationsListRelatedCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *CommunicationsListRelatedCall) IfNoneMatch(entityTag string) *CommunicationsListRelatedCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CommunicationsListRelatedCall) Context(ctx context.Context) *CommunicationsListRelatedCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CommunicationsListRelatedCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CommunicationsListRelatedCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "communications:listRelated")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.communications.listRelated" call.
// Exactly one of *ListRelatedCommunicationsResponse or error will be
// non-nil. Any non-2xx status code is an error. Response headers are in
// either *ListRelatedCommunicationsResponse.ServerResponse.Header or
// (if a response was returned at all) in
// error.(*googleapi.Error).Header. Use googleapi.IsNotModified to check
// whether the returned error was because http.StatusNotModified was
// returned.
func (c *CommunicationsListRelatedCall) Do(opts ...googleapi.CallOption) (*ListRelatedCommunicationsResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ListRelatedCommunicationsResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Lists communications that are related to each other, including the communications on the requested case. Related communications include consult communications from target cases. Currently, only related communications from consult cases are supported.",
	//   "httpMethod": "GET",
	//   "id": "supportcases.communications.listRelated",
	//   "parameters": {
	//     "caseId": {
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "contextCaseId": {
	//       "location": "query",
	//       "type": "string"
	//     }
	//   },
	//   "path": "communications:listRelated",
	//   "response": {
	//     "$ref": "ListRelatedCommunicationsResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.communications.send":

type CommunicationsSendCall struct {
	s                *Service
	name             string
	sendemailrequest *SendEmailRequest
	urlParams_       gensupport.URLParams
	ctx_             context.Context
	header_          http.Header
}

// Send: Sends a draft email. This finalizes the email.
func (r *CommunicationsService) Send(name string, sendemailrequest *SendEmailRequest) *CommunicationsSendCall {
	c := &CommunicationsSendCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.sendemailrequest = sendemailrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CommunicationsSendCall) Fields(s ...googleapi.Field) *CommunicationsSendCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CommunicationsSendCall) Context(ctx context.Context) *CommunicationsSendCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CommunicationsSendCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CommunicationsSendCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.sendemailrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:send")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.communications.send" call.
// Exactly one of *SendEmailResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *SendEmailResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CommunicationsSendCall) Do(opts ...googleapi.CallOption) (*SendEmailResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &SendEmailResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Sends a draft email. This finalizes the email.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.communications.send",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:send",
	//   "request": {
	//     "$ref": "SendEmailRequest"
	//   },
	//   "response": {
	//     "$ref": "SendEmailResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.communications.suggestReplyEmailHeaders":

type CommunicationsSuggestReplyEmailHeadersCall struct {
	s            *Service
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// SuggestReplyEmailHeaders: Suggests a set of email headers for an
// email reply to another email. Suppresses warning: GET requires method
// name starting with "Get" or "List"
func (r *CommunicationsService) SuggestReplyEmailHeaders() *CommunicationsSuggestReplyEmailHeadersCall {
	c := &CommunicationsSuggestReplyEmailHeadersCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	return c
}

// CaseId sets the optional parameter "caseId":
func (c *CommunicationsSuggestReplyEmailHeadersCall) CaseId(caseId string) *CommunicationsSuggestReplyEmailHeadersCall {
	c.urlParams_.Set("caseId", caseId)
	return c
}

// MessageId sets the optional parameter "messageId":
func (c *CommunicationsSuggestReplyEmailHeadersCall) MessageId(messageId string) *CommunicationsSuggestReplyEmailHeadersCall {
	c.urlParams_.Set("messageId", messageId)
	return c
}

// ReplyType sets the optional parameter "replyType":
//
// Possible values:
//   "REPLY"
//   "REPLY_ALL"
//   "UNKNOWN_REPLY_TYPE"
func (c *CommunicationsSuggestReplyEmailHeadersCall) ReplyType(replyType string) *CommunicationsSuggestReplyEmailHeadersCall {
	c.urlParams_.Set("replyType", replyType)
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CommunicationsSuggestReplyEmailHeadersCall) Fields(s ...googleapi.Field) *CommunicationsSuggestReplyEmailHeadersCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *CommunicationsSuggestReplyEmailHeadersCall) IfNoneMatch(entityTag string) *CommunicationsSuggestReplyEmailHeadersCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CommunicationsSuggestReplyEmailHeadersCall) Context(ctx context.Context) *CommunicationsSuggestReplyEmailHeadersCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CommunicationsSuggestReplyEmailHeadersCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CommunicationsSuggestReplyEmailHeadersCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "communications:suggestReplyEmailHeaders")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.communications.suggestReplyEmailHeaders" call.
// Exactly one of *SuggestReplyEmailHeadersResponse or error will be
// non-nil. Any non-2xx status code is an error. Response headers are in
// either *SuggestReplyEmailHeadersResponse.ServerResponse.Header or (if
// a response was returned at all) in error.(*googleapi.Error).Header.
// Use googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CommunicationsSuggestReplyEmailHeadersCall) Do(opts ...googleapi.CallOption) (*SuggestReplyEmailHeadersResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &SuggestReplyEmailHeadersResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Suggests a set of email headers for an email reply to another email. Suppresses warning: GET requires method name starting with \"Get\" or \"List\"",
	//   "httpMethod": "GET",
	//   "id": "supportcases.communications.suggestReplyEmailHeaders",
	//   "parameters": {
	//     "caseId": {
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "messageId": {
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "replyType": {
	//       "enum": [
	//         "REPLY",
	//         "REPLY_ALL",
	//         "UNKNOWN_REPLY_TYPE"
	//       ],
	//       "enumDescriptions": [
	//         "",
	//         "",
	//         ""
	//       ],
	//       "location": "query",
	//       "type": "string"
	//     }
	//   },
	//   "path": "communications:suggestReplyEmailHeaders",
	//   "response": {
	//     "$ref": "SuggestReplyEmailHeadersResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.communications.updateConsultNote":

type CommunicationsUpdateConsultNoteCall struct {
	s                        *Service
	name                     string
	updateconsultnoterequest *UpdateConsultNoteRequest
	urlParams_               gensupport.URLParams
	ctx_                     context.Context
	header_                  http.Header
}

// UpdateConsultNote: Updates a draft consult note with new content.
func (r *CommunicationsService) UpdateConsultNote(name string, updateconsultnoterequest *UpdateConsultNoteRequest) *CommunicationsUpdateConsultNoteCall {
	c := &CommunicationsUpdateConsultNoteCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.updateconsultnoterequest = updateconsultnoterequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CommunicationsUpdateConsultNoteCall) Fields(s ...googleapi.Field) *CommunicationsUpdateConsultNoteCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CommunicationsUpdateConsultNoteCall) Context(ctx context.Context) *CommunicationsUpdateConsultNoteCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CommunicationsUpdateConsultNoteCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CommunicationsUpdateConsultNoteCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.updateconsultnoterequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:updateConsultNote")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.communications.updateConsultNote" call.
// Exactly one of *UpdateConsultNoteResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *UpdateConsultNoteResponse.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CommunicationsUpdateConsultNoteCall) Do(opts ...googleapi.CallOption) (*UpdateConsultNoteResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &UpdateConsultNoteResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Updates a draft consult note with new content.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.communications.updateConsultNote",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:updateConsultNote",
	//   "request": {
	//     "$ref": "UpdateConsultNoteRequest"
	//   },
	//   "response": {
	//     "$ref": "UpdateConsultNoteResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.communications.updateEmail":

type CommunicationsUpdateEmailCall struct {
	s                  *Service
	name               string
	updateemailrequest *UpdateEmailRequest
	urlParams_         gensupport.URLParams
	ctx_               context.Context
	header_            http.Header
}

// UpdateEmail: Updates a draft email.
func (r *CommunicationsService) UpdateEmail(name string, updateemailrequest *UpdateEmailRequest) *CommunicationsUpdateEmailCall {
	c := &CommunicationsUpdateEmailCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.updateemailrequest = updateemailrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CommunicationsUpdateEmailCall) Fields(s ...googleapi.Field) *CommunicationsUpdateEmailCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CommunicationsUpdateEmailCall) Context(ctx context.Context) *CommunicationsUpdateEmailCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CommunicationsUpdateEmailCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CommunicationsUpdateEmailCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.updateemailrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:updateEmail")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.communications.updateEmail" call.
// Exactly one of *UpdateEmailResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *UpdateEmailResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CommunicationsUpdateEmailCall) Do(opts ...googleapi.CallOption) (*UpdateEmailResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &UpdateEmailResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Updates a draft email.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.communications.updateEmail",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:updateEmail",
	//   "request": {
	//     "$ref": "UpdateEmailRequest"
	//   },
	//   "response": {
	//     "$ref": "UpdateEmailResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.communications.updateNote":

type CommunicationsUpdateNoteCall struct {
	s                 *Service
	name              string
	updatenoterequest *UpdateNoteRequest
	urlParams_        gensupport.URLParams
	ctx_              context.Context
	header_           http.Header
}

// UpdateNote: Updates a draft note.
func (r *CommunicationsService) UpdateNote(name string, updatenoterequest *UpdateNoteRequest) *CommunicationsUpdateNoteCall {
	c := &CommunicationsUpdateNoteCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.updatenoterequest = updatenoterequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CommunicationsUpdateNoteCall) Fields(s ...googleapi.Field) *CommunicationsUpdateNoteCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CommunicationsUpdateNoteCall) Context(ctx context.Context) *CommunicationsUpdateNoteCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CommunicationsUpdateNoteCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CommunicationsUpdateNoteCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.updatenoterequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:updateNote")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.communications.updateNote" call.
// Exactly one of *UpdateNoteResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *UpdateNoteResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CommunicationsUpdateNoteCall) Do(opts ...googleapi.CallOption) (*UpdateNoteResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &UpdateNoteResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Updates a draft note.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.communications.updateNote",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:updateNote",
	//   "request": {
	//     "$ref": "UpdateNoteRequest"
	//   },
	//   "response": {
	//     "$ref": "UpdateNoteResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.communications.attachments.delete":

type CommunicationsAttachmentsDeleteCall struct {
	s          *Service
	name       string
	urlParams_ gensupport.URLParams
	ctx_       context.Context
	header_    http.Header
}

// Delete: Deletes an attachment from a draft.
func (r *CommunicationsAttachmentsService) Delete(name string) *CommunicationsAttachmentsDeleteCall {
	c := &CommunicationsAttachmentsDeleteCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	return c
}

// CaseId sets the optional parameter "caseId":
func (c *CommunicationsAttachmentsDeleteCall) CaseId(caseId string) *CommunicationsAttachmentsDeleteCall {
	c.urlParams_.Set("caseId", caseId)
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CommunicationsAttachmentsDeleteCall) Fields(s ...googleapi.Field) *CommunicationsAttachmentsDeleteCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CommunicationsAttachmentsDeleteCall) Context(ctx context.Context) *CommunicationsAttachmentsDeleteCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CommunicationsAttachmentsDeleteCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CommunicationsAttachmentsDeleteCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("DELETE", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.communications.attachments.delete" call.
// Exactly one of *Empty or error will be non-nil. Any non-2xx status
// code is an error. Response headers are in either
// *Empty.ServerResponse.Header or (if a response was returned at all)
// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to
// check whether the returned error was because http.StatusNotModified
// was returned.
func (c *CommunicationsAttachmentsDeleteCall) Do(opts ...googleapi.CallOption) (*Empty, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &Empty{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Deletes an attachment from a draft.",
	//   "httpMethod": "DELETE",
	//   "id": "supportcases.communications.attachments.delete",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "caseId": {
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}",
	//   "response": {
	//     "$ref": "Empty"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.customerInteractions.list":

type CustomerInteractionsListCall struct {
	s            *Service
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// List: List customer interactions.
func (r *CustomerInteractionsService) List() *CustomerInteractionsListCall {
	c := &CustomerInteractionsListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	return c
}

// AdwordsCid sets the optional parameter "adwordsCid":
func (c *CustomerInteractionsListCall) AdwordsCid(adwordsCid string) *CustomerInteractionsListCall {
	c.urlParams_.Set("adwordsCid", adwordsCid)
	return c
}

// CaseId sets the optional parameter "caseId":
func (c *CustomerInteractionsListCall) CaseId(caseId string) *CustomerInteractionsListCall {
	c.urlParams_.Set("caseId", caseId)
	return c
}

// Channels sets the optional parameter "channels":
//
// Possible values:
//   "ADOPTION"
//   "CHAT"
//   "EMAIL"
//   "GOAL"
//   "HANGOUT"
//   "INCENTIVE"
//   "MARKETING_EMAIL"
//   "MEETING"
//   "NOTE"
//   "PHONE"
//   "STUB"
//   "TRAX"
//   "UNKNOWN_EVENT_TYPE"
//   "WEB"
func (c *CustomerInteractionsListCall) Channels(channels ...string) *CustomerInteractionsListCall {
	c.urlParams_.SetMulti("channels", append([]string{}, channels...))
	return c
}

// EmailAddress sets the optional parameter "emailAddress":
func (c *CustomerInteractionsListCall) EmailAddress(emailAddress string) *CustomerInteractionsListCall {
	c.urlParams_.Set("emailAddress", emailAddress)
	return c
}

// ExcludeCases sets the optional parameter "excludeCases":
func (c *CustomerInteractionsListCall) ExcludeCases(excludeCases ...string) *CustomerInteractionsListCall {
	c.urlParams_.SetMulti("excludeCases", append([]string{}, excludeCases...))
	return c
}

// PageSize sets the optional parameter "pageSize":
func (c *CustomerInteractionsListCall) PageSize(pageSize int64) *CustomerInteractionsListCall {
	c.urlParams_.Set("pageSize", fmt.Sprint(pageSize))
	return c
}

// PageToken sets the optional parameter "pageToken":
func (c *CustomerInteractionsListCall) PageToken(pageToken string) *CustomerInteractionsListCall {
	c.urlParams_.Set("pageToken", pageToken)
	return c
}

// Products sets the optional parameter "products":
func (c *CustomerInteractionsListCall) Products(products ...string) *CustomerInteractionsListCall {
	c.urlParams_.SetMulti("products", append([]string{}, products...))
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CustomerInteractionsListCall) Fields(s ...googleapi.Field) *CustomerInteractionsListCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *CustomerInteractionsListCall) IfNoneMatch(entityTag string) *CustomerInteractionsListCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CustomerInteractionsListCall) Context(ctx context.Context) *CustomerInteractionsListCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CustomerInteractionsListCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CustomerInteractionsListCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "customerInteractions")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.customerInteractions.list" call.
// Exactly one of *ListInteractionsResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *ListInteractionsResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CustomerInteractionsListCall) Do(opts ...googleapi.CallOption) (*ListInteractionsResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ListInteractionsResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "List customer interactions.",
	//   "httpMethod": "GET",
	//   "id": "supportcases.customerInteractions.list",
	//   "parameters": {
	//     "adwordsCid": {
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "caseId": {
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "channels": {
	//       "enum": [
	//         "ADOPTION",
	//         "CHAT",
	//         "EMAIL",
	//         "GOAL",
	//         "HANGOUT",
	//         "INCENTIVE",
	//         "MARKETING_EMAIL",
	//         "MEETING",
	//         "NOTE",
	//         "PHONE",
	//         "STUB",
	//         "TRAX",
	//         "UNKNOWN_EVENT_TYPE",
	//         "WEB"
	//       ],
	//       "enumDescriptions": [
	//         "",
	//         "",
	//         "",
	//         "",
	//         "",
	//         "",
	//         "",
	//         "",
	//         "",
	//         "",
	//         "",
	//         "",
	//         "",
	//         ""
	//       ],
	//       "location": "query",
	//       "repeated": true,
	//       "type": "string"
	//     },
	//     "emailAddress": {
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "excludeCases": {
	//       "location": "query",
	//       "repeated": true,
	//       "type": "string"
	//     },
	//     "pageSize": {
	//       "format": "int32",
	//       "location": "query",
	//       "type": "integer"
	//     },
	//     "pageToken": {
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "products": {
	//       "location": "query",
	//       "repeated": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "customerInteractions",
	//   "response": {
	//     "$ref": "ListInteractionsResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// Pages invokes f for each page of results.
// A non-nil error returned from f will halt the iteration.
// The provided context supersedes any context provided to the Context method.
func (c *CustomerInteractionsListCall) Pages(ctx context.Context, f func(*ListInteractionsResponse) error) error {
	c.ctx_ = ctx
	defer c.PageToken(c.urlParams_.Get("pageToken")) // reset paging to original point
	for {
		x, err := c.Do()
		if err != nil {
			return err
		}
		if err := f(x); err != nil {
			return err
		}
		if x.NextPageToken == "" {
			return nil
		}
		c.PageToken(x.NextPageToken)
	}
}

// method id "supportcases.customerInteractions.summarize":

type CustomerInteractionsSummarizeCall struct {
	s            *Service
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// Summarize: Summary statistics about the cutomer's interaction
// history. Suppresses warning: GET requires method name starting with
// "Get" or "List"
func (r *CustomerInteractionsService) Summarize() *CustomerInteractionsSummarizeCall {
	c := &CustomerInteractionsSummarizeCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	return c
}

// AdwordsCid sets the optional parameter "adwordsCid":
func (c *CustomerInteractionsSummarizeCall) AdwordsCid(adwordsCid string) *CustomerInteractionsSummarizeCall {
	c.urlParams_.Set("adwordsCid", adwordsCid)
	return c
}

// CaseId sets the optional parameter "caseId":
func (c *CustomerInteractionsSummarizeCall) CaseId(caseId string) *CustomerInteractionsSummarizeCall {
	c.urlParams_.Set("caseId", caseId)
	return c
}

// EmailAddress sets the optional parameter "emailAddress":
func (c *CustomerInteractionsSummarizeCall) EmailAddress(emailAddress string) *CustomerInteractionsSummarizeCall {
	c.urlParams_.Set("emailAddress", emailAddress)
	return c
}

// ExcludeCases sets the optional parameter "excludeCases":
func (c *CustomerInteractionsSummarizeCall) ExcludeCases(excludeCases ...string) *CustomerInteractionsSummarizeCall {
	c.urlParams_.SetMulti("excludeCases", append([]string{}, excludeCases...))
	return c
}

// StartTime sets the optional parameter "startTime":
func (c *CustomerInteractionsSummarizeCall) StartTime(startTime string) *CustomerInteractionsSummarizeCall {
	c.urlParams_.Set("startTime", startTime)
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CustomerInteractionsSummarizeCall) Fields(s ...googleapi.Field) *CustomerInteractionsSummarizeCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *CustomerInteractionsSummarizeCall) IfNoneMatch(entityTag string) *CustomerInteractionsSummarizeCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CustomerInteractionsSummarizeCall) Context(ctx context.Context) *CustomerInteractionsSummarizeCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CustomerInteractionsSummarizeCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CustomerInteractionsSummarizeCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "customerInteractions:summarize")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.customerInteractions.summarize" call.
// Exactly one of *SummarizeResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *SummarizeResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CustomerInteractionsSummarizeCall) Do(opts ...googleapi.CallOption) (*SummarizeResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &SummarizeResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Summary statistics about the cutomer's interaction history. Suppresses warning: GET requires method name starting with \"Get\" or \"List\"",
	//   "httpMethod": "GET",
	//   "id": "supportcases.customerInteractions.summarize",
	//   "parameters": {
	//     "adwordsCid": {
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "caseId": {
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "emailAddress": {
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "excludeCases": {
	//       "location": "query",
	//       "repeated": true,
	//       "type": "string"
	//     },
	//     "startTime": {
	//       "location": "query",
	//       "type": "string"
	//     }
	//   },
	//   "path": "customerInteractions:summarize",
	//   "response": {
	//     "$ref": "SummarizeResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.customerIssues.list":

type CustomerIssuesListCall struct {
	s            *Service
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// List: List issues and their resolutions for a customer.
func (r *CustomerIssuesService) List() *CustomerIssuesListCall {
	c := &CustomerIssuesListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	return c
}

// CaseId sets the optional parameter "caseId":
func (c *CustomerIssuesListCall) CaseId(caseId string) *CustomerIssuesListCall {
	c.urlParams_.Set("caseId", caseId)
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *CustomerIssuesListCall) Fields(s ...googleapi.Field) *CustomerIssuesListCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *CustomerIssuesListCall) IfNoneMatch(entityTag string) *CustomerIssuesListCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *CustomerIssuesListCall) Context(ctx context.Context) *CustomerIssuesListCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *CustomerIssuesListCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *CustomerIssuesListCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "customerIssues:list")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.customerIssues.list" call.
// Exactly one of *ListCustomerIssuesResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *ListCustomerIssuesResponse.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *CustomerIssuesListCall) Do(opts ...googleapi.CallOption) (*ListCustomerIssuesResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ListCustomerIssuesResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "List issues and their resolutions for a customer.",
	//   "httpMethod": "GET",
	//   "id": "supportcases.customerIssues.list",
	//   "parameters": {
	//     "caseId": {
	//       "location": "query",
	//       "type": "string"
	//     }
	//   },
	//   "path": "customerIssues:list",
	//   "response": {
	//     "$ref": "ListCustomerIssuesResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.devices.getById":

type DevicesGetByIdCall struct {
	s            *Service
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// GetById: Gets the specified device by any device ID.
func (r *DevicesService) GetById() *DevicesGetByIdCall {
	c := &DevicesGetByIdCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	return c
}

// CaseId sets the optional parameter "caseId":
func (c *DevicesGetByIdCall) CaseId(caseId string) *DevicesGetByIdCall {
	c.urlParams_.Set("caseId", caseId)
	return c
}

// DeviceId sets the optional parameter "deviceId":
func (c *DevicesGetByIdCall) DeviceId(deviceId string) *DevicesGetByIdCall {
	c.urlParams_.Set("deviceId", deviceId)
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *DevicesGetByIdCall) Fields(s ...googleapi.Field) *DevicesGetByIdCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *DevicesGetByIdCall) IfNoneMatch(entityTag string) *DevicesGetByIdCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *DevicesGetByIdCall) Context(ctx context.Context) *DevicesGetByIdCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *DevicesGetByIdCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *DevicesGetByIdCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "devices:getById")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.devices.getById" call.
// Exactly one of *GetByDeviceIdResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *GetByDeviceIdResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *DevicesGetByIdCall) Do(opts ...googleapi.CallOption) (*GetByDeviceIdResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &GetByDeviceIdResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Gets the specified device by any device ID.",
	//   "httpMethod": "GET",
	//   "id": "supportcases.devices.getById",
	//   "parameters": {
	//     "caseId": {
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "deviceId": {
	//       "location": "query",
	//       "type": "string"
	//     }
	//   },
	//   "path": "devices:getById",
	//   "response": {
	//     "$ref": "GetByDeviceIdResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.devices.list":

type DevicesListCall struct {
	s            *Service
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// List: List devices.
func (r *DevicesService) List() *DevicesListCall {
	c := &DevicesListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	return c
}

// CaseId sets the optional parameter "caseId":
func (c *DevicesListCall) CaseId(caseId string) *DevicesListCall {
	c.urlParams_.Set("caseId", caseId)
	return c
}

// Email sets the optional parameter "email":
func (c *DevicesListCall) Email(email string) *DevicesListCall {
	c.urlParams_.Set("email", email)
	return c
}

// ExcludeGoogleStoreOrders sets the optional parameter
// "excludeGoogleStoreOrders":
func (c *DevicesListCall) ExcludeGoogleStoreOrders(excludeGoogleStoreOrders bool) *DevicesListCall {
	c.urlParams_.Set("excludeGoogleStoreOrders", fmt.Sprint(excludeGoogleStoreOrders))
	return c
}

// ExcludeRmaTypes sets the optional parameter "excludeRmaTypes":
func (c *DevicesListCall) ExcludeRmaTypes(excludeRmaTypes bool) *DevicesListCall {
	c.urlParams_.Set("excludeRmaTypes", fmt.Sprint(excludeRmaTypes))
	return c
}

// PageSize sets the optional parameter "pageSize":
func (c *DevicesListCall) PageSize(pageSize int64) *DevicesListCall {
	c.urlParams_.Set("pageSize", fmt.Sprint(pageSize))
	return c
}

// PageToken sets the optional parameter "pageToken":
func (c *DevicesListCall) PageToken(pageToken string) *DevicesListCall {
	c.urlParams_.Set("pageToken", pageToken)
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *DevicesListCall) Fields(s ...googleapi.Field) *DevicesListCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *DevicesListCall) IfNoneMatch(entityTag string) *DevicesListCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *DevicesListCall) Context(ctx context.Context) *DevicesListCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *DevicesListCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *DevicesListCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "devices")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.devices.list" call.
// Exactly one of *ListDevicesResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *ListDevicesResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *DevicesListCall) Do(opts ...googleapi.CallOption) (*ListDevicesResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ListDevicesResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "List devices.",
	//   "httpMethod": "GET",
	//   "id": "supportcases.devices.list",
	//   "parameters": {
	//     "caseId": {
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "email": {
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "excludeGoogleStoreOrders": {
	//       "location": "query",
	//       "type": "boolean"
	//     },
	//     "excludeRmaTypes": {
	//       "location": "query",
	//       "type": "boolean"
	//     },
	//     "pageSize": {
	//       "format": "int32",
	//       "location": "query",
	//       "type": "integer"
	//     },
	//     "pageToken": {
	//       "location": "query",
	//       "type": "string"
	//     }
	//   },
	//   "path": "devices",
	//   "response": {
	//     "$ref": "ListDevicesResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// Pages invokes f for each page of results.
// A non-nil error returned from f will halt the iteration.
// The provided context supersedes any context provided to the Context method.
func (c *DevicesListCall) Pages(ctx context.Context, f func(*ListDevicesResponse) error) error {
	c.ctx_ = ctx
	defer c.PageToken(c.urlParams_.Get("pageToken")) // reset paging to original point
	for {
		x, err := c.Do()
		if err != nil {
			return err
		}
		if err := f(x); err != nil {
			return err
		}
		if x.NextPageToken == "" {
			return nil
		}
		c.PageToken(x.NextPageToken)
	}
}

// method id "supportcases.devices.updateOwner":

type DevicesUpdateOwnerCall struct {
	s            *Service
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// UpdateOwner: Updates the owner of a device. Suppresses warning: GET
// requires method name starting with "Get" or "List"
func (r *DevicesService) UpdateOwner() *DevicesUpdateOwnerCall {
	c := &DevicesUpdateOwnerCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	return c
}

// AddressAddressLine1 sets the optional parameter
// "address.addressLine1":
func (c *DevicesUpdateOwnerCall) AddressAddressLine1(addressAddressLine1 string) *DevicesUpdateOwnerCall {
	c.urlParams_.Set("address.addressLine1", addressAddressLine1)
	return c
}

// AddressAddressLine2 sets the optional parameter
// "address.addressLine2":
func (c *DevicesUpdateOwnerCall) AddressAddressLine2(addressAddressLine2 string) *DevicesUpdateOwnerCall {
	c.urlParams_.Set("address.addressLine2", addressAddressLine2)
	return c
}

// AddressAddressLine3 sets the optional parameter
// "address.addressLine3":
func (c *DevicesUpdateOwnerCall) AddressAddressLine3(addressAddressLine3 string) *DevicesUpdateOwnerCall {
	c.urlParams_.Set("address.addressLine3", addressAddressLine3)
	return c
}

// AddressAddressee sets the optional parameter "address.addressee":
func (c *DevicesUpdateOwnerCall) AddressAddressee(addressAddressee string) *DevicesUpdateOwnerCall {
	c.urlParams_.Set("address.addressee", addressAddressee)
	return c
}

// AddressCity sets the optional parameter "address.city":
func (c *DevicesUpdateOwnerCall) AddressCity(addressCity string) *DevicesUpdateOwnerCall {
	c.urlParams_.Set("address.city", addressCity)
	return c
}

// AddressCountryCode sets the optional parameter "address.countryCode":
func (c *DevicesUpdateOwnerCall) AddressCountryCode(addressCountryCode string) *DevicesUpdateOwnerCall {
	c.urlParams_.Set("address.countryCode", addressCountryCode)
	return c
}

// AddressPostalCode sets the optional parameter "address.postalCode":
func (c *DevicesUpdateOwnerCall) AddressPostalCode(addressPostalCode string) *DevicesUpdateOwnerCall {
	c.urlParams_.Set("address.postalCode", addressPostalCode)
	return c
}

// AddressStateProvinceCode sets the optional parameter
// "address.stateProvinceCode":
func (c *DevicesUpdateOwnerCall) AddressStateProvinceCode(addressStateProvinceCode string) *DevicesUpdateOwnerCall {
	c.urlParams_.Set("address.stateProvinceCode", addressStateProvinceCode)
	return c
}

// DeviceId sets the optional parameter "deviceId":
func (c *DevicesUpdateOwnerCall) DeviceId(deviceId string) *DevicesUpdateOwnerCall {
	c.urlParams_.Set("deviceId", deviceId)
	return c
}

// Email sets the optional parameter "email":
func (c *DevicesUpdateOwnerCall) Email(email string) *DevicesUpdateOwnerCall {
	c.urlParams_.Set("email", email)
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *DevicesUpdateOwnerCall) Fields(s ...googleapi.Field) *DevicesUpdateOwnerCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *DevicesUpdateOwnerCall) IfNoneMatch(entityTag string) *DevicesUpdateOwnerCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *DevicesUpdateOwnerCall) Context(ctx context.Context) *DevicesUpdateOwnerCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *DevicesUpdateOwnerCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *DevicesUpdateOwnerCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "devices:updateOwner")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.devices.updateOwner" call.
// Exactly one of *UpdateOwnerResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *UpdateOwnerResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *DevicesUpdateOwnerCall) Do(opts ...googleapi.CallOption) (*UpdateOwnerResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &UpdateOwnerResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Updates the owner of a device. Suppresses warning: GET requires method name starting with \"Get\" or \"List\"",
	//   "httpMethod": "GET",
	//   "id": "supportcases.devices.updateOwner",
	//   "parameters": {
	//     "address.addressLine1": {
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "address.addressLine2": {
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "address.addressLine3": {
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "address.addressee": {
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "address.city": {
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "address.countryCode": {
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "address.postalCode": {
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "address.stateProvinceCode": {
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "deviceId": {
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "email": {
	//       "location": "query",
	//       "type": "string"
	//     }
	//   },
	//   "path": "devices:updateOwner",
	//   "response": {
	//     "$ref": "UpdateOwnerResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.giftCards.checkRedeemer":

type GiftCardsCheckRedeemerCall struct {
	s                    *Service
	checkredeemerrequest *CheckRedeemerRequest
	urlParams_           gensupport.URLParams
	ctx_                 context.Context
	header_              http.Header
}

// CheckRedeemer: If the card is already redeemed by somebody else,
// customer can try a few users.
func (r *GiftCardsService) CheckRedeemer(checkredeemerrequest *CheckRedeemerRequest) *GiftCardsCheckRedeemerCall {
	c := &GiftCardsCheckRedeemerCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.checkredeemerrequest = checkredeemerrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *GiftCardsCheckRedeemerCall) Fields(s ...googleapi.Field) *GiftCardsCheckRedeemerCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *GiftCardsCheckRedeemerCall) Context(ctx context.Context) *GiftCardsCheckRedeemerCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *GiftCardsCheckRedeemerCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *GiftCardsCheckRedeemerCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.checkredeemerrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "giftCards:checkRedeemer")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.giftCards.checkRedeemer" call.
// Exactly one of *CheckRedeemerResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *CheckRedeemerResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *GiftCardsCheckRedeemerCall) Do(opts ...googleapi.CallOption) (*CheckRedeemerResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &CheckRedeemerResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "If the card is already redeemed by somebody else, customer can try a few users.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.giftCards.checkRedeemer",
	//   "path": "giftCards:checkRedeemer",
	//   "request": {
	//     "$ref": "CheckRedeemerRequest"
	//   },
	//   "response": {
	//     "$ref": "CheckRedeemerResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.giftCards.lookup":

type GiftCardsLookupCall struct {
	s                     *Service
	lookupgiftcardrequest *LookupGiftCardRequest
	urlParams_            gensupport.URLParams
	ctx_                  context.Context
	header_               http.Header
}

// Lookup: Finds a gift card based on its full redemption code or
// activation number. With full redemption code, returns redemption
// token on success.
func (r *GiftCardsService) Lookup(lookupgiftcardrequest *LookupGiftCardRequest) *GiftCardsLookupCall {
	c := &GiftCardsLookupCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.lookupgiftcardrequest = lookupgiftcardrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *GiftCardsLookupCall) Fields(s ...googleapi.Field) *GiftCardsLookupCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *GiftCardsLookupCall) Context(ctx context.Context) *GiftCardsLookupCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *GiftCardsLookupCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *GiftCardsLookupCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.lookupgiftcardrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "giftCards:lookup")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.giftCards.lookup" call.
// Exactly one of *LookupGiftCardResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *LookupGiftCardResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *GiftCardsLookupCall) Do(opts ...googleapi.CallOption) (*LookupGiftCardResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &LookupGiftCardResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Finds a gift card based on its full redemption code or activation number. With full redemption code, returns redemption token on success.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.giftCards.lookup",
	//   "path": "giftCards:lookup",
	//   "request": {
	//     "$ref": "LookupGiftCardRequest"
	//   },
	//   "response": {
	//     "$ref": "LookupGiftCardResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.giftCards.redeem":

type GiftCardsRedeemCall struct {
	s                     *Service
	redeemgiftcardrequest *RedeemGiftCardRequest
	urlParams_            gensupport.URLParams
	ctx_                  context.Context
	header_               http.Header
}

// Redeem: Redeems a gift card to a customer using the redemption token.
func (r *GiftCardsService) Redeem(redeemgiftcardrequest *RedeemGiftCardRequest) *GiftCardsRedeemCall {
	c := &GiftCardsRedeemCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.redeemgiftcardrequest = redeemgiftcardrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *GiftCardsRedeemCall) Fields(s ...googleapi.Field) *GiftCardsRedeemCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *GiftCardsRedeemCall) Context(ctx context.Context) *GiftCardsRedeemCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *GiftCardsRedeemCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *GiftCardsRedeemCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.redeemgiftcardrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "giftCards:redeem")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.giftCards.redeem" call.
// Exactly one of *RedeemGiftCardResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *RedeemGiftCardResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *GiftCardsRedeemCall) Do(opts ...googleapi.CallOption) (*RedeemGiftCardResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &RedeemGiftCardResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Redeems a gift card to a customer using the redemption token.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.giftCards.redeem",
	//   "path": "giftCards:redeem",
	//   "request": {
	//     "$ref": "RedeemGiftCardRequest"
	//   },
	//   "response": {
	//     "$ref": "RedeemGiftCardResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.giftCards.verify":

type GiftCardsVerifyCall struct {
	s                     *Service
	verifygiftcardrequest *VerifyGiftCardRequest
	urlParams_            gensupport.URLParams
	ctx_                  context.Context
	header_               http.Header
}

// Verify: Verifies ownership of a damaged GC by checking if the
// activation number and partial redemption code are valid and refers to
// the same card. Returns the redemption token on success.
func (r *GiftCardsService) Verify(verifygiftcardrequest *VerifyGiftCardRequest) *GiftCardsVerifyCall {
	c := &GiftCardsVerifyCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.verifygiftcardrequest = verifygiftcardrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *GiftCardsVerifyCall) Fields(s ...googleapi.Field) *GiftCardsVerifyCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *GiftCardsVerifyCall) Context(ctx context.Context) *GiftCardsVerifyCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *GiftCardsVerifyCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *GiftCardsVerifyCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.verifygiftcardrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "giftCards:verify")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.giftCards.verify" call.
// Exactly one of *VerifyGiftCardResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *VerifyGiftCardResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *GiftCardsVerifyCall) Do(opts ...googleapi.CallOption) (*VerifyGiftCardResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &VerifyGiftCardResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Verifies ownership of a damaged GC by checking if the activation number and partial redemption code are valid and refers to the same card. Returns the redemption token on success.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.giftCards.verify",
	//   "path": "giftCards:verify",
	//   "request": {
	//     "$ref": "VerifyGiftCardRequest"
	//   },
	//   "response": {
	//     "$ref": "VerifyGiftCardResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.ginlogs.logDataAccess":

type GinlogsLogDataAccessCall struct {
	s                    *Service
	logdataaccessrequest *LogDataAccessRequest
	urlParams_           gensupport.URLParams
	ctx_                 context.Context
	header_              http.Header
}

// LogDataAccess: Logs data access.
func (r *GinlogsService) LogDataAccess(logdataaccessrequest *LogDataAccessRequest) *GinlogsLogDataAccessCall {
	c := &GinlogsLogDataAccessCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.logdataaccessrequest = logdataaccessrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *GinlogsLogDataAccessCall) Fields(s ...googleapi.Field) *GinlogsLogDataAccessCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *GinlogsLogDataAccessCall) Context(ctx context.Context) *GinlogsLogDataAccessCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *GinlogsLogDataAccessCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *GinlogsLogDataAccessCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.logdataaccessrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "ginlogs:logDataAccess")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.ginlogs.logDataAccess" call.
// Exactly one of *Empty or error will be non-nil. Any non-2xx status
// code is an error. Response headers are in either
// *Empty.ServerResponse.Header or (if a response was returned at all)
// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to
// check whether the returned error was because http.StatusNotModified
// was returned.
func (c *GinlogsLogDataAccessCall) Do(opts ...googleapi.CallOption) (*Empty, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &Empty{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Logs data access.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.ginlogs.logDataAccess",
	//   "path": "ginlogs:logDataAccess",
	//   "request": {
	//     "$ref": "LogDataAccessRequest"
	//   },
	//   "response": {
	//     "$ref": "Empty"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.hardwareAuditor.orders.cancel":

type HardwareAuditorOrdersCancelCall struct {
	s                          *Service
	name                       string
	cancelhardwareorderrequest *CancelHardwareOrderRequest
	urlParams_                 gensupport.URLParams
	ctx_                       context.Context
	header_                    http.Header
}

// Cancel: Cancels the hardware order.
func (r *HardwareAuditorOrdersService) Cancel(name string, cancelhardwareorderrequest *CancelHardwareOrderRequest) *HardwareAuditorOrdersCancelCall {
	c := &HardwareAuditorOrdersCancelCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.cancelhardwareorderrequest = cancelhardwareorderrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *HardwareAuditorOrdersCancelCall) Fields(s ...googleapi.Field) *HardwareAuditorOrdersCancelCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *HardwareAuditorOrdersCancelCall) Context(ctx context.Context) *HardwareAuditorOrdersCancelCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *HardwareAuditorOrdersCancelCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *HardwareAuditorOrdersCancelCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.cancelhardwareorderrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:cancel")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.hardwareAuditor.orders.cancel" call.
// Exactly one of *Empty or error will be non-nil. Any non-2xx status
// code is an error. Response headers are in either
// *Empty.ServerResponse.Header or (if a response was returned at all)
// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to
// check whether the returned error was because http.StatusNotModified
// was returned.
func (c *HardwareAuditorOrdersCancelCall) Do(opts ...googleapi.CallOption) (*Empty, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &Empty{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Cancels the hardware order.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.hardwareAuditor.orders.cancel",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:cancel",
	//   "request": {
	//     "$ref": "CancelHardwareOrderRequest"
	//   },
	//   "response": {
	//     "$ref": "Empty"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.hardwareAuditor.orders.getDetail":

type HardwareAuditorOrdersGetDetailCall struct {
	s                             *Service
	name                          string
	gethardwareorderdetailrequest *GetHardwareOrderDetailRequest
	urlParams_                    gensupport.URLParams
	ctx_                          context.Context
	header_                       http.Header
}

// GetDetail: Gets detail for a hardware order.
func (r *HardwareAuditorOrdersService) GetDetail(name string, gethardwareorderdetailrequest *GetHardwareOrderDetailRequest) *HardwareAuditorOrdersGetDetailCall {
	c := &HardwareAuditorOrdersGetDetailCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.gethardwareorderdetailrequest = gethardwareorderdetailrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *HardwareAuditorOrdersGetDetailCall) Fields(s ...googleapi.Field) *HardwareAuditorOrdersGetDetailCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *HardwareAuditorOrdersGetDetailCall) Context(ctx context.Context) *HardwareAuditorOrdersGetDetailCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *HardwareAuditorOrdersGetDetailCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *HardwareAuditorOrdersGetDetailCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.gethardwareorderdetailrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:getDetail")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.hardwareAuditor.orders.getDetail" call.
// Exactly one of *HardwareOrderDetail or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *HardwareOrderDetail.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *HardwareAuditorOrdersGetDetailCall) Do(opts ...googleapi.CallOption) (*HardwareOrderDetail, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &HardwareOrderDetail{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Gets detail for a hardware order.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.hardwareAuditor.orders.getDetail",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:getDetail",
	//   "request": {
	//     "$ref": "GetHardwareOrderDetailRequest"
	//   },
	//   "response": {
	//     "$ref": "HardwareOrderDetail"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.hardwareAuditor.orders.getShippingAddress":

type HardwareAuditorOrdersGetShippingAddressCall struct {
	s                         *Service
	name                      string
	getshippingaddressrequest *GetShippingAddressRequest
	urlParams_                gensupport.URLParams
	ctx_                      context.Context
	header_                   http.Header
}

// GetShippingAddress: Gets shipping address for a purchase. Get by
// orderId: /v2/hardwareAuditor/orders/ DEPRECATED TODO(b/34705382)
func (r *HardwareAuditorOrdersService) GetShippingAddress(name string, getshippingaddressrequest *GetShippingAddressRequest) *HardwareAuditorOrdersGetShippingAddressCall {
	c := &HardwareAuditorOrdersGetShippingAddressCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.getshippingaddressrequest = getshippingaddressrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *HardwareAuditorOrdersGetShippingAddressCall) Fields(s ...googleapi.Field) *HardwareAuditorOrdersGetShippingAddressCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *HardwareAuditorOrdersGetShippingAddressCall) Context(ctx context.Context) *HardwareAuditorOrdersGetShippingAddressCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *HardwareAuditorOrdersGetShippingAddressCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *HardwareAuditorOrdersGetShippingAddressCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.getshippingaddressrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:getShippingAddress")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.hardwareAuditor.orders.getShippingAddress" call.
// Exactly one of *ShippingAddress or error will be non-nil. Any non-2xx
// status code is an error. Response headers are in either
// *ShippingAddress.ServerResponse.Header or (if a response was returned
// at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *HardwareAuditorOrdersGetShippingAddressCall) Do(opts ...googleapi.CallOption) (*ShippingAddress, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ShippingAddress{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Gets shipping address for a purchase. Get by orderId: /v2/hardwareAuditor/orders/ DEPRECATED TODO(b/34705382)",
	//   "httpMethod": "POST",
	//   "id": "supportcases.hardwareAuditor.orders.getShippingAddress",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:getShippingAddress",
	//   "request": {
	//     "$ref": "GetShippingAddressRequest"
	//   },
	//   "response": {
	//     "$ref": "ShippingAddress"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.hardwareAuditor.orders.getShippingCustomerName":

type HardwareAuditorOrdersGetShippingCustomerNameCall struct {
	s                              *Service
	name                           string
	getshippingcustomernamerequest *GetShippingCustomerNameRequest
	urlParams_                     gensupport.URLParams
	ctx_                           context.Context
	header_                        http.Header
}

// GetShippingCustomerName: Gets the shipping customer name for a
// hardware order Get by orderId: /v2/hardwareAuditor/orders/ DEPRECATED
// TODO(b/34705382)
func (r *HardwareAuditorOrdersService) GetShippingCustomerName(name string, getshippingcustomernamerequest *GetShippingCustomerNameRequest) *HardwareAuditorOrdersGetShippingCustomerNameCall {
	c := &HardwareAuditorOrdersGetShippingCustomerNameCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.getshippingcustomernamerequest = getshippingcustomernamerequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *HardwareAuditorOrdersGetShippingCustomerNameCall) Fields(s ...googleapi.Field) *HardwareAuditorOrdersGetShippingCustomerNameCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *HardwareAuditorOrdersGetShippingCustomerNameCall) Context(ctx context.Context) *HardwareAuditorOrdersGetShippingCustomerNameCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *HardwareAuditorOrdersGetShippingCustomerNameCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *HardwareAuditorOrdersGetShippingCustomerNameCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.getshippingcustomernamerequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:getShippingCustomerName")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.hardwareAuditor.orders.getShippingCustomerName" call.
// Exactly one of *ShippingCustomerName or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *ShippingCustomerName.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *HardwareAuditorOrdersGetShippingCustomerNameCall) Do(opts ...googleapi.CallOption) (*ShippingCustomerName, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ShippingCustomerName{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Gets the shipping customer name for a hardware order Get by orderId: /v2/hardwareAuditor/orders/ DEPRECATED TODO(b/34705382)",
	//   "httpMethod": "POST",
	//   "id": "supportcases.hardwareAuditor.orders.getShippingCustomerName",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:getShippingCustomerName",
	//   "request": {
	//     "$ref": "GetShippingCustomerNameRequest"
	//   },
	//   "response": {
	//     "$ref": "ShippingCustomerName"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.hardwareAuditor.orders.getShippingCustomerPhoneNumber":

type HardwareAuditorOrdersGetShippingCustomerPhoneNumberCall struct {
	s                                     *Service
	name                                  string
	getshippingcustomerphonenumberrequest *GetShippingCustomerPhoneNumberRequest
	urlParams_                            gensupport.URLParams
	ctx_                                  context.Context
	header_                               http.Header
}

// GetShippingCustomerPhoneNumber: Gets the shipping customer phone
// number for a hardware order Get by orderId:
// /v2/hardwareAuditor/orders/ DEPRECATED TODO(b/34705382)
func (r *HardwareAuditorOrdersService) GetShippingCustomerPhoneNumber(name string, getshippingcustomerphonenumberrequest *GetShippingCustomerPhoneNumberRequest) *HardwareAuditorOrdersGetShippingCustomerPhoneNumberCall {
	c := &HardwareAuditorOrdersGetShippingCustomerPhoneNumberCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.getshippingcustomerphonenumberrequest = getshippingcustomerphonenumberrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *HardwareAuditorOrdersGetShippingCustomerPhoneNumberCall) Fields(s ...googleapi.Field) *HardwareAuditorOrdersGetShippingCustomerPhoneNumberCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *HardwareAuditorOrdersGetShippingCustomerPhoneNumberCall) Context(ctx context.Context) *HardwareAuditorOrdersGetShippingCustomerPhoneNumberCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *HardwareAuditorOrdersGetShippingCustomerPhoneNumberCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *HardwareAuditorOrdersGetShippingCustomerPhoneNumberCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.getshippingcustomerphonenumberrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:getShippingCustomerPhoneNumber")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.hardwareAuditor.orders.getShippingCustomerPhoneNumber" call.
// Exactly one of *ShippingCustomerPhoneNumber or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *ShippingCustomerPhoneNumber.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *HardwareAuditorOrdersGetShippingCustomerPhoneNumberCall) Do(opts ...googleapi.CallOption) (*ShippingCustomerPhoneNumber, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ShippingCustomerPhoneNumber{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Gets the shipping customer phone number for a hardware order Get by orderId: /v2/hardwareAuditor/orders/ DEPRECATED TODO(b/34705382)",
	//   "httpMethod": "POST",
	//   "id": "supportcases.hardwareAuditor.orders.getShippingCustomerPhoneNumber",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:getShippingCustomerPhoneNumber",
	//   "request": {
	//     "$ref": "GetShippingCustomerPhoneNumberRequest"
	//   },
	//   "response": {
	//     "$ref": "ShippingCustomerPhoneNumber"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.hardwareAuditor.orders.list":

type HardwareAuditorOrdersListCall struct {
	s                         *Service
	listhardwareordersrequest *ListHardwareOrdersRequest
	urlParams_                gensupport.URLParams
	ctx_                      context.Context
	header_                   http.Header
}

// List: Lists hardware orders.
func (r *HardwareAuditorOrdersService) List(listhardwareordersrequest *ListHardwareOrdersRequest) *HardwareAuditorOrdersListCall {
	c := &HardwareAuditorOrdersListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.listhardwareordersrequest = listhardwareordersrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *HardwareAuditorOrdersListCall) Fields(s ...googleapi.Field) *HardwareAuditorOrdersListCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *HardwareAuditorOrdersListCall) Context(ctx context.Context) *HardwareAuditorOrdersListCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *HardwareAuditorOrdersListCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *HardwareAuditorOrdersListCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.listhardwareordersrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "hardwareAuditor/orders:list")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.hardwareAuditor.orders.list" call.
// Exactly one of *ListHardwareOrdersResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *ListHardwareOrdersResponse.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *HardwareAuditorOrdersListCall) Do(opts ...googleapi.CallOption) (*ListHardwareOrdersResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ListHardwareOrdersResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Lists hardware orders.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.hardwareAuditor.orders.list",
	//   "path": "hardwareAuditor/orders:list",
	//   "request": {
	//     "$ref": "ListHardwareOrdersRequest"
	//   },
	//   "response": {
	//     "$ref": "ListHardwareOrdersResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.hardwareAuditor.orders.refunds":

type HardwareAuditorOrdersRefundsCall struct {
	s                          *Service
	name                       string
	listhardwarerefundsrequest *ListHardwareRefundsRequest
	urlParams_                 gensupport.URLParams
	ctx_                       context.Context
	header_                    http.Header
}

// Refunds: Lists refunds for a hardware order.
func (r *HardwareAuditorOrdersService) Refunds(name string, listhardwarerefundsrequest *ListHardwareRefundsRequest) *HardwareAuditorOrdersRefundsCall {
	c := &HardwareAuditorOrdersRefundsCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.listhardwarerefundsrequest = listhardwarerefundsrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *HardwareAuditorOrdersRefundsCall) Fields(s ...googleapi.Field) *HardwareAuditorOrdersRefundsCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *HardwareAuditorOrdersRefundsCall) Context(ctx context.Context) *HardwareAuditorOrdersRefundsCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *HardwareAuditorOrdersRefundsCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *HardwareAuditorOrdersRefundsCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.listhardwarerefundsrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}/refunds")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.hardwareAuditor.orders.refunds" call.
// Exactly one of *ListHardwareRefundsResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *ListHardwareRefundsResponse.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *HardwareAuditorOrdersRefundsCall) Do(opts ...googleapi.CallOption) (*ListHardwareRefundsResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ListHardwareRefundsResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Lists refunds for a hardware order.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.hardwareAuditor.orders.refunds",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}/refunds",
	//   "request": {
	//     "$ref": "ListHardwareRefundsRequest"
	//   },
	//   "response": {
	//     "$ref": "ListHardwareRefundsResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.hardwareAuditor.shipments.cancel":

type HardwareAuditorShipmentsCancelCall struct {
	s                          *Service
	name                       string
	cancelhardwareorderrequest *CancelHardwareOrderRequest
	urlParams_                 gensupport.URLParams
	ctx_                       context.Context
	header_                    http.Header
}

// Cancel: Cancels the hardware order by shipment id.
func (r *HardwareAuditorShipmentsService) Cancel(name string, cancelhardwareorderrequest *CancelHardwareOrderRequest) *HardwareAuditorShipmentsCancelCall {
	c := &HardwareAuditorShipmentsCancelCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.cancelhardwareorderrequest = cancelhardwareorderrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *HardwareAuditorShipmentsCancelCall) Fields(s ...googleapi.Field) *HardwareAuditorShipmentsCancelCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *HardwareAuditorShipmentsCancelCall) Context(ctx context.Context) *HardwareAuditorShipmentsCancelCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *HardwareAuditorShipmentsCancelCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *HardwareAuditorShipmentsCancelCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.cancelhardwareorderrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:cancel")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.hardwareAuditor.shipments.cancel" call.
// Exactly one of *Empty or error will be non-nil. Any non-2xx status
// code is an error. Response headers are in either
// *Empty.ServerResponse.Header or (if a response was returned at all)
// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to
// check whether the returned error was because http.StatusNotModified
// was returned.
func (c *HardwareAuditorShipmentsCancelCall) Do(opts ...googleapi.CallOption) (*Empty, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &Empty{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Cancels the hardware order by shipment id.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.hardwareAuditor.shipments.cancel",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:cancel",
	//   "request": {
	//     "$ref": "CancelHardwareOrderRequest"
	//   },
	//   "response": {
	//     "$ref": "Empty"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.hardwareAuditor.shipments.getShippingAddress":

type HardwareAuditorShipmentsGetShippingAddressCall struct {
	s                         *Service
	name                      string
	getshippingaddressrequest *GetShippingAddressRequest
	urlParams_                gensupport.URLParams
	ctx_                      context.Context
	header_                   http.Header
}

// GetShippingAddress: --------- Begin of shipment Id based calls
// ----------------- Gets shipping address for a purchase Get by
// shipmentId: /v2/hardwareAuditor/shipments/:
func (r *HardwareAuditorShipmentsService) GetShippingAddress(name string, getshippingaddressrequest *GetShippingAddressRequest) *HardwareAuditorShipmentsGetShippingAddressCall {
	c := &HardwareAuditorShipmentsGetShippingAddressCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.getshippingaddressrequest = getshippingaddressrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *HardwareAuditorShipmentsGetShippingAddressCall) Fields(s ...googleapi.Field) *HardwareAuditorShipmentsGetShippingAddressCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *HardwareAuditorShipmentsGetShippingAddressCall) Context(ctx context.Context) *HardwareAuditorShipmentsGetShippingAddressCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *HardwareAuditorShipmentsGetShippingAddressCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *HardwareAuditorShipmentsGetShippingAddressCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.getshippingaddressrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:getShippingAddress")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.hardwareAuditor.shipments.getShippingAddress" call.
// Exactly one of *ShippingAddress or error will be non-nil. Any non-2xx
// status code is an error. Response headers are in either
// *ShippingAddress.ServerResponse.Header or (if a response was returned
// at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *HardwareAuditorShipmentsGetShippingAddressCall) Do(opts ...googleapi.CallOption) (*ShippingAddress, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ShippingAddress{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "--------- Begin of shipment Id based calls ----------------- Gets shipping address for a purchase Get by shipmentId: /v2/hardwareAuditor/shipments/:",
	//   "httpMethod": "POST",
	//   "id": "supportcases.hardwareAuditor.shipments.getShippingAddress",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:getShippingAddress",
	//   "request": {
	//     "$ref": "GetShippingAddressRequest"
	//   },
	//   "response": {
	//     "$ref": "ShippingAddress"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.hardwareAuditor.shipments.getShippingCustomerName":

type HardwareAuditorShipmentsGetShippingCustomerNameCall struct {
	s                              *Service
	name                           string
	getshippingcustomernamerequest *GetShippingCustomerNameRequest
	urlParams_                     gensupport.URLParams
	ctx_                           context.Context
	header_                        http.Header
}

// GetShippingCustomerName: Gets the shipping customer name for a
// hardware order Get by shipmentId: /v2/hardwareAuditor/shipments/:
func (r *HardwareAuditorShipmentsService) GetShippingCustomerName(name string, getshippingcustomernamerequest *GetShippingCustomerNameRequest) *HardwareAuditorShipmentsGetShippingCustomerNameCall {
	c := &HardwareAuditorShipmentsGetShippingCustomerNameCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.getshippingcustomernamerequest = getshippingcustomernamerequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *HardwareAuditorShipmentsGetShippingCustomerNameCall) Fields(s ...googleapi.Field) *HardwareAuditorShipmentsGetShippingCustomerNameCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *HardwareAuditorShipmentsGetShippingCustomerNameCall) Context(ctx context.Context) *HardwareAuditorShipmentsGetShippingCustomerNameCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *HardwareAuditorShipmentsGetShippingCustomerNameCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *HardwareAuditorShipmentsGetShippingCustomerNameCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.getshippingcustomernamerequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:getShippingCustomerName")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.hardwareAuditor.shipments.getShippingCustomerName" call.
// Exactly one of *ShippingCustomerName or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *ShippingCustomerName.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *HardwareAuditorShipmentsGetShippingCustomerNameCall) Do(opts ...googleapi.CallOption) (*ShippingCustomerName, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ShippingCustomerName{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Gets the shipping customer name for a hardware order Get by shipmentId: /v2/hardwareAuditor/shipments/:",
	//   "httpMethod": "POST",
	//   "id": "supportcases.hardwareAuditor.shipments.getShippingCustomerName",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:getShippingCustomerName",
	//   "request": {
	//     "$ref": "GetShippingCustomerNameRequest"
	//   },
	//   "response": {
	//     "$ref": "ShippingCustomerName"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.hardwareAuditor.shipments.getShippingCustomerPhoneNumber":

type HardwareAuditorShipmentsGetShippingCustomerPhoneNumberCall struct {
	s                                     *Service
	name                                  string
	getshippingcustomerphonenumberrequest *GetShippingCustomerPhoneNumberRequest
	urlParams_                            gensupport.URLParams
	ctx_                                  context.Context
	header_                               http.Header
}

// GetShippingCustomerPhoneNumber: Gets the shipping customer phone
// number for a hardware order Get by shipmentId:
// /v2/hardwareAuditor/shipments/:
func (r *HardwareAuditorShipmentsService) GetShippingCustomerPhoneNumber(name string, getshippingcustomerphonenumberrequest *GetShippingCustomerPhoneNumberRequest) *HardwareAuditorShipmentsGetShippingCustomerPhoneNumberCall {
	c := &HardwareAuditorShipmentsGetShippingCustomerPhoneNumberCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.getshippingcustomerphonenumberrequest = getshippingcustomerphonenumberrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *HardwareAuditorShipmentsGetShippingCustomerPhoneNumberCall) Fields(s ...googleapi.Field) *HardwareAuditorShipmentsGetShippingCustomerPhoneNumberCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *HardwareAuditorShipmentsGetShippingCustomerPhoneNumberCall) Context(ctx context.Context) *HardwareAuditorShipmentsGetShippingCustomerPhoneNumberCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *HardwareAuditorShipmentsGetShippingCustomerPhoneNumberCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *HardwareAuditorShipmentsGetShippingCustomerPhoneNumberCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.getshippingcustomerphonenumberrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:getShippingCustomerPhoneNumber")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.hardwareAuditor.shipments.getShippingCustomerPhoneNumber" call.
// Exactly one of *ShippingCustomerPhoneNumber or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *ShippingCustomerPhoneNumber.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *HardwareAuditorShipmentsGetShippingCustomerPhoneNumberCall) Do(opts ...googleapi.CallOption) (*ShippingCustomerPhoneNumber, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ShippingCustomerPhoneNumber{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Gets the shipping customer phone number for a hardware order Get by shipmentId: /v2/hardwareAuditor/shipments/:",
	//   "httpMethod": "POST",
	//   "id": "supportcases.hardwareAuditor.shipments.getShippingCustomerPhoneNumber",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:getShippingCustomerPhoneNumber",
	//   "request": {
	//     "$ref": "GetShippingCustomerPhoneNumberRequest"
	//   },
	//   "response": {
	//     "$ref": "ShippingCustomerPhoneNumber"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.hardwareAuditor.shipments.refunds":

type HardwareAuditorShipmentsRefundsCall struct {
	s                          *Service
	name                       string
	listhardwarerefundsrequest *ListHardwareRefundsRequest
	urlParams_                 gensupport.URLParams
	ctx_                       context.Context
	header_                    http.Header
}

// Refunds: Lists refunds for a hardware order. Get by shipmentId:
// /v2/hardwareAuditor/shipments/:
func (r *HardwareAuditorShipmentsService) Refunds(name string, listhardwarerefundsrequest *ListHardwareRefundsRequest) *HardwareAuditorShipmentsRefundsCall {
	c := &HardwareAuditorShipmentsRefundsCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.listhardwarerefundsrequest = listhardwarerefundsrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *HardwareAuditorShipmentsRefundsCall) Fields(s ...googleapi.Field) *HardwareAuditorShipmentsRefundsCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *HardwareAuditorShipmentsRefundsCall) Context(ctx context.Context) *HardwareAuditorShipmentsRefundsCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *HardwareAuditorShipmentsRefundsCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *HardwareAuditorShipmentsRefundsCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.listhardwarerefundsrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}/refunds")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.hardwareAuditor.shipments.refunds" call.
// Exactly one of *ListHardwareRefundsResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *ListHardwareRefundsResponse.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *HardwareAuditorShipmentsRefundsCall) Do(opts ...googleapi.CallOption) (*ListHardwareRefundsResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ListHardwareRefundsResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Lists refunds for a hardware order. Get by shipmentId: /v2/hardwareAuditor/shipments/:",
	//   "httpMethod": "POST",
	//   "id": "supportcases.hardwareAuditor.shipments.refunds",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}/refunds",
	//   "request": {
	//     "$ref": "ListHardwareRefundsRequest"
	//   },
	//   "response": {
	//     "$ref": "ListHardwareRefundsResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.hardwareOrders.cancel":

type HardwareOrdersCancelCall struct {
	s                          *Service
	name                       string
	cancelhardwareorderrequest *CancelHardwareOrderRequest
	urlParams_                 gensupport.URLParams
	ctx_                       context.Context
	header_                    http.Header
}

// Cancel: Cancels the hardware order.
func (r *HardwareOrdersService) Cancel(name string, cancelhardwareorderrequest *CancelHardwareOrderRequest) *HardwareOrdersCancelCall {
	c := &HardwareOrdersCancelCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.cancelhardwareorderrequest = cancelhardwareorderrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *HardwareOrdersCancelCall) Fields(s ...googleapi.Field) *HardwareOrdersCancelCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *HardwareOrdersCancelCall) Context(ctx context.Context) *HardwareOrdersCancelCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *HardwareOrdersCancelCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *HardwareOrdersCancelCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.cancelhardwareorderrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:cancel")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.hardwareOrders.cancel" call.
// Exactly one of *Empty or error will be non-nil. Any non-2xx status
// code is an error. Response headers are in either
// *Empty.ServerResponse.Header or (if a response was returned at all)
// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to
// check whether the returned error was because http.StatusNotModified
// was returned.
func (c *HardwareOrdersCancelCall) Do(opts ...googleapi.CallOption) (*Empty, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &Empty{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Cancels the hardware order.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.hardwareOrders.cancel",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:cancel",
	//   "request": {
	//     "$ref": "CancelHardwareOrderRequest"
	//   },
	//   "response": {
	//     "$ref": "Empty"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.hardwareOrders.getDetail":

type HardwareOrdersGetDetailCall struct {
	s                             *Service
	name                          string
	gethardwareorderdetailrequest *GetHardwareOrderDetailRequest
	urlParams_                    gensupport.URLParams
	ctx_                          context.Context
	header_                       http.Header
}

// GetDetail: Gets detail for a hardware order.
func (r *HardwareOrdersService) GetDetail(name string, gethardwareorderdetailrequest *GetHardwareOrderDetailRequest) *HardwareOrdersGetDetailCall {
	c := &HardwareOrdersGetDetailCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.gethardwareorderdetailrequest = gethardwareorderdetailrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *HardwareOrdersGetDetailCall) Fields(s ...googleapi.Field) *HardwareOrdersGetDetailCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *HardwareOrdersGetDetailCall) Context(ctx context.Context) *HardwareOrdersGetDetailCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *HardwareOrdersGetDetailCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *HardwareOrdersGetDetailCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.gethardwareorderdetailrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:getDetail")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.hardwareOrders.getDetail" call.
// Exactly one of *HardwareOrderDetail or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *HardwareOrderDetail.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *HardwareOrdersGetDetailCall) Do(opts ...googleapi.CallOption) (*HardwareOrderDetail, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &HardwareOrderDetail{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Gets detail for a hardware order.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.hardwareOrders.getDetail",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:getDetail",
	//   "request": {
	//     "$ref": "GetHardwareOrderDetailRequest"
	//   },
	//   "response": {
	//     "$ref": "HardwareOrderDetail"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.hardwareOrders.getLostStolenRefundEligibility":

type HardwareOrdersGetLostStolenRefundEligibilityCall struct {
	s                                     *Service
	name                                  string
	getloststolenrefundeligibilityrequest *GetLostStolenRefundEligibilityRequest
	urlParams_                            gensupport.URLParams
	ctx_                                  context.Context
	header_                               http.Header
}

// GetLostStolenRefundEligibility: Gets lost stolen refund eligibility
// for account Get by orderId: /v2/hardwareOrders/ DEPRECATED
// TODO(b/34705382)
func (r *HardwareOrdersService) GetLostStolenRefundEligibility(name string, getloststolenrefundeligibilityrequest *GetLostStolenRefundEligibilityRequest) *HardwareOrdersGetLostStolenRefundEligibilityCall {
	c := &HardwareOrdersGetLostStolenRefundEligibilityCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.getloststolenrefundeligibilityrequest = getloststolenrefundeligibilityrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *HardwareOrdersGetLostStolenRefundEligibilityCall) Fields(s ...googleapi.Field) *HardwareOrdersGetLostStolenRefundEligibilityCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *HardwareOrdersGetLostStolenRefundEligibilityCall) Context(ctx context.Context) *HardwareOrdersGetLostStolenRefundEligibilityCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *HardwareOrdersGetLostStolenRefundEligibilityCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *HardwareOrdersGetLostStolenRefundEligibilityCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.getloststolenrefundeligibilityrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:getLostStolenRefundEligibility")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.hardwareOrders.getLostStolenRefundEligibility" call.
// Exactly one of *LostStolenRefundEligibility or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *LostStolenRefundEligibility.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *HardwareOrdersGetLostStolenRefundEligibilityCall) Do(opts ...googleapi.CallOption) (*LostStolenRefundEligibility, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &LostStolenRefundEligibility{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Gets lost stolen refund eligibility for account Get by orderId: /v2/hardwareOrders/ DEPRECATED TODO(b/34705382)",
	//   "httpMethod": "POST",
	//   "id": "supportcases.hardwareOrders.getLostStolenRefundEligibility",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:getLostStolenRefundEligibility",
	//   "request": {
	//     "$ref": "GetLostStolenRefundEligibilityRequest"
	//   },
	//   "response": {
	//     "$ref": "LostStolenRefundEligibility"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.hardwareOrders.getShippingAddress":

type HardwareOrdersGetShippingAddressCall struct {
	s                         *Service
	name                      string
	getshippingaddressrequest *GetShippingAddressRequest
	urlParams_                gensupport.URLParams
	ctx_                      context.Context
	header_                   http.Header
}

// GetShippingAddress: Gets shipping address for a purchase Get by
// orderId: /v2/hardwareOrders/ DEPRECATED TODO(b/34705382)
func (r *HardwareOrdersService) GetShippingAddress(name string, getshippingaddressrequest *GetShippingAddressRequest) *HardwareOrdersGetShippingAddressCall {
	c := &HardwareOrdersGetShippingAddressCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.getshippingaddressrequest = getshippingaddressrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *HardwareOrdersGetShippingAddressCall) Fields(s ...googleapi.Field) *HardwareOrdersGetShippingAddressCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *HardwareOrdersGetShippingAddressCall) Context(ctx context.Context) *HardwareOrdersGetShippingAddressCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *HardwareOrdersGetShippingAddressCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *HardwareOrdersGetShippingAddressCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.getshippingaddressrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:getShippingAddress")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.hardwareOrders.getShippingAddress" call.
// Exactly one of *ShippingAddress or error will be non-nil. Any non-2xx
// status code is an error. Response headers are in either
// *ShippingAddress.ServerResponse.Header or (if a response was returned
// at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *HardwareOrdersGetShippingAddressCall) Do(opts ...googleapi.CallOption) (*ShippingAddress, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ShippingAddress{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Gets shipping address for a purchase Get by orderId: /v2/hardwareOrders/ DEPRECATED TODO(b/34705382)",
	//   "httpMethod": "POST",
	//   "id": "supportcases.hardwareOrders.getShippingAddress",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:getShippingAddress",
	//   "request": {
	//     "$ref": "GetShippingAddressRequest"
	//   },
	//   "response": {
	//     "$ref": "ShippingAddress"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.hardwareOrders.getShippingCustomerName":

type HardwareOrdersGetShippingCustomerNameCall struct {
	s                              *Service
	name                           string
	getshippingcustomernamerequest *GetShippingCustomerNameRequest
	urlParams_                     gensupport.URLParams
	ctx_                           context.Context
	header_                        http.Header
}

// GetShippingCustomerName: Gets the shipping customer name for a
// hardware order Get by orderId: /v2/hardwareOrders/ DEPRECATED
// TODO(b/34705382)
func (r *HardwareOrdersService) GetShippingCustomerName(name string, getshippingcustomernamerequest *GetShippingCustomerNameRequest) *HardwareOrdersGetShippingCustomerNameCall {
	c := &HardwareOrdersGetShippingCustomerNameCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.getshippingcustomernamerequest = getshippingcustomernamerequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *HardwareOrdersGetShippingCustomerNameCall) Fields(s ...googleapi.Field) *HardwareOrdersGetShippingCustomerNameCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *HardwareOrdersGetShippingCustomerNameCall) Context(ctx context.Context) *HardwareOrdersGetShippingCustomerNameCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *HardwareOrdersGetShippingCustomerNameCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *HardwareOrdersGetShippingCustomerNameCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.getshippingcustomernamerequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:getShippingCustomerName")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.hardwareOrders.getShippingCustomerName" call.
// Exactly one of *ShippingCustomerName or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *ShippingCustomerName.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *HardwareOrdersGetShippingCustomerNameCall) Do(opts ...googleapi.CallOption) (*ShippingCustomerName, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ShippingCustomerName{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Gets the shipping customer name for a hardware order Get by orderId: /v2/hardwareOrders/ DEPRECATED TODO(b/34705382)",
	//   "httpMethod": "POST",
	//   "id": "supportcases.hardwareOrders.getShippingCustomerName",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:getShippingCustomerName",
	//   "request": {
	//     "$ref": "GetShippingCustomerNameRequest"
	//   },
	//   "response": {
	//     "$ref": "ShippingCustomerName"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.hardwareOrders.getShippingCustomerPhoneNumber":

type HardwareOrdersGetShippingCustomerPhoneNumberCall struct {
	s                                     *Service
	name                                  string
	getshippingcustomerphonenumberrequest *GetShippingCustomerPhoneNumberRequest
	urlParams_                            gensupport.URLParams
	ctx_                                  context.Context
	header_                               http.Header
}

// GetShippingCustomerPhoneNumber: Gets the shipping customer phone
// number for a hardware order Get by orderId: /v2/hardwareOrders/
// DEPRECATED TODO(b/34705382)
func (r *HardwareOrdersService) GetShippingCustomerPhoneNumber(name string, getshippingcustomerphonenumberrequest *GetShippingCustomerPhoneNumberRequest) *HardwareOrdersGetShippingCustomerPhoneNumberCall {
	c := &HardwareOrdersGetShippingCustomerPhoneNumberCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.getshippingcustomerphonenumberrequest = getshippingcustomerphonenumberrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *HardwareOrdersGetShippingCustomerPhoneNumberCall) Fields(s ...googleapi.Field) *HardwareOrdersGetShippingCustomerPhoneNumberCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *HardwareOrdersGetShippingCustomerPhoneNumberCall) Context(ctx context.Context) *HardwareOrdersGetShippingCustomerPhoneNumberCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *HardwareOrdersGetShippingCustomerPhoneNumberCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *HardwareOrdersGetShippingCustomerPhoneNumberCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.getshippingcustomerphonenumberrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:getShippingCustomerPhoneNumber")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.hardwareOrders.getShippingCustomerPhoneNumber" call.
// Exactly one of *ShippingCustomerPhoneNumber or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *ShippingCustomerPhoneNumber.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *HardwareOrdersGetShippingCustomerPhoneNumberCall) Do(opts ...googleapi.CallOption) (*ShippingCustomerPhoneNumber, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ShippingCustomerPhoneNumber{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Gets the shipping customer phone number for a hardware order Get by orderId: /v2/hardwareOrders/ DEPRECATED TODO(b/34705382)",
	//   "httpMethod": "POST",
	//   "id": "supportcases.hardwareOrders.getShippingCustomerPhoneNumber",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:getShippingCustomerPhoneNumber",
	//   "request": {
	//     "$ref": "GetShippingCustomerPhoneNumberRequest"
	//   },
	//   "response": {
	//     "$ref": "ShippingCustomerPhoneNumber"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.hardwareOrders.hardwareSignals":

type HardwareOrdersHardwareSignalsCall struct {
	s                         *Service
	gethardwaresignalsrequest *GetHardwareSignalsRequest
	urlParams_                gensupport.URLParams
	ctx_                      context.Context
	header_                   http.Header
}

// HardwareSignals: Gets hardware signals based on the case and
// customer.
func (r *HardwareOrdersService) HardwareSignals(gethardwaresignalsrequest *GetHardwareSignalsRequest) *HardwareOrdersHardwareSignalsCall {
	c := &HardwareOrdersHardwareSignalsCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.gethardwaresignalsrequest = gethardwaresignalsrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *HardwareOrdersHardwareSignalsCall) Fields(s ...googleapi.Field) *HardwareOrdersHardwareSignalsCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *HardwareOrdersHardwareSignalsCall) Context(ctx context.Context) *HardwareOrdersHardwareSignalsCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *HardwareOrdersHardwareSignalsCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *HardwareOrdersHardwareSignalsCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.gethardwaresignalsrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "hardwareOrders:hardwareSignals")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.hardwareOrders.hardwareSignals" call.
// Exactly one of *GetHardwareSignalsResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *GetHardwareSignalsResponse.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *HardwareOrdersHardwareSignalsCall) Do(opts ...googleapi.CallOption) (*GetHardwareSignalsResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &GetHardwareSignalsResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Gets hardware signals based on the case and customer.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.hardwareOrders.hardwareSignals",
	//   "path": "hardwareOrders:hardwareSignals",
	//   "request": {
	//     "$ref": "GetHardwareSignalsRequest"
	//   },
	//   "response": {
	//     "$ref": "GetHardwareSignalsResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.hardwareOrders.list":

type HardwareOrdersListCall struct {
	s                         *Service
	listhardwareordersrequest *ListHardwareOrdersRequest
	urlParams_                gensupport.URLParams
	ctx_                      context.Context
	header_                   http.Header
}

// List: Lists hardware orders.
func (r *HardwareOrdersService) List(listhardwareordersrequest *ListHardwareOrdersRequest) *HardwareOrdersListCall {
	c := &HardwareOrdersListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.listhardwareordersrequest = listhardwareordersrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *HardwareOrdersListCall) Fields(s ...googleapi.Field) *HardwareOrdersListCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *HardwareOrdersListCall) Context(ctx context.Context) *HardwareOrdersListCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *HardwareOrdersListCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *HardwareOrdersListCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.listhardwareordersrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "hardwareOrders:list")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.hardwareOrders.list" call.
// Exactly one of *ListHardwareOrdersResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *ListHardwareOrdersResponse.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *HardwareOrdersListCall) Do(opts ...googleapi.CallOption) (*ListHardwareOrdersResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ListHardwareOrdersResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Lists hardware orders.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.hardwareOrders.list",
	//   "path": "hardwareOrders:list",
	//   "request": {
	//     "$ref": "ListHardwareOrdersRequest"
	//   },
	//   "response": {
	//     "$ref": "ListHardwareOrdersResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.hardwareOrders.listOtherDevices":

type HardwareOrdersListOtherDevicesCall struct {
	s                       *Service
	listotherdevicesrequest *ListOtherDevicesRequest
	urlParams_              gensupport.URLParams
	ctx_                    context.Context
	header_                 http.Header
}

// ListOtherDevices: Gets a user's devices that are not in the
// ListHardwareOrders result.
func (r *HardwareOrdersService) ListOtherDevices(listotherdevicesrequest *ListOtherDevicesRequest) *HardwareOrdersListOtherDevicesCall {
	c := &HardwareOrdersListOtherDevicesCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.listotherdevicesrequest = listotherdevicesrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *HardwareOrdersListOtherDevicesCall) Fields(s ...googleapi.Field) *HardwareOrdersListOtherDevicesCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *HardwareOrdersListOtherDevicesCall) Context(ctx context.Context) *HardwareOrdersListOtherDevicesCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *HardwareOrdersListOtherDevicesCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *HardwareOrdersListOtherDevicesCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.listotherdevicesrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "hardwareOrders:listOtherDevices")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.hardwareOrders.listOtherDevices" call.
// Exactly one of *ListOtherDevicesResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *ListOtherDevicesResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *HardwareOrdersListOtherDevicesCall) Do(opts ...googleapi.CallOption) (*ListOtherDevicesResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ListOtherDevicesResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Gets a user's devices that are not in the ListHardwareOrders result.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.hardwareOrders.listOtherDevices",
	//   "path": "hardwareOrders:listOtherDevices",
	//   "request": {
	//     "$ref": "ListOtherDevicesRequest"
	//   },
	//   "response": {
	//     "$ref": "ListOtherDevicesResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// Pages invokes f for each page of results.
// A non-nil error returned from f will halt the iteration.
// The provided context supersedes any context provided to the Context method.
func (c *HardwareOrdersListOtherDevicesCall) Pages(ctx context.Context, f func(*ListOtherDevicesResponse) error) error {
	c.ctx_ = ctx
	defer func(pt string) { c.listotherdevicesrequest.PageToken = pt }(c.listotherdevicesrequest.PageToken) // reset paging to original point
	for {
		x, err := c.Do()
		if err != nil {
			return err
		}
		if err := f(x); err != nil {
			return err
		}
		if x.NextPageToken == "" {
			return nil
		}
		c.listotherdevicesrequest.PageToken = x.NextPageToken
	}
}

// method id "supportcases.hardwareOrders.refund":

type HardwareOrdersRefundCall struct {
	s                          *Service
	name                       string
	refundhardwareorderrequest *RefundHardwareOrderRequest
	urlParams_                 gensupport.URLParams
	ctx_                       context.Context
	header_                    http.Header
}

// Refund: Refunds a hardware order
func (r *HardwareOrdersService) Refund(name string, refundhardwareorderrequest *RefundHardwareOrderRequest) *HardwareOrdersRefundCall {
	c := &HardwareOrdersRefundCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.refundhardwareorderrequest = refundhardwareorderrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *HardwareOrdersRefundCall) Fields(s ...googleapi.Field) *HardwareOrdersRefundCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *HardwareOrdersRefundCall) Context(ctx context.Context) *HardwareOrdersRefundCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *HardwareOrdersRefundCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *HardwareOrdersRefundCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.refundhardwareorderrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:refund")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.hardwareOrders.refund" call.
// Exactly one of *RefundHardwareOrderResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *RefundHardwareOrderResponse.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *HardwareOrdersRefundCall) Do(opts ...googleapi.CallOption) (*RefundHardwareOrderResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &RefundHardwareOrderResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Refunds a hardware order",
	//   "httpMethod": "POST",
	//   "id": "supportcases.hardwareOrders.refund",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:refund",
	//   "request": {
	//     "$ref": "RefundHardwareOrderRequest"
	//   },
	//   "response": {
	//     "$ref": "RefundHardwareOrderResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.hardwareOrders.refunds":

type HardwareOrdersRefundsCall struct {
	s                          *Service
	name                       string
	listhardwarerefundsrequest *ListHardwareRefundsRequest
	urlParams_                 gensupport.URLParams
	ctx_                       context.Context
	header_                    http.Header
}

// Refunds: Lists refunds for a hardware order. Get by orderId:
// /v2/hardwareOrders/ DEPRECATED TODO(b/34705382)
func (r *HardwareOrdersService) Refunds(name string, listhardwarerefundsrequest *ListHardwareRefundsRequest) *HardwareOrdersRefundsCall {
	c := &HardwareOrdersRefundsCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.listhardwarerefundsrequest = listhardwarerefundsrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *HardwareOrdersRefundsCall) Fields(s ...googleapi.Field) *HardwareOrdersRefundsCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *HardwareOrdersRefundsCall) Context(ctx context.Context) *HardwareOrdersRefundsCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *HardwareOrdersRefundsCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *HardwareOrdersRefundsCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.listhardwarerefundsrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}/refunds")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.hardwareOrders.refunds" call.
// Exactly one of *ListHardwareRefundsResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *ListHardwareRefundsResponse.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *HardwareOrdersRefundsCall) Do(opts ...googleapi.CallOption) (*ListHardwareRefundsResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ListHardwareRefundsResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Lists refunds for a hardware order. Get by orderId: /v2/hardwareOrders/ DEPRECATED TODO(b/34705382)",
	//   "httpMethod": "POST",
	//   "id": "supportcases.hardwareOrders.refunds",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}/refunds",
	//   "request": {
	//     "$ref": "ListHardwareRefundsRequest"
	//   },
	//   "response": {
	//     "$ref": "ListHardwareRefundsResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.hardwareShipments.cancel":

type HardwareShipmentsCancelCall struct {
	s                          *Service
	name                       string
	cancelhardwareorderrequest *CancelHardwareOrderRequest
	urlParams_                 gensupport.URLParams
	ctx_                       context.Context
	header_                    http.Header
}

// Cancel: Cancels the hardware shipment by shipment id.
func (r *HardwareShipmentsService) Cancel(name string, cancelhardwareorderrequest *CancelHardwareOrderRequest) *HardwareShipmentsCancelCall {
	c := &HardwareShipmentsCancelCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.cancelhardwareorderrequest = cancelhardwareorderrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *HardwareShipmentsCancelCall) Fields(s ...googleapi.Field) *HardwareShipmentsCancelCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *HardwareShipmentsCancelCall) Context(ctx context.Context) *HardwareShipmentsCancelCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *HardwareShipmentsCancelCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *HardwareShipmentsCancelCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.cancelhardwareorderrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:cancel")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.hardwareShipments.cancel" call.
// Exactly one of *Empty or error will be non-nil. Any non-2xx status
// code is an error. Response headers are in either
// *Empty.ServerResponse.Header or (if a response was returned at all)
// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to
// check whether the returned error was because http.StatusNotModified
// was returned.
func (c *HardwareShipmentsCancelCall) Do(opts ...googleapi.CallOption) (*Empty, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &Empty{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Cancels the hardware shipment by shipment id.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.hardwareShipments.cancel",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:cancel",
	//   "request": {
	//     "$ref": "CancelHardwareOrderRequest"
	//   },
	//   "response": {
	//     "$ref": "Empty"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.hardwareShipments.getLostStolenRefundEligibility":

type HardwareShipmentsGetLostStolenRefundEligibilityCall struct {
	s                                     *Service
	name                                  string
	getloststolenrefundeligibilityrequest *GetLostStolenRefundEligibilityRequest
	urlParams_                            gensupport.URLParams
	ctx_                                  context.Context
	header_                               http.Header
}

// GetLostStolenRefundEligibility: Gets lost stolen refund eligibility
// for account Get by shipmentId: /v2/hardwareShipments/:
func (r *HardwareShipmentsService) GetLostStolenRefundEligibility(name string, getloststolenrefundeligibilityrequest *GetLostStolenRefundEligibilityRequest) *HardwareShipmentsGetLostStolenRefundEligibilityCall {
	c := &HardwareShipmentsGetLostStolenRefundEligibilityCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.getloststolenrefundeligibilityrequest = getloststolenrefundeligibilityrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *HardwareShipmentsGetLostStolenRefundEligibilityCall) Fields(s ...googleapi.Field) *HardwareShipmentsGetLostStolenRefundEligibilityCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *HardwareShipmentsGetLostStolenRefundEligibilityCall) Context(ctx context.Context) *HardwareShipmentsGetLostStolenRefundEligibilityCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *HardwareShipmentsGetLostStolenRefundEligibilityCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *HardwareShipmentsGetLostStolenRefundEligibilityCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.getloststolenrefundeligibilityrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:getLostStolenRefundEligibility")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.hardwareShipments.getLostStolenRefundEligibility" call.
// Exactly one of *LostStolenRefundEligibility or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *LostStolenRefundEligibility.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *HardwareShipmentsGetLostStolenRefundEligibilityCall) Do(opts ...googleapi.CallOption) (*LostStolenRefundEligibility, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &LostStolenRefundEligibility{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Gets lost stolen refund eligibility for account Get by shipmentId: /v2/hardwareShipments/:",
	//   "httpMethod": "POST",
	//   "id": "supportcases.hardwareShipments.getLostStolenRefundEligibility",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:getLostStolenRefundEligibility",
	//   "request": {
	//     "$ref": "GetLostStolenRefundEligibilityRequest"
	//   },
	//   "response": {
	//     "$ref": "LostStolenRefundEligibility"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.hardwareShipments.getShippingAddress":

type HardwareShipmentsGetShippingAddressCall struct {
	s                         *Service
	name                      string
	getshippingaddressrequest *GetShippingAddressRequest
	urlParams_                gensupport.URLParams
	ctx_                      context.Context
	header_                   http.Header
}

// GetShippingAddress: --------- Begin of shipment Id based calls
// ----------------- Gets shipping address for a purchase Get by
// shipmentId: /v2/hardwareShipments/:
func (r *HardwareShipmentsService) GetShippingAddress(name string, getshippingaddressrequest *GetShippingAddressRequest) *HardwareShipmentsGetShippingAddressCall {
	c := &HardwareShipmentsGetShippingAddressCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.getshippingaddressrequest = getshippingaddressrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *HardwareShipmentsGetShippingAddressCall) Fields(s ...googleapi.Field) *HardwareShipmentsGetShippingAddressCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *HardwareShipmentsGetShippingAddressCall) Context(ctx context.Context) *HardwareShipmentsGetShippingAddressCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *HardwareShipmentsGetShippingAddressCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *HardwareShipmentsGetShippingAddressCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.getshippingaddressrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:getShippingAddress")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.hardwareShipments.getShippingAddress" call.
// Exactly one of *ShippingAddress or error will be non-nil. Any non-2xx
// status code is an error. Response headers are in either
// *ShippingAddress.ServerResponse.Header or (if a response was returned
// at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *HardwareShipmentsGetShippingAddressCall) Do(opts ...googleapi.CallOption) (*ShippingAddress, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ShippingAddress{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "--------- Begin of shipment Id based calls ----------------- Gets shipping address for a purchase Get by shipmentId: /v2/hardwareShipments/:",
	//   "httpMethod": "POST",
	//   "id": "supportcases.hardwareShipments.getShippingAddress",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:getShippingAddress",
	//   "request": {
	//     "$ref": "GetShippingAddressRequest"
	//   },
	//   "response": {
	//     "$ref": "ShippingAddress"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.hardwareShipments.getShippingCustomerName":

type HardwareShipmentsGetShippingCustomerNameCall struct {
	s                              *Service
	name                           string
	getshippingcustomernamerequest *GetShippingCustomerNameRequest
	urlParams_                     gensupport.URLParams
	ctx_                           context.Context
	header_                        http.Header
}

// GetShippingCustomerName: Gets the shipping customer name for a
// hardware order Get by shipmentId: /v2/hardwareShipments/:
func (r *HardwareShipmentsService) GetShippingCustomerName(name string, getshippingcustomernamerequest *GetShippingCustomerNameRequest) *HardwareShipmentsGetShippingCustomerNameCall {
	c := &HardwareShipmentsGetShippingCustomerNameCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.getshippingcustomernamerequest = getshippingcustomernamerequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *HardwareShipmentsGetShippingCustomerNameCall) Fields(s ...googleapi.Field) *HardwareShipmentsGetShippingCustomerNameCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *HardwareShipmentsGetShippingCustomerNameCall) Context(ctx context.Context) *HardwareShipmentsGetShippingCustomerNameCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *HardwareShipmentsGetShippingCustomerNameCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *HardwareShipmentsGetShippingCustomerNameCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.getshippingcustomernamerequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:getShippingCustomerName")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.hardwareShipments.getShippingCustomerName" call.
// Exactly one of *ShippingCustomerName or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *ShippingCustomerName.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *HardwareShipmentsGetShippingCustomerNameCall) Do(opts ...googleapi.CallOption) (*ShippingCustomerName, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ShippingCustomerName{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Gets the shipping customer name for a hardware order Get by shipmentId: /v2/hardwareShipments/:",
	//   "httpMethod": "POST",
	//   "id": "supportcases.hardwareShipments.getShippingCustomerName",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:getShippingCustomerName",
	//   "request": {
	//     "$ref": "GetShippingCustomerNameRequest"
	//   },
	//   "response": {
	//     "$ref": "ShippingCustomerName"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.hardwareShipments.getShippingCustomerPhoneNumber":

type HardwareShipmentsGetShippingCustomerPhoneNumberCall struct {
	s                                     *Service
	name                                  string
	getshippingcustomerphonenumberrequest *GetShippingCustomerPhoneNumberRequest
	urlParams_                            gensupport.URLParams
	ctx_                                  context.Context
	header_                               http.Header
}

// GetShippingCustomerPhoneNumber: Gets the shipping customer phone
// number for a hardware order Get by shipmentId:
// /v2/hardwareShipments/:
func (r *HardwareShipmentsService) GetShippingCustomerPhoneNumber(name string, getshippingcustomerphonenumberrequest *GetShippingCustomerPhoneNumberRequest) *HardwareShipmentsGetShippingCustomerPhoneNumberCall {
	c := &HardwareShipmentsGetShippingCustomerPhoneNumberCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.getshippingcustomerphonenumberrequest = getshippingcustomerphonenumberrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *HardwareShipmentsGetShippingCustomerPhoneNumberCall) Fields(s ...googleapi.Field) *HardwareShipmentsGetShippingCustomerPhoneNumberCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *HardwareShipmentsGetShippingCustomerPhoneNumberCall) Context(ctx context.Context) *HardwareShipmentsGetShippingCustomerPhoneNumberCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *HardwareShipmentsGetShippingCustomerPhoneNumberCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *HardwareShipmentsGetShippingCustomerPhoneNumberCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.getshippingcustomerphonenumberrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:getShippingCustomerPhoneNumber")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.hardwareShipments.getShippingCustomerPhoneNumber" call.
// Exactly one of *ShippingCustomerPhoneNumber or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *ShippingCustomerPhoneNumber.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *HardwareShipmentsGetShippingCustomerPhoneNumberCall) Do(opts ...googleapi.CallOption) (*ShippingCustomerPhoneNumber, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ShippingCustomerPhoneNumber{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Gets the shipping customer phone number for a hardware order Get by shipmentId: /v2/hardwareShipments/:",
	//   "httpMethod": "POST",
	//   "id": "supportcases.hardwareShipments.getShippingCustomerPhoneNumber",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:getShippingCustomerPhoneNumber",
	//   "request": {
	//     "$ref": "GetShippingCustomerPhoneNumberRequest"
	//   },
	//   "response": {
	//     "$ref": "ShippingCustomerPhoneNumber"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.hardwareShipments.refund":

type HardwareShipmentsRefundCall struct {
	s                          *Service
	name                       string
	refundhardwareorderrequest *RefundHardwareOrderRequest
	urlParams_                 gensupport.URLParams
	ctx_                       context.Context
	header_                    http.Header
}

// Refund: Refunds a hardware shipment by shipment id.
func (r *HardwareShipmentsService) Refund(name string, refundhardwareorderrequest *RefundHardwareOrderRequest) *HardwareShipmentsRefundCall {
	c := &HardwareShipmentsRefundCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.refundhardwareorderrequest = refundhardwareorderrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *HardwareShipmentsRefundCall) Fields(s ...googleapi.Field) *HardwareShipmentsRefundCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *HardwareShipmentsRefundCall) Context(ctx context.Context) *HardwareShipmentsRefundCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *HardwareShipmentsRefundCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *HardwareShipmentsRefundCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.refundhardwareorderrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:refund")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.hardwareShipments.refund" call.
// Exactly one of *RefundHardwareOrderResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *RefundHardwareOrderResponse.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *HardwareShipmentsRefundCall) Do(opts ...googleapi.CallOption) (*RefundHardwareOrderResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &RefundHardwareOrderResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Refunds a hardware shipment by shipment id.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.hardwareShipments.refund",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:refund",
	//   "request": {
	//     "$ref": "RefundHardwareOrderRequest"
	//   },
	//   "response": {
	//     "$ref": "RefundHardwareOrderResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.hardwareShipments.refunds":

type HardwareShipmentsRefundsCall struct {
	s                          *Service
	name                       string
	listhardwarerefundsrequest *ListHardwareRefundsRequest
	urlParams_                 gensupport.URLParams
	ctx_                       context.Context
	header_                    http.Header
}

// Refunds: Lists refunds for a hardware order. Get by shipmentId:
// /v2/hardwareShipments/:
func (r *HardwareShipmentsService) Refunds(name string, listhardwarerefundsrequest *ListHardwareRefundsRequest) *HardwareShipmentsRefundsCall {
	c := &HardwareShipmentsRefundsCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.listhardwarerefundsrequest = listhardwarerefundsrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *HardwareShipmentsRefundsCall) Fields(s ...googleapi.Field) *HardwareShipmentsRefundsCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *HardwareShipmentsRefundsCall) Context(ctx context.Context) *HardwareShipmentsRefundsCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *HardwareShipmentsRefundsCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *HardwareShipmentsRefundsCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.listhardwarerefundsrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}/refunds")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.hardwareShipments.refunds" call.
// Exactly one of *ListHardwareRefundsResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *ListHardwareRefundsResponse.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *HardwareShipmentsRefundsCall) Do(opts ...googleapi.CallOption) (*ListHardwareRefundsResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ListHardwareRefundsResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Lists refunds for a hardware order. Get by shipmentId: /v2/hardwareShipments/:",
	//   "httpMethod": "POST",
	//   "id": "supportcases.hardwareShipments.refunds",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}/refunds",
	//   "request": {
	//     "$ref": "ListHardwareRefundsRequest"
	//   },
	//   "response": {
	//     "$ref": "ListHardwareRefundsResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.opportunities.list":

type OpportunitiesListCall struct {
	s            *Service
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// List: Lists opportunities.
func (r *OpportunitiesService) List() *OpportunitiesListCall {
	c := &OpportunitiesListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	return c
}

// AgentWhitelistedForApollo sets the optional parameter
// "agentWhitelistedForApollo":
func (c *OpportunitiesListCall) AgentWhitelistedForApollo(agentWhitelistedForApollo bool) *OpportunitiesListCall {
	c.urlParams_.Set("agentWhitelistedForApollo", fmt.Sprint(agentWhitelistedForApollo))
	return c
}

// CaseId sets the optional parameter "caseId":
func (c *OpportunitiesListCall) CaseId(caseId string) *OpportunitiesListCall {
	c.urlParams_.Set("caseId", caseId)
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *OpportunitiesListCall) Fields(s ...googleapi.Field) *OpportunitiesListCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *OpportunitiesListCall) IfNoneMatch(entityTag string) *OpportunitiesListCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *OpportunitiesListCall) Context(ctx context.Context) *OpportunitiesListCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *OpportunitiesListCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *OpportunitiesListCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "opportunities")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.opportunities.list" call.
// Exactly one of *ListOpportunitiesResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *ListOpportunitiesResponse.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *OpportunitiesListCall) Do(opts ...googleapi.CallOption) (*ListOpportunitiesResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ListOpportunitiesResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Lists opportunities.",
	//   "httpMethod": "GET",
	//   "id": "supportcases.opportunities.list",
	//   "parameters": {
	//     "agentWhitelistedForApollo": {
	//       "location": "query",
	//       "type": "boolean"
	//     },
	//     "caseId": {
	//       "location": "query",
	//       "type": "string"
	//     }
	//   },
	//   "path": "opportunities",
	//   "response": {
	//     "$ref": "ListOpportunitiesResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.opportunities.pitches.batchCreate":

type OpportunitiesPitchesBatchCreateCall struct {
	s                       *Service
	batchcreatepitchrequest *BatchCreatePitchRequest
	urlParams_              gensupport.URLParams
	ctx_                    context.Context
	header_                 http.Header
}

// BatchCreate: Batch creates pitches.
func (r *OpportunitiesPitchesService) BatchCreate(batchcreatepitchrequest *BatchCreatePitchRequest) *OpportunitiesPitchesBatchCreateCall {
	c := &OpportunitiesPitchesBatchCreateCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.batchcreatepitchrequest = batchcreatepitchrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *OpportunitiesPitchesBatchCreateCall) Fields(s ...googleapi.Field) *OpportunitiesPitchesBatchCreateCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *OpportunitiesPitchesBatchCreateCall) Context(ctx context.Context) *OpportunitiesPitchesBatchCreateCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *OpportunitiesPitchesBatchCreateCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *OpportunitiesPitchesBatchCreateCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.batchcreatepitchrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "opportunities/pitches:batchCreate")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.opportunities.pitches.batchCreate" call.
// Exactly one of *BatchCreatePitchResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *BatchCreatePitchResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *OpportunitiesPitchesBatchCreateCall) Do(opts ...googleapi.CallOption) (*BatchCreatePitchResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &BatchCreatePitchResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Batch creates pitches.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.opportunities.pitches.batchCreate",
	//   "path": "opportunities/pitches:batchCreate",
	//   "request": {
	//     "$ref": "BatchCreatePitchRequest"
	//   },
	//   "response": {
	//     "$ref": "BatchCreatePitchResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.play.digitalContent.getRefundStatus":

type PlayDigitalContentGetRefundStatusCall struct {
	s                      *Service
	getrefundstatusrequest *GetRefundStatusRequest
	urlParams_             gensupport.URLParams
	ctx_                   context.Context
	header_                http.Header
}

// GetRefundStatus: Get refund status.
func (r *PlayDigitalContentService) GetRefundStatus(getrefundstatusrequest *GetRefundStatusRequest) *PlayDigitalContentGetRefundStatusCall {
	c := &PlayDigitalContentGetRefundStatusCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.getrefundstatusrequest = getrefundstatusrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *PlayDigitalContentGetRefundStatusCall) Fields(s ...googleapi.Field) *PlayDigitalContentGetRefundStatusCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *PlayDigitalContentGetRefundStatusCall) Context(ctx context.Context) *PlayDigitalContentGetRefundStatusCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *PlayDigitalContentGetRefundStatusCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *PlayDigitalContentGetRefundStatusCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.getrefundstatusrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "play/digitalContent:getRefundStatus")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.play.digitalContent.getRefundStatus" call.
// Exactly one of *GetRefundStatusResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *GetRefundStatusResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *PlayDigitalContentGetRefundStatusCall) Do(opts ...googleapi.CallOption) (*GetRefundStatusResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &GetRefundStatusResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Get refund status.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.play.digitalContent.getRefundStatus",
	//   "path": "play/digitalContent:getRefundStatus",
	//   "request": {
	//     "$ref": "GetRefundStatusRequest"
	//   },
	//   "response": {
	//     "$ref": "GetRefundStatusResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.play.digitalContent.orders.batchGet":

type PlayDigitalContentOrdersBatchGetCall struct {
	s                *Service
	getordersrequest *GetOrdersRequest
	urlParams_       gensupport.URLParams
	ctx_             context.Context
	header_          http.Header
}

// BatchGet: Get a collection of orders.
func (r *PlayDigitalContentOrdersService) BatchGet(getordersrequest *GetOrdersRequest) *PlayDigitalContentOrdersBatchGetCall {
	c := &PlayDigitalContentOrdersBatchGetCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.getordersrequest = getordersrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *PlayDigitalContentOrdersBatchGetCall) Fields(s ...googleapi.Field) *PlayDigitalContentOrdersBatchGetCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *PlayDigitalContentOrdersBatchGetCall) Context(ctx context.Context) *PlayDigitalContentOrdersBatchGetCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *PlayDigitalContentOrdersBatchGetCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *PlayDigitalContentOrdersBatchGetCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.getordersrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "play/digitalContent/orders:batchGet")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.play.digitalContent.orders.batchGet" call.
// Exactly one of *GetOrdersResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *GetOrdersResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *PlayDigitalContentOrdersBatchGetCall) Do(opts ...googleapi.CallOption) (*GetOrdersResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &GetOrdersResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Get a collection of orders.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.play.digitalContent.orders.batchGet",
	//   "path": "play/digitalContent/orders:batchGet",
	//   "request": {
	//     "$ref": "GetOrdersRequest"
	//   },
	//   "response": {
	//     "$ref": "GetOrdersResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.play.digitalContent.orders.refund":

type PlayDigitalContentOrdersRefundCall struct {
	s                   *Service
	refundordersrequest *RefundOrdersRequest
	urlParams_          gensupport.URLParams
	ctx_                context.Context
	header_             http.Header
}

// Refund: Refund orders.
func (r *PlayDigitalContentOrdersService) Refund(refundordersrequest *RefundOrdersRequest) *PlayDigitalContentOrdersRefundCall {
	c := &PlayDigitalContentOrdersRefundCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.refundordersrequest = refundordersrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *PlayDigitalContentOrdersRefundCall) Fields(s ...googleapi.Field) *PlayDigitalContentOrdersRefundCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *PlayDigitalContentOrdersRefundCall) Context(ctx context.Context) *PlayDigitalContentOrdersRefundCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *PlayDigitalContentOrdersRefundCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *PlayDigitalContentOrdersRefundCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.refundordersrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "play/digitalContent/orders:refund")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.play.digitalContent.orders.refund" call.
// Exactly one of *RefundOrdersResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *RefundOrdersResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *PlayDigitalContentOrdersRefundCall) Do(opts ...googleapi.CallOption) (*RefundOrdersResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &RefundOrdersResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Refund orders.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.play.digitalContent.orders.refund",
	//   "path": "play/digitalContent/orders:refund",
	//   "request": {
	//     "$ref": "RefundOrdersRequest"
	//   },
	//   "response": {
	//     "$ref": "RefundOrdersResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.play.digitalContent.orders.search":

type PlayDigitalContentOrdersSearchCall struct {
	s                   *Service
	searchordersrequest *SearchOrdersRequest
	urlParams_          gensupport.URLParams
	ctx_                context.Context
	header_             http.Header
}

// Search: Search for orders.
func (r *PlayDigitalContentOrdersService) Search(searchordersrequest *SearchOrdersRequest) *PlayDigitalContentOrdersSearchCall {
	c := &PlayDigitalContentOrdersSearchCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.searchordersrequest = searchordersrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *PlayDigitalContentOrdersSearchCall) Fields(s ...googleapi.Field) *PlayDigitalContentOrdersSearchCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *PlayDigitalContentOrdersSearchCall) Context(ctx context.Context) *PlayDigitalContentOrdersSearchCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *PlayDigitalContentOrdersSearchCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *PlayDigitalContentOrdersSearchCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.searchordersrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "play/digitalContent/orders:search")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.play.digitalContent.orders.search" call.
// Exactly one of *SearchOrdersResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *SearchOrdersResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *PlayDigitalContentOrdersSearchCall) Do(opts ...googleapi.CallOption) (*SearchOrdersResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &SearchOrdersResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Search for orders.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.play.digitalContent.orders.search",
	//   "path": "play/digitalContent/orders:search",
	//   "request": {
	//     "$ref": "SearchOrdersRequest"
	//   },
	//   "response": {
	//     "$ref": "SearchOrdersResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// Pages invokes f for each page of results.
// A non-nil error returned from f will halt the iteration.
// The provided context supersedes any context provided to the Context method.
func (c *PlayDigitalContentOrdersSearchCall) Pages(ctx context.Context, f func(*SearchOrdersResponse) error) error {
	c.ctx_ = ctx
	defer func(pt string) { c.searchordersrequest.PageToken = pt }(c.searchordersrequest.PageToken) // reset paging to original point
	for {
		x, err := c.Do()
		if err != nil {
			return err
		}
		if err := f(x); err != nil {
			return err
		}
		if x.NextPageToken == "" {
			return nil
		}
		c.searchordersrequest.PageToken = x.NextPageToken
	}
}

// method id "supportcases.play.digitalContent.subscriptions.batchGet":

type PlayDigitalContentSubscriptionsBatchGetCall struct {
	s                       *Service
	getsubscriptionsrequest *GetSubscriptionsRequest
	urlParams_              gensupport.URLParams
	ctx_                    context.Context
	header_                 http.Header
}

// BatchGet: Get a collection of subscriptions.
func (r *PlayDigitalContentSubscriptionsService) BatchGet(getsubscriptionsrequest *GetSubscriptionsRequest) *PlayDigitalContentSubscriptionsBatchGetCall {
	c := &PlayDigitalContentSubscriptionsBatchGetCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.getsubscriptionsrequest = getsubscriptionsrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *PlayDigitalContentSubscriptionsBatchGetCall) Fields(s ...googleapi.Field) *PlayDigitalContentSubscriptionsBatchGetCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *PlayDigitalContentSubscriptionsBatchGetCall) Context(ctx context.Context) *PlayDigitalContentSubscriptionsBatchGetCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *PlayDigitalContentSubscriptionsBatchGetCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *PlayDigitalContentSubscriptionsBatchGetCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.getsubscriptionsrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "play/digitalContent/subscriptions:batchGet")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.play.digitalContent.subscriptions.batchGet" call.
// Exactly one of *GetSubscriptionsResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *GetSubscriptionsResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *PlayDigitalContentSubscriptionsBatchGetCall) Do(opts ...googleapi.CallOption) (*GetSubscriptionsResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &GetSubscriptionsResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Get a collection of subscriptions.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.play.digitalContent.subscriptions.batchGet",
	//   "path": "play/digitalContent/subscriptions:batchGet",
	//   "request": {
	//     "$ref": "GetSubscriptionsRequest"
	//   },
	//   "response": {
	//     "$ref": "GetSubscriptionsResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.play.digitalContent.subscriptions.cancel":

type PlayDigitalContentSubscriptionsCancelCall struct {
	s                         *Service
	cancelsubscriptionrequest *CancelSubscriptionRequest
	urlParams_                gensupport.URLParams
	ctx_                      context.Context
	header_                   http.Header
}

// Cancel: Cancel subscription.
func (r *PlayDigitalContentSubscriptionsService) Cancel(cancelsubscriptionrequest *CancelSubscriptionRequest) *PlayDigitalContentSubscriptionsCancelCall {
	c := &PlayDigitalContentSubscriptionsCancelCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.cancelsubscriptionrequest = cancelsubscriptionrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *PlayDigitalContentSubscriptionsCancelCall) Fields(s ...googleapi.Field) *PlayDigitalContentSubscriptionsCancelCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *PlayDigitalContentSubscriptionsCancelCall) Context(ctx context.Context) *PlayDigitalContentSubscriptionsCancelCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *PlayDigitalContentSubscriptionsCancelCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *PlayDigitalContentSubscriptionsCancelCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.cancelsubscriptionrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "play/digitalContent/subscriptions:cancel")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.play.digitalContent.subscriptions.cancel" call.
// Exactly one of *CancelSubscriptionResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *CancelSubscriptionResponse.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *PlayDigitalContentSubscriptionsCancelCall) Do(opts ...googleapi.CallOption) (*CancelSubscriptionResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &CancelSubscriptionResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Cancel subscription.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.play.digitalContent.subscriptions.cancel",
	//   "path": "play/digitalContent/subscriptions:cancel",
	//   "request": {
	//     "$ref": "CancelSubscriptionRequest"
	//   },
	//   "response": {
	//     "$ref": "CancelSubscriptionResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.play.digitalContent.subscriptions.getCancellationStatus":

type PlayDigitalContentSubscriptionsGetCancellationStatusCall struct {
	s                            *Service
	getcancellationstatusrequest *GetCancellationStatusRequest
	urlParams_                   gensupport.URLParams
	ctx_                         context.Context
	header_                      http.Header
}

// GetCancellationStatus: Get cancellation status.
func (r *PlayDigitalContentSubscriptionsService) GetCancellationStatus(getcancellationstatusrequest *GetCancellationStatusRequest) *PlayDigitalContentSubscriptionsGetCancellationStatusCall {
	c := &PlayDigitalContentSubscriptionsGetCancellationStatusCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.getcancellationstatusrequest = getcancellationstatusrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *PlayDigitalContentSubscriptionsGetCancellationStatusCall) Fields(s ...googleapi.Field) *PlayDigitalContentSubscriptionsGetCancellationStatusCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *PlayDigitalContentSubscriptionsGetCancellationStatusCall) Context(ctx context.Context) *PlayDigitalContentSubscriptionsGetCancellationStatusCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *PlayDigitalContentSubscriptionsGetCancellationStatusCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *PlayDigitalContentSubscriptionsGetCancellationStatusCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.getcancellationstatusrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "play/digitalContent/subscriptions:getCancellationStatus")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.play.digitalContent.subscriptions.getCancellationStatus" call.
// Exactly one of *GetCancellationStatusResponse or error will be
// non-nil. Any non-2xx status code is an error. Response headers are in
// either *GetCancellationStatusResponse.ServerResponse.Header or (if a
// response was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *PlayDigitalContentSubscriptionsGetCancellationStatusCall) Do(opts ...googleapi.CallOption) (*GetCancellationStatusResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &GetCancellationStatusResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Get cancellation status.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.play.digitalContent.subscriptions.getCancellationStatus",
	//   "path": "play/digitalContent/subscriptions:getCancellationStatus",
	//   "request": {
	//     "$ref": "GetCancellationStatusRequest"
	//   },
	//   "response": {
	//     "$ref": "GetCancellationStatusResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.play.digitalContent.subscriptions.list":

type PlayDigitalContentSubscriptionsListCall struct {
	s                        *Service
	listsubscriptionsrequest *ListSubscriptionsRequest
	urlParams_               gensupport.URLParams
	ctx_                     context.Context
	header_                  http.Header
}

// List: List subscriptions.
func (r *PlayDigitalContentSubscriptionsService) List(listsubscriptionsrequest *ListSubscriptionsRequest) *PlayDigitalContentSubscriptionsListCall {
	c := &PlayDigitalContentSubscriptionsListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.listsubscriptionsrequest = listsubscriptionsrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *PlayDigitalContentSubscriptionsListCall) Fields(s ...googleapi.Field) *PlayDigitalContentSubscriptionsListCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *PlayDigitalContentSubscriptionsListCall) Context(ctx context.Context) *PlayDigitalContentSubscriptionsListCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *PlayDigitalContentSubscriptionsListCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *PlayDigitalContentSubscriptionsListCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.listsubscriptionsrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "play/digitalContent/subscriptions:list")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.play.digitalContent.subscriptions.list" call.
// Exactly one of *ListSubscriptionsResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *ListSubscriptionsResponse.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *PlayDigitalContentSubscriptionsListCall) Do(opts ...googleapi.CallOption) (*ListSubscriptionsResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ListSubscriptionsResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "List subscriptions.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.play.digitalContent.subscriptions.list",
	//   "path": "play/digitalContent/subscriptions:list",
	//   "request": {
	//     "$ref": "ListSubscriptionsRequest"
	//   },
	//   "response": {
	//     "$ref": "ListSubscriptionsResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.products.get":

type ProductsGetCall struct {
	s            *Service
	name         string
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// Get: Gets the specified product.
func (r *ProductsService) Get(name string) *ProductsGetCall {
	c := &ProductsGetCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *ProductsGetCall) Fields(s ...googleapi.Field) *ProductsGetCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *ProductsGetCall) IfNoneMatch(entityTag string) *ProductsGetCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *ProductsGetCall) Context(ctx context.Context) *ProductsGetCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *ProductsGetCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *ProductsGetCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.products.get" call.
// Exactly one of *Product1 or error will be non-nil. Any non-2xx status
// code is an error. Response headers are in either
// *Product1.ServerResponse.Header or (if a response was returned at
// all) in error.(*googleapi.Error).Header. Use googleapi.IsNotModified
// to check whether the returned error was because
// http.StatusNotModified was returned.
func (c *ProductsGetCall) Do(opts ...googleapi.CallOption) (*Product1, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &Product1{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Gets the specified product.",
	//   "httpMethod": "GET",
	//   "id": "supportcases.products.get",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}",
	//   "response": {
	//     "$ref": "Product1"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.products.getEscalationTargets":

type ProductsGetEscalationTargetsCall struct {
	s            *Service
	name         string
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// GetEscalationTargets: Gets the available escalation targets.
func (r *ProductsService) GetEscalationTargets(name string) *ProductsGetEscalationTargetsCall {
	c := &ProductsGetEscalationTargetsCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *ProductsGetEscalationTargetsCall) Fields(s ...googleapi.Field) *ProductsGetEscalationTargetsCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *ProductsGetEscalationTargetsCall) IfNoneMatch(entityTag string) *ProductsGetEscalationTargetsCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *ProductsGetEscalationTargetsCall) Context(ctx context.Context) *ProductsGetEscalationTargetsCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *ProductsGetEscalationTargetsCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *ProductsGetEscalationTargetsCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:getEscalationTargets")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.products.getEscalationTargets" call.
// Exactly one of *GetEscalationTargetsResponse or error will be
// non-nil. Any non-2xx status code is an error. Response headers are in
// either *GetEscalationTargetsResponse.ServerResponse.Header or (if a
// response was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *ProductsGetEscalationTargetsCall) Do(opts ...googleapi.CallOption) (*GetEscalationTargetsResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &GetEscalationTargetsResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Gets the available escalation targets.",
	//   "httpMethod": "GET",
	//   "id": "supportcases.products.getEscalationTargets",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:getEscalationTargets",
	//   "response": {
	//     "$ref": "GetEscalationTargetsResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.products.getRoutingTargets":

type ProductsGetRoutingTargetsCall struct {
	s            *Service
	name         string
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// GetRoutingTargets: Gets the available routing targets.
func (r *ProductsService) GetRoutingTargets(name string) *ProductsGetRoutingTargetsCall {
	c := &ProductsGetRoutingTargetsCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *ProductsGetRoutingTargetsCall) Fields(s ...googleapi.Field) *ProductsGetRoutingTargetsCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *ProductsGetRoutingTargetsCall) IfNoneMatch(entityTag string) *ProductsGetRoutingTargetsCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *ProductsGetRoutingTargetsCall) Context(ctx context.Context) *ProductsGetRoutingTargetsCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *ProductsGetRoutingTargetsCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *ProductsGetRoutingTargetsCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:getRoutingTargets")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.products.getRoutingTargets" call.
// Exactly one of *GetRoutingTargetsResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *GetRoutingTargetsResponse.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *ProductsGetRoutingTargetsCall) Do(opts ...googleapi.CallOption) (*GetRoutingTargetsResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &GetRoutingTargetsResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Gets the available routing targets.",
	//   "httpMethod": "GET",
	//   "id": "supportcases.products.getRoutingTargets",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:getRoutingTargets",
	//   "response": {
	//     "$ref": "GetRoutingTargetsResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.products.getSettings":

type ProductsGetSettingsCall struct {
	s            *Service
	name         string
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// GetSettings: Gets the settings for a specified product.
func (r *ProductsService) GetSettings(name string) *ProductsGetSettingsCall {
	c := &ProductsGetSettingsCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *ProductsGetSettingsCall) Fields(s ...googleapi.Field) *ProductsGetSettingsCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *ProductsGetSettingsCall) IfNoneMatch(entityTag string) *ProductsGetSettingsCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *ProductsGetSettingsCall) Context(ctx context.Context) *ProductsGetSettingsCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *ProductsGetSettingsCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *ProductsGetSettingsCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.products.getSettings" call.
// Exactly one of *Settings or error will be non-nil. Any non-2xx status
// code is an error. Response headers are in either
// *Settings.ServerResponse.Header or (if a response was returned at
// all) in error.(*googleapi.Error).Header. Use googleapi.IsNotModified
// to check whether the returned error was because
// http.StatusNotModified was returned.
func (c *ProductsGetSettingsCall) Do(opts ...googleapi.CallOption) (*Settings, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &Settings{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Gets the settings for a specified product.",
	//   "httpMethod": "GET",
	//   "id": "supportcases.products.getSettings",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}",
	//   "response": {
	//     "$ref": "Settings"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.products.list":

type ProductsListCall struct {
	s            *Service
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// List: Lists products.
func (r *ProductsService) List() *ProductsListCall {
	c := &ProductsListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *ProductsListCall) Fields(s ...googleapi.Field) *ProductsListCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *ProductsListCall) IfNoneMatch(entityTag string) *ProductsListCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *ProductsListCall) Context(ctx context.Context) *ProductsListCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *ProductsListCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *ProductsListCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "products")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.products.list" call.
// Exactly one of *ListProductsResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *ListProductsResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *ProductsListCall) Do(opts ...googleapi.CallOption) (*ListProductsResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ListProductsResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Lists products.",
	//   "httpMethod": "GET",
	//   "id": "supportcases.products.list",
	//   "path": "products",
	//   "response": {
	//     "$ref": "ListProductsResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.products.listSettings":

type ProductsListSettingsCall struct {
	s            *Service
	name         string
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// ListSettings: Lists product settings for an agent.
func (r *ProductsService) ListSettings(name string) *ProductsListSettingsCall {
	c := &ProductsListSettingsCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *ProductsListSettingsCall) Fields(s ...googleapi.Field) *ProductsListSettingsCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *ProductsListSettingsCall) IfNoneMatch(entityTag string) *ProductsListSettingsCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *ProductsListSettingsCall) Context(ctx context.Context) *ProductsListSettingsCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *ProductsListSettingsCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *ProductsListSettingsCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:listSettings")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.products.listSettings" call.
// Exactly one of *ListSettingsResponse1 or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *ListSettingsResponse1.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *ProductsListSettingsCall) Do(opts ...googleapi.CallOption) (*ListSettingsResponse1, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ListSettingsResponse1{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Lists product settings for an agent.",
	//   "httpMethod": "GET",
	//   "id": "supportcases.products.listSettings",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:listSettings",
	//   "response": {
	//     "$ref": "ListSettingsResponse1"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.resolutions.list":

type ResolutionsListCall struct {
	s            *Service
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// List: Query for resolutions.
func (r *ResolutionsService) List() *ResolutionsListCall {
	c := &ResolutionsListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	return c
}

// AutocompleteResults sets the optional parameter
// "autocompleteResults":
func (c *ResolutionsListCall) AutocompleteResults(autocompleteResults bool) *ResolutionsListCall {
	c.urlParams_.Set("autocompleteResults", fmt.Sprint(autocompleteResults))
	return c
}

// CaseId sets the optional parameter "caseId":
func (c *ResolutionsListCall) CaseId(caseId string) *ResolutionsListCall {
	c.urlParams_.Set("caseId", caseId)
	return c
}

// PageSize sets the optional parameter "pageSize":
func (c *ResolutionsListCall) PageSize(pageSize int64) *ResolutionsListCall {
	c.urlParams_.Set("pageSize", fmt.Sprint(pageSize))
	return c
}

// PageToken sets the optional parameter "pageToken":
func (c *ResolutionsListCall) PageToken(pageToken string) *ResolutionsListCall {
	c.urlParams_.Set("pageToken", pageToken)
	return c
}

// Q sets the optional parameter "q":
func (c *ResolutionsListCall) Q(q string) *ResolutionsListCall {
	c.urlParams_.Set("q", q)
	return c
}

// ResultsToken sets the optional parameter "resultsToken":
func (c *ResolutionsListCall) ResultsToken(resultsToken string) *ResolutionsListCall {
	c.urlParams_.Set("resultsToken", resultsToken)
	return c
}

// SearchSessionId sets the optional parameter "searchSessionId":
func (c *ResolutionsListCall) SearchSessionId(searchSessionId string) *ResolutionsListCall {
	c.urlParams_.Set("searchSessionId", searchSessionId)
	return c
}

// Type sets the optional parameter "type":
//
// Possible values:
//   "CANNED_RESPONSE"
//   "HELP_CENTER"
//   "TROUBLE_SHOOTER"
//   "UNKNOWN_RESOLUTION_TYPE"
//   "WORKFLOW"
func (c *ResolutionsListCall) Type(type_ ...string) *ResolutionsListCall {
	c.urlParams_.SetMulti("type", append([]string{}, type_...))
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *ResolutionsListCall) Fields(s ...googleapi.Field) *ResolutionsListCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *ResolutionsListCall) IfNoneMatch(entityTag string) *ResolutionsListCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *ResolutionsListCall) Context(ctx context.Context) *ResolutionsListCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *ResolutionsListCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *ResolutionsListCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "resolutions")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.resolutions.list" call.
// Exactly one of *ListResolutionsResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *ListResolutionsResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *ResolutionsListCall) Do(opts ...googleapi.CallOption) (*ListResolutionsResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ListResolutionsResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Query for resolutions.",
	//   "httpMethod": "GET",
	//   "id": "supportcases.resolutions.list",
	//   "parameters": {
	//     "autocompleteResults": {
	//       "location": "query",
	//       "type": "boolean"
	//     },
	//     "caseId": {
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "pageSize": {
	//       "format": "int32",
	//       "location": "query",
	//       "type": "integer"
	//     },
	//     "pageToken": {
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "q": {
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "resultsToken": {
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "searchSessionId": {
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "type": {
	//       "enum": [
	//         "CANNED_RESPONSE",
	//         "HELP_CENTER",
	//         "TROUBLE_SHOOTER",
	//         "UNKNOWN_RESOLUTION_TYPE",
	//         "WORKFLOW"
	//       ],
	//       "enumDescriptions": [
	//         "",
	//         "",
	//         "",
	//         "",
	//         ""
	//       ],
	//       "location": "query",
	//       "repeated": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "resolutions",
	//   "response": {
	//     "$ref": "ListResolutionsResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly",
	//     "https://www.googleapis.com/auth/supportcontent"
	//   ]
	// }

}

// Pages invokes f for each page of results.
// A non-nil error returned from f will halt the iteration.
// The provided context supersedes any context provided to the Context method.
func (c *ResolutionsListCall) Pages(ctx context.Context, f func(*ListResolutionsResponse) error) error {
	c.ctx_ = ctx
	defer c.PageToken(c.urlParams_.Get("pageToken")) // reset paging to original point
	for {
		x, err := c.Do()
		if err != nil {
			return err
		}
		if err := f(x); err != nil {
			return err
		}
		if x.NextPageToken == "" {
			return nil
		}
		c.PageToken(x.NextPageToken)
	}
}

// method id "supportcases.resolutions.log":

type ResolutionsLogCall struct {
	s                    *Service
	logresolutionrequest *LogResolutionRequest
	urlParams_           gensupport.URLParams
	ctx_                 context.Context
	header_              http.Header
}

// Log: Log a resolution.
func (r *ResolutionsService) Log(logresolutionrequest *LogResolutionRequest) *ResolutionsLogCall {
	c := &ResolutionsLogCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.logresolutionrequest = logresolutionrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *ResolutionsLogCall) Fields(s ...googleapi.Field) *ResolutionsLogCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *ResolutionsLogCall) Context(ctx context.Context) *ResolutionsLogCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *ResolutionsLogCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *ResolutionsLogCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.logresolutionrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "resolutions:log")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.resolutions.log" call.
// Exactly one of *Empty or error will be non-nil. Any non-2xx status
// code is an error. Response headers are in either
// *Empty.ServerResponse.Header or (if a response was returned at all)
// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to
// check whether the returned error was because http.StatusNotModified
// was returned.
func (c *ResolutionsLogCall) Do(opts ...googleapi.CallOption) (*Empty, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &Empty{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Log a resolution.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.resolutions.log",
	//   "path": "resolutions:log",
	//   "request": {
	//     "$ref": "LogResolutionRequest"
	//   },
	//   "response": {
	//     "$ref": "Empty"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.resolutions.suggest":

type ResolutionsSuggestCall struct {
	s                         *Service
	suggestresolutionsrequest *SuggestResolutionsRequest
	urlParams_                gensupport.URLParams
	ctx_                      context.Context
	header_                   http.Header
}

// Suggest: Suggest some resolutions to a case based on provided
// signals.
func (r *ResolutionsService) Suggest(suggestresolutionsrequest *SuggestResolutionsRequest) *ResolutionsSuggestCall {
	c := &ResolutionsSuggestCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.suggestresolutionsrequest = suggestresolutionsrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *ResolutionsSuggestCall) Fields(s ...googleapi.Field) *ResolutionsSuggestCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *ResolutionsSuggestCall) Context(ctx context.Context) *ResolutionsSuggestCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *ResolutionsSuggestCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *ResolutionsSuggestCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.suggestresolutionsrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "resolutions:suggest")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.resolutions.suggest" call.
// Exactly one of *SuggestResolutionsResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *SuggestResolutionsResponse.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *ResolutionsSuggestCall) Do(opts ...googleapi.CallOption) (*SuggestResolutionsResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &SuggestResolutionsResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Suggest some resolutions to a case based on provided signals.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.resolutions.suggest",
	//   "path": "resolutions:suggest",
	//   "request": {
	//     "$ref": "SuggestResolutionsRequest"
	//   },
	//   "response": {
	//     "$ref": "SuggestResolutionsResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly",
	//     "https://www.googleapis.com/auth/supportcontent"
	//   ]
	// }

}

// method id "supportcases.resolutions.cohorts.assign":

type ResolutionsCohortsAssignCall struct {
	s                    *Service
	assigncohortsrequest *AssignCohortsRequest
	urlParams_           gensupport.URLParams
	ctx_                 context.Context
	header_              http.Header
}

// Assign: Query and assign cohorts for this case.
func (r *ResolutionsCohortsService) Assign(assigncohortsrequest *AssignCohortsRequest) *ResolutionsCohortsAssignCall {
	c := &ResolutionsCohortsAssignCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.assigncohortsrequest = assigncohortsrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *ResolutionsCohortsAssignCall) Fields(s ...googleapi.Field) *ResolutionsCohortsAssignCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *ResolutionsCohortsAssignCall) Context(ctx context.Context) *ResolutionsCohortsAssignCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *ResolutionsCohortsAssignCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *ResolutionsCohortsAssignCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.assigncohortsrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "resolutions/cohorts:assign")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.resolutions.cohorts.assign" call.
// Exactly one of *AssignCohortsResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *AssignCohortsResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *ResolutionsCohortsAssignCall) Do(opts ...googleapi.CallOption) (*AssignCohortsResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &AssignCohortsResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Query and assign cohorts for this case.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.resolutions.cohorts.assign",
	//   "path": "resolutions/cohorts:assign",
	//   "request": {
	//     "$ref": "AssignCohortsRequest"
	//   },
	//   "response": {
	//     "$ref": "AssignCohortsResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases",
	//     "https://www.googleapis.com/auth/supportcontent"
	//   ]
	// }

}

// method id "supportcases.rma.save":

type RmaSaveCall struct {
	s              *Service
	savermarequest *SaveRmaRequest
	urlParams_     gensupport.URLParams
	ctx_           context.Context
	header_        http.Header
}

// Save: Saves (Insert/Update) an RMA.
func (r *RmaService) Save(savermarequest *SaveRmaRequest) *RmaSaveCall {
	c := &RmaSaveCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.savermarequest = savermarequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *RmaSaveCall) Fields(s ...googleapi.Field) *RmaSaveCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *RmaSaveCall) Context(ctx context.Context) *RmaSaveCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *RmaSaveCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *RmaSaveCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.savermarequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "rma:save")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.rma.save" call.
// Exactly one of *SaveRmaResponse or error will be non-nil. Any non-2xx
// status code is an error. Response headers are in either
// *SaveRmaResponse.ServerResponse.Header or (if a response was returned
// at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *RmaSaveCall) Do(opts ...googleapi.CallOption) (*SaveRmaResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &SaveRmaResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Saves (Insert/Update) an RMA.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.rma.save",
	//   "path": "rma:save",
	//   "request": {
	//     "$ref": "SaveRmaRequest"
	//   },
	//   "response": {
	//     "$ref": "SaveRmaResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.rma.submit":

type RmaSubmitCall struct {
	s                *Service
	submitrmarequest *SubmitRmaRequest
	urlParams_       gensupport.URLParams
	ctx_             context.Context
	header_          http.Header
}

// Submit: DEPRECATED: Use SendRma instead. Submit an RMA.
func (r *RmaService) Submit(submitrmarequest *SubmitRmaRequest) *RmaSubmitCall {
	c := &RmaSubmitCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.submitrmarequest = submitrmarequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *RmaSubmitCall) Fields(s ...googleapi.Field) *RmaSubmitCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *RmaSubmitCall) Context(ctx context.Context) *RmaSubmitCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *RmaSubmitCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *RmaSubmitCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.submitrmarequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "rma:submit")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.rma.submit" call.
// Exactly one of *SubmitRmaResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *SubmitRmaResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *RmaSubmitCall) Do(opts ...googleapi.CallOption) (*SubmitRmaResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &SubmitRmaResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "DEPRECATED: Use SendRma instead. Submit an RMA.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.rma.submit",
	//   "path": "rma:submit",
	//   "request": {
	//     "$ref": "SubmitRmaRequest"
	//   },
	//   "response": {
	//     "$ref": "SubmitRmaResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.rmas.cancel":

type RmasCancelCall struct {
	s                *Service
	name             string
	cancelrmarequest *CancelRmaRequest
	urlParams_       gensupport.URLParams
	ctx_             context.Context
	header_          http.Header
}

// Cancel: Cancel an RMA.
func (r *RmasService) Cancel(name string, cancelrmarequest *CancelRmaRequest) *RmasCancelCall {
	c := &RmasCancelCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.cancelrmarequest = cancelrmarequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *RmasCancelCall) Fields(s ...googleapi.Field) *RmasCancelCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *RmasCancelCall) Context(ctx context.Context) *RmasCancelCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *RmasCancelCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *RmasCancelCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.cancelrmarequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:cancel")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.rmas.cancel" call.
// Exactly one of *CancelRmaResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *CancelRmaResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *RmasCancelCall) Do(opts ...googleapi.CallOption) (*CancelRmaResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &CancelRmaResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Cancel an RMA.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.rmas.cancel",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:cancel",
	//   "request": {
	//     "$ref": "CancelRmaRequest"
	//   },
	//   "response": {
	//     "$ref": "CancelRmaResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.rmas.cancelAuthHold":

type RmasCancelAuthHoldCall struct {
	s                     *Service
	name                  string
	cancelauthholdrequest *CancelAuthHoldRequest
	urlParams_            gensupport.URLParams
	ctx_                  context.Context
	header_               http.Header
}

// CancelAuthHold: Cancels an auth hold for an advanced exchange RMA.
func (r *RmasService) CancelAuthHold(name string, cancelauthholdrequest *CancelAuthHoldRequest) *RmasCancelAuthHoldCall {
	c := &RmasCancelAuthHoldCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.cancelauthholdrequest = cancelauthholdrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *RmasCancelAuthHoldCall) Fields(s ...googleapi.Field) *RmasCancelAuthHoldCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *RmasCancelAuthHoldCall) Context(ctx context.Context) *RmasCancelAuthHoldCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *RmasCancelAuthHoldCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *RmasCancelAuthHoldCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.cancelauthholdrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:cancelAuthHold")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.rmas.cancelAuthHold" call.
// Exactly one of *Empty or error will be non-nil. Any non-2xx status
// code is an error. Response headers are in either
// *Empty.ServerResponse.Header or (if a response was returned at all)
// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to
// check whether the returned error was because http.StatusNotModified
// was returned.
func (c *RmasCancelAuthHoldCall) Do(opts ...googleapi.CallOption) (*Empty, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &Empty{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Cancels an auth hold for an advanced exchange RMA.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.rmas.cancelAuthHold",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:cancelAuthHold",
	//   "request": {
	//     "$ref": "CancelAuthHoldRequest"
	//   },
	//   "response": {
	//     "$ref": "Empty"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.rmas.createExchangeWithoutReturn":

type RmasCreateExchangeWithoutReturnCall struct {
	s                                  *Service
	createexchangewithoutreturnrequest *CreateExchangeWithoutReturnRequest
	urlParams_                         gensupport.URLParams
	ctx_                               context.Context
	header_                            http.Header
}

// CreateExchangeWithoutReturn: Sends merchandise without expecting a
// return.
func (r *RmasService) CreateExchangeWithoutReturn(createexchangewithoutreturnrequest *CreateExchangeWithoutReturnRequest) *RmasCreateExchangeWithoutReturnCall {
	c := &RmasCreateExchangeWithoutReturnCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.createexchangewithoutreturnrequest = createexchangewithoutreturnrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *RmasCreateExchangeWithoutReturnCall) Fields(s ...googleapi.Field) *RmasCreateExchangeWithoutReturnCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *RmasCreateExchangeWithoutReturnCall) Context(ctx context.Context) *RmasCreateExchangeWithoutReturnCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *RmasCreateExchangeWithoutReturnCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *RmasCreateExchangeWithoutReturnCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.createexchangewithoutreturnrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "rmas:createExchangeWithoutReturn")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.rmas.createExchangeWithoutReturn" call.
// Exactly one of *CreateExchangeWithoutReturnResponse or error will be
// non-nil. Any non-2xx status code is an error. Response headers are in
// either *CreateExchangeWithoutReturnResponse.ServerResponse.Header or
// (if a response was returned at all) in
// error.(*googleapi.Error).Header. Use googleapi.IsNotModified to check
// whether the returned error was because http.StatusNotModified was
// returned.
func (c *RmasCreateExchangeWithoutReturnCall) Do(opts ...googleapi.CallOption) (*CreateExchangeWithoutReturnResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &CreateExchangeWithoutReturnResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Sends merchandise without expecting a return.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.rmas.createExchangeWithoutReturn",
	//   "path": "rmas:createExchangeWithoutReturn",
	//   "request": {
	//     "$ref": "CreateExchangeWithoutReturnRequest"
	//   },
	//   "response": {
	//     "$ref": "CreateExchangeWithoutReturnResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.rmas.get":

type RmasGetCall struct {
	s            *Service
	name         string
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// Get: Gets the specified RMA.
func (r *RmasService) Get(name string) *RmasGetCall {
	c := &RmasGetCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	return c
}

// CaseId sets the optional parameter "caseId":
func (c *RmasGetCall) CaseId(caseId string) *RmasGetCall {
	c.urlParams_.Set("caseId", caseId)
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *RmasGetCall) Fields(s ...googleapi.Field) *RmasGetCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *RmasGetCall) IfNoneMatch(entityTag string) *RmasGetCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *RmasGetCall) Context(ctx context.Context) *RmasGetCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *RmasGetCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *RmasGetCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.rmas.get" call.
// Exactly one of *Rma or error will be non-nil. Any non-2xx status code
// is an error. Response headers are in either
// *Rma.ServerResponse.Header or (if a response was returned at all) in
// error.(*googleapi.Error).Header. Use googleapi.IsNotModified to check
// whether the returned error was because http.StatusNotModified was
// returned.
func (c *RmasGetCall) Do(opts ...googleapi.CallOption) (*Rma, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &Rma{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Gets the specified RMA.",
	//   "httpMethod": "GET",
	//   "id": "supportcases.rmas.get",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "caseId": {
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}",
	//   "response": {
	//     "$ref": "Rma"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.rmas.getLostStolenEligibility":

type RmasGetLostStolenEligibilityCall struct {
	s                               *Service
	name                            string
	getloststoleneligibilityrequest *GetLostStolenEligibilityRequest
	urlParams_                      gensupport.URLParams
	ctx_                            context.Context
	header_                         http.Header
}

// GetLostStolenEligibility: Determines the eligibility of a lost/stolen
// RMA.
func (r *RmasService) GetLostStolenEligibility(name string, getloststoleneligibilityrequest *GetLostStolenEligibilityRequest) *RmasGetLostStolenEligibilityCall {
	c := &RmasGetLostStolenEligibilityCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.getloststoleneligibilityrequest = getloststoleneligibilityrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *RmasGetLostStolenEligibilityCall) Fields(s ...googleapi.Field) *RmasGetLostStolenEligibilityCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *RmasGetLostStolenEligibilityCall) Context(ctx context.Context) *RmasGetLostStolenEligibilityCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *RmasGetLostStolenEligibilityCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *RmasGetLostStolenEligibilityCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.getloststoleneligibilityrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:getLostStolenEligibility")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.rmas.getLostStolenEligibility" call.
// Exactly one of *LostStolenEligibility or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *LostStolenEligibility.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *RmasGetLostStolenEligibilityCall) Do(opts ...googleapi.CallOption) (*LostStolenEligibility, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &LostStolenEligibility{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Determines the eligibility of a lost/stolen RMA.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.rmas.getLostStolenEligibility",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:getLostStolenEligibility",
	//   "request": {
	//     "$ref": "GetLostStolenEligibilityRequest"
	//   },
	//   "response": {
	//     "$ref": "LostStolenEligibility"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.rmas.getMailingAddress":

type RmasGetMailingAddressCall struct {
	s                        *Service
	name                     string
	getmailingaddressrequest *GetMailingAddressRequest
	urlParams_               gensupport.URLParams
	ctx_                     context.Context
	header_                  http.Header
}

// GetMailingAddress: Get mailing address for an RMA
func (r *RmasService) GetMailingAddress(name string, getmailingaddressrequest *GetMailingAddressRequest) *RmasGetMailingAddressCall {
	c := &RmasGetMailingAddressCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.getmailingaddressrequest = getmailingaddressrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *RmasGetMailingAddressCall) Fields(s ...googleapi.Field) *RmasGetMailingAddressCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *RmasGetMailingAddressCall) Context(ctx context.Context) *RmasGetMailingAddressCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *RmasGetMailingAddressCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *RmasGetMailingAddressCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.getmailingaddressrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:getMailingAddress")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.rmas.getMailingAddress" call.
// Exactly one of *MailingAddress or error will be non-nil. Any non-2xx
// status code is an error. Response headers are in either
// *MailingAddress.ServerResponse.Header or (if a response was returned
// at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *RmasGetMailingAddressCall) Do(opts ...googleapi.CallOption) (*MailingAddress, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &MailingAddress{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Get mailing address for an RMA",
	//   "httpMethod": "POST",
	//   "id": "supportcases.rmas.getMailingAddress",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:getMailingAddress",
	//   "request": {
	//     "$ref": "GetMailingAddressRequest"
	//   },
	//   "response": {
	//     "$ref": "MailingAddress"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.rmas.getOrderDetail":

type RmasGetOrderDetailCall struct {
	s                        *Service
	name                     string
	getrmaorderdetailrequest *GetRmaOrderDetailRequest
	urlParams_               gensupport.URLParams
	ctx_                     context.Context
	header_                  http.Header
}

// GetOrderDetail: Gets an RMA's order detail.
func (r *RmasService) GetOrderDetail(name string, getrmaorderdetailrequest *GetRmaOrderDetailRequest) *RmasGetOrderDetailCall {
	c := &RmasGetOrderDetailCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.getrmaorderdetailrequest = getrmaorderdetailrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *RmasGetOrderDetailCall) Fields(s ...googleapi.Field) *RmasGetOrderDetailCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *RmasGetOrderDetailCall) Context(ctx context.Context) *RmasGetOrderDetailCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *RmasGetOrderDetailCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *RmasGetOrderDetailCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.getrmaorderdetailrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:getOrderDetail")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.rmas.getOrderDetail" call.
// Exactly one of *RmaOrderDetail or error will be non-nil. Any non-2xx
// status code is an error. Response headers are in either
// *RmaOrderDetail.ServerResponse.Header or (if a response was returned
// at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *RmasGetOrderDetailCall) Do(opts ...googleapi.CallOption) (*RmaOrderDetail, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &RmaOrderDetail{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Gets an RMA's order detail.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.rmas.getOrderDetail",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:getOrderDetail",
	//   "request": {
	//     "$ref": "GetRmaOrderDetailRequest"
	//   },
	//   "response": {
	//     "$ref": "RmaOrderDetail"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.rmas.getReplacementDetail":

type RmasGetReplacementDetailCall struct {
	s                           *Service
	name                        string
	getreplacementdetailrequest *GetReplacementDetailRequest
	urlParams_                  gensupport.URLParams
	ctx_                        context.Context
	header_                     http.Header
}

// GetReplacementDetail: Get details for a replacement device that is
// not associated with an order.
func (r *RmasService) GetReplacementDetail(name string, getreplacementdetailrequest *GetReplacementDetailRequest) *RmasGetReplacementDetailCall {
	c := &RmasGetReplacementDetailCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.getreplacementdetailrequest = getreplacementdetailrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *RmasGetReplacementDetailCall) Fields(s ...googleapi.Field) *RmasGetReplacementDetailCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *RmasGetReplacementDetailCall) Context(ctx context.Context) *RmasGetReplacementDetailCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *RmasGetReplacementDetailCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *RmasGetReplacementDetailCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.getreplacementdetailrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:getReplacementDetail")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.rmas.getReplacementDetail" call.
// Exactly one of *ReplacementDetail or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *ReplacementDetail.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *RmasGetReplacementDetailCall) Do(opts ...googleapi.CallOption) (*ReplacementDetail, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ReplacementDetail{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Get details for a replacement device that is not associated with an order.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.rmas.getReplacementDetail",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:getReplacementDetail",
	//   "request": {
	//     "$ref": "GetReplacementDetailRequest"
	//   },
	//   "response": {
	//     "$ref": "ReplacementDetail"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.rmas.list":

type RmasListCall struct {
	s            *Service
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// List: Lists RMAs by Case ID and RMA state
func (r *RmasService) List() *RmasListCall {
	c := &RmasListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	return c
}

// CaseId sets the optional parameter "caseId":
func (c *RmasListCall) CaseId(caseId string) *RmasListCall {
	c.urlParams_.Set("caseId", caseId)
	return c
}

// State sets the optional parameter "state":
//
// Possible values:
//   "RMA_CANCELLED"
//   "RMA_COMPLETED"
//   "RMA_INCOMPLETE"
//   "RMA_PENDING"
//   "RMA_SUBMITTED"
//   "UNKNOWN_RMA_STATE"
func (c *RmasListCall) State(state string) *RmasListCall {
	c.urlParams_.Set("state", state)
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *RmasListCall) Fields(s ...googleapi.Field) *RmasListCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *RmasListCall) IfNoneMatch(entityTag string) *RmasListCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *RmasListCall) Context(ctx context.Context) *RmasListCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *RmasListCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *RmasListCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "rmas")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.rmas.list" call.
// Exactly one of *ListRmasResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *ListRmasResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *RmasListCall) Do(opts ...googleapi.CallOption) (*ListRmasResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ListRmasResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Lists RMAs by Case ID and RMA state",
	//   "httpMethod": "GET",
	//   "id": "supportcases.rmas.list",
	//   "parameters": {
	//     "caseId": {
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "state": {
	//       "enum": [
	//         "RMA_CANCELLED",
	//         "RMA_COMPLETED",
	//         "RMA_INCOMPLETE",
	//         "RMA_PENDING",
	//         "RMA_SUBMITTED",
	//         "UNKNOWN_RMA_STATE"
	//       ],
	//       "enumDescriptions": [
	//         "",
	//         "",
	//         "",
	//         "",
	//         "",
	//         ""
	//       ],
	//       "location": "query",
	//       "type": "string"
	//     }
	//   },
	//   "path": "rmas",
	//   "response": {
	//     "$ref": "ListRmasResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.rmas.listBuyersRemorseCountryCodes":

type RmasListBuyersRemorseCountryCodesCall struct {
	s            *Service
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// ListBuyersRemorseCountryCodes: Lists two-character country codes
// valid for Buyer's Remorse RMAs.
func (r *RmasService) ListBuyersRemorseCountryCodes() *RmasListBuyersRemorseCountryCodesCall {
	c := &RmasListBuyersRemorseCountryCodesCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *RmasListBuyersRemorseCountryCodesCall) Fields(s ...googleapi.Field) *RmasListBuyersRemorseCountryCodesCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *RmasListBuyersRemorseCountryCodesCall) IfNoneMatch(entityTag string) *RmasListBuyersRemorseCountryCodesCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *RmasListBuyersRemorseCountryCodesCall) Context(ctx context.Context) *RmasListBuyersRemorseCountryCodesCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *RmasListBuyersRemorseCountryCodesCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *RmasListBuyersRemorseCountryCodesCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "rmas:listBuyersRemorseCountryCodes")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.rmas.listBuyersRemorseCountryCodes" call.
// Exactly one of *ListBuyersRemorseCountryCodesResponse or error will
// be non-nil. Any non-2xx status code is an error. Response headers are
// in either
// *ListBuyersRemorseCountryCodesResponse.ServerResponse.Header or (if a
// response was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *RmasListBuyersRemorseCountryCodesCall) Do(opts ...googleapi.CallOption) (*ListBuyersRemorseCountryCodesResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ListBuyersRemorseCountryCodesResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Lists two-character country codes valid for Buyer's Remorse RMAs.",
	//   "httpMethod": "GET",
	//   "id": "supportcases.rmas.listBuyersRemorseCountryCodes",
	//   "path": "rmas:listBuyersRemorseCountryCodes",
	//   "response": {
	//     "$ref": "ListBuyersRemorseCountryCodesResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.rmas.markOriginalDeviceReceived":

type RmasMarkOriginalDeviceReceivedCall struct {
	s                                 *Service
	name                              string
	markoriginaldevicereceivedrequest *MarkOriginalDeviceReceivedRequest
	urlParams_                        gensupport.URLParams
	ctx_                              context.Context
	header_                           http.Header
}

// MarkOriginalDeviceReceived: Marks an original device as received in a
// Standard Exchange.
func (r *RmasService) MarkOriginalDeviceReceived(name string, markoriginaldevicereceivedrequest *MarkOriginalDeviceReceivedRequest) *RmasMarkOriginalDeviceReceivedCall {
	c := &RmasMarkOriginalDeviceReceivedCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.markoriginaldevicereceivedrequest = markoriginaldevicereceivedrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *RmasMarkOriginalDeviceReceivedCall) Fields(s ...googleapi.Field) *RmasMarkOriginalDeviceReceivedCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *RmasMarkOriginalDeviceReceivedCall) Context(ctx context.Context) *RmasMarkOriginalDeviceReceivedCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *RmasMarkOriginalDeviceReceivedCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *RmasMarkOriginalDeviceReceivedCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.markoriginaldevicereceivedrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:markOriginalDeviceReceived")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.rmas.markOriginalDeviceReceived" call.
// Exactly one of *Empty or error will be non-nil. Any non-2xx status
// code is an error. Response headers are in either
// *Empty.ServerResponse.Header or (if a response was returned at all)
// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to
// check whether the returned error was because http.StatusNotModified
// was returned.
func (c *RmasMarkOriginalDeviceReceivedCall) Do(opts ...googleapi.CallOption) (*Empty, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &Empty{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Marks an original device as received in a Standard Exchange.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.rmas.markOriginalDeviceReceived",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:markOriginalDeviceReceived",
	//   "request": {
	//     "$ref": "MarkOriginalDeviceReceivedRequest"
	//   },
	//   "response": {
	//     "$ref": "Empty"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.rmas.runRmaSteps":

type RmasRunRmaStepsCall struct {
	s                  *Service
	name               string
	runrmastepsrequest *RunRmaStepsRequest
	urlParams_         gensupport.URLParams
	ctx_               context.Context
	header_            http.Header
}

// RunRmaSteps: Run the given RMA workflow steps.
func (r *RmasService) RunRmaSteps(name string, runrmastepsrequest *RunRmaStepsRequest) *RmasRunRmaStepsCall {
	c := &RmasRunRmaStepsCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.runrmastepsrequest = runrmastepsrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *RmasRunRmaStepsCall) Fields(s ...googleapi.Field) *RmasRunRmaStepsCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *RmasRunRmaStepsCall) Context(ctx context.Context) *RmasRunRmaStepsCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *RmasRunRmaStepsCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *RmasRunRmaStepsCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.runrmastepsrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:runRmaSteps")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.rmas.runRmaSteps" call.
// Exactly one of *RunRmaStepsResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *RunRmaStepsResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *RmasRunRmaStepsCall) Do(opts ...googleapi.CallOption) (*RunRmaStepsResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &RunRmaStepsResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Run the given RMA workflow steps.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.rmas.runRmaSteps",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:runRmaSteps",
	//   "request": {
	//     "$ref": "RunRmaStepsRequest"
	//   },
	//   "response": {
	//     "$ref": "RunRmaStepsResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.rmas.runWorkflow":

type RmasRunWorkflowCall struct {
	s                  *Service
	runworkflowrequest *RunWorkflowRequest
	urlParams_         gensupport.URLParams
	ctx_               context.Context
	header_            http.Header
}

// RunWorkflow: DEPRECATED: Use RunRmaSteps instead. Run the given
// workflow for an RMA.
func (r *RmasService) RunWorkflow(runworkflowrequest *RunWorkflowRequest) *RmasRunWorkflowCall {
	c := &RmasRunWorkflowCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.runworkflowrequest = runworkflowrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *RmasRunWorkflowCall) Fields(s ...googleapi.Field) *RmasRunWorkflowCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *RmasRunWorkflowCall) Context(ctx context.Context) *RmasRunWorkflowCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *RmasRunWorkflowCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *RmasRunWorkflowCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.runworkflowrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "rmas:runWorkflow")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.rmas.runWorkflow" call.
// Exactly one of *RunWorkflowResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *RunWorkflowResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *RmasRunWorkflowCall) Do(opts ...googleapi.CallOption) (*RunWorkflowResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &RunWorkflowResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "DEPRECATED: Use RunRmaSteps instead. Run the given workflow for an RMA.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.rmas.runWorkflow",
	//   "path": "rmas:runWorkflow",
	//   "request": {
	//     "$ref": "RunWorkflowRequest"
	//   },
	//   "response": {
	//     "$ref": "RunWorkflowResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.rmas.send":

type RmasSendCall struct {
	s              *Service
	sendrmarequest *SendRmaRequest
	urlParams_     gensupport.URLParams
	ctx_           context.Context
	header_        http.Header
}

// Send: Initiates a new RMA.
func (r *RmasService) Send(sendrmarequest *SendRmaRequest) *RmasSendCall {
	c := &RmasSendCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.sendrmarequest = sendrmarequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *RmasSendCall) Fields(s ...googleapi.Field) *RmasSendCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *RmasSendCall) Context(ctx context.Context) *RmasSendCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *RmasSendCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *RmasSendCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.sendrmarequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "rmas:send")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.rmas.send" call.
// Exactly one of *SendRmaResponse or error will be non-nil. Any non-2xx
// status code is an error. Response headers are in either
// *SendRmaResponse.ServerResponse.Header or (if a response was returned
// at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *RmasSendCall) Do(opts ...googleapi.CallOption) (*SendRmaResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &SendRmaResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Initiates a new RMA.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.rmas.send",
	//   "path": "rmas:send",
	//   "request": {
	//     "$ref": "SendRmaRequest"
	//   },
	//   "response": {
	//     "$ref": "SendRmaResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.teams.getMyAssignStreamSearches":

type TeamsGetMyAssignStreamSearchesCall struct {
	s            *Service
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// GetMyAssignStreamSearches: Gets assign-stream-enabled searches
// associated with the agent.
func (r *TeamsService) GetMyAssignStreamSearches() *TeamsGetMyAssignStreamSearchesCall {
	c := &TeamsGetMyAssignStreamSearchesCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *TeamsGetMyAssignStreamSearchesCall) Fields(s ...googleapi.Field) *TeamsGetMyAssignStreamSearchesCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *TeamsGetMyAssignStreamSearchesCall) IfNoneMatch(entityTag string) *TeamsGetMyAssignStreamSearchesCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *TeamsGetMyAssignStreamSearchesCall) Context(ctx context.Context) *TeamsGetMyAssignStreamSearchesCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *TeamsGetMyAssignStreamSearchesCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *TeamsGetMyAssignStreamSearchesCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "teams:getMyAssignStreamSearches")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.teams.getMyAssignStreamSearches" call.
// Exactly one of *GetMyAssignStreamSearchesResponse or error will be
// non-nil. Any non-2xx status code is an error. Response headers are in
// either *GetMyAssignStreamSearchesResponse.ServerResponse.Header or
// (if a response was returned at all) in
// error.(*googleapi.Error).Header. Use googleapi.IsNotModified to check
// whether the returned error was because http.StatusNotModified was
// returned.
func (c *TeamsGetMyAssignStreamSearchesCall) Do(opts ...googleapi.CallOption) (*GetMyAssignStreamSearchesResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &GetMyAssignStreamSearchesResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Gets assign-stream-enabled searches associated with the agent.",
	//   "httpMethod": "GET",
	//   "id": "supportcases.teams.getMyAssignStreamSearches",
	//   "path": "teams:getMyAssignStreamSearches",
	//   "response": {
	//     "$ref": "GetMyAssignStreamSearchesResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.troubleshooterSessions.create":

type TroubleshooterSessionsCreateCall struct {
	s                                  *Service
	createtroubleshootersessionrequest *CreateTroubleshooterSessionRequest
	urlParams_                         gensupport.URLParams
	ctx_                               context.Context
	header_                            http.Header
}

// Create: Start a new troubleshooter session.
func (r *TroubleshooterSessionsService) Create(createtroubleshootersessionrequest *CreateTroubleshooterSessionRequest) *TroubleshooterSessionsCreateCall {
	c := &TroubleshooterSessionsCreateCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.createtroubleshootersessionrequest = createtroubleshootersessionrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *TroubleshooterSessionsCreateCall) Fields(s ...googleapi.Field) *TroubleshooterSessionsCreateCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *TroubleshooterSessionsCreateCall) Context(ctx context.Context) *TroubleshooterSessionsCreateCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *TroubleshooterSessionsCreateCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *TroubleshooterSessionsCreateCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.createtroubleshootersessionrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "troubleshooterSessions:create")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.troubleshooterSessions.create" call.
// Exactly one of *TroubleshooterSession or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *TroubleshooterSession.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *TroubleshooterSessionsCreateCall) Do(opts ...googleapi.CallOption) (*TroubleshooterSession, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &TroubleshooterSession{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Start a new troubleshooter session.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.troubleshooterSessions.create",
	//   "path": "troubleshooterSessions:create",
	//   "request": {
	//     "$ref": "CreateTroubleshooterSessionRequest"
	//   },
	//   "response": {
	//     "$ref": "TroubleshooterSession"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases",
	//     "https://www.googleapis.com/auth/supportcontent"
	//   ]
	// }

}

// method id "supportcases.troubleshooterSessions.listDevices":

type TroubleshooterSessionsListDevicesCall struct {
	s                  *Service
	listdevicesrequest *ListDevicesRequest
	urlParams_         gensupport.URLParams
	ctx_               context.Context
	header_            http.Header
}

// ListDevices: Lists devices on a customer's account.
func (r *TroubleshooterSessionsService) ListDevices(listdevicesrequest *ListDevicesRequest) *TroubleshooterSessionsListDevicesCall {
	c := &TroubleshooterSessionsListDevicesCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.listdevicesrequest = listdevicesrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *TroubleshooterSessionsListDevicesCall) Fields(s ...googleapi.Field) *TroubleshooterSessionsListDevicesCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *TroubleshooterSessionsListDevicesCall) Context(ctx context.Context) *TroubleshooterSessionsListDevicesCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *TroubleshooterSessionsListDevicesCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *TroubleshooterSessionsListDevicesCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.listdevicesrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "troubleshooterSessions:listDevices")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.troubleshooterSessions.listDevices" call.
// Exactly one of *ListDevicesResponse1 or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *ListDevicesResponse1.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *TroubleshooterSessionsListDevicesCall) Do(opts ...googleapi.CallOption) (*ListDevicesResponse1, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ListDevicesResponse1{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Lists devices on a customer's account.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.troubleshooterSessions.listDevices",
	//   "path": "troubleshooterSessions:listDevices",
	//   "request": {
	//     "$ref": "ListDevicesRequest"
	//   },
	//   "response": {
	//     "$ref": "ListDevicesResponse1"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases",
	//     "https://www.googleapis.com/auth/supportcontent"
	//   ]
	// }

}

// method id "supportcases.troubleshooterSessions.listIssues":

type TroubleshooterSessionsListIssuesCall struct {
	s            *Service
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// ListIssues: Lists issues.
func (r *TroubleshooterSessionsService) ListIssues() *TroubleshooterSessionsListIssuesCall {
	c := &TroubleshooterSessionsListIssuesCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	return c
}

// CaseId sets the optional parameter "caseId":
func (c *TroubleshooterSessionsListIssuesCall) CaseId(caseId string) *TroubleshooterSessionsListIssuesCall {
	c.urlParams_.Set("caseId", caseId)
	return c
}

// IssueId sets the optional parameter "issueId":
func (c *TroubleshooterSessionsListIssuesCall) IssueId(issueId string) *TroubleshooterSessionsListIssuesCall {
	c.urlParams_.Set("issueId", issueId)
	return c
}

// TroubleshooterType sets the optional parameter "troubleshooterType":
//
// Possible values:
//   "NOE"
//   "PLAY_APPS"
//   "PLAY_PURCHASES"
//   "TROUBLESHOOTER_TYPE_NOT_SET"
func (c *TroubleshooterSessionsListIssuesCall) TroubleshooterType(troubleshooterType string) *TroubleshooterSessionsListIssuesCall {
	c.urlParams_.Set("troubleshooterType", troubleshooterType)
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *TroubleshooterSessionsListIssuesCall) Fields(s ...googleapi.Field) *TroubleshooterSessionsListIssuesCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *TroubleshooterSessionsListIssuesCall) IfNoneMatch(entityTag string) *TroubleshooterSessionsListIssuesCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *TroubleshooterSessionsListIssuesCall) Context(ctx context.Context) *TroubleshooterSessionsListIssuesCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *TroubleshooterSessionsListIssuesCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *TroubleshooterSessionsListIssuesCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "troubleshooterSessions:listIssues")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.troubleshooterSessions.listIssues" call.
// Exactly one of *ListIssuesResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *ListIssuesResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *TroubleshooterSessionsListIssuesCall) Do(opts ...googleapi.CallOption) (*ListIssuesResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ListIssuesResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Lists issues.",
	//   "httpMethod": "GET",
	//   "id": "supportcases.troubleshooterSessions.listIssues",
	//   "parameters": {
	//     "caseId": {
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "issueId": {
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "troubleshooterType": {
	//       "enum": [
	//         "NOE",
	//         "PLAY_APPS",
	//         "PLAY_PURCHASES",
	//         "TROUBLESHOOTER_TYPE_NOT_SET"
	//       ],
	//       "enumDescriptions": [
	//         "",
	//         "",
	//         "",
	//         ""
	//       ],
	//       "location": "query",
	//       "type": "string"
	//     }
	//   },
	//   "path": "troubleshooterSessions:listIssues",
	//   "response": {
	//     "$ref": "ListIssuesResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases",
	//     "https://www.googleapis.com/auth/supportcontent"
	//   ]
	// }

}

// method id "supportcases.troubleshooterSessions.listPurchasedApps":

type TroubleshooterSessionsListPurchasedAppsCall struct {
	s                        *Service
	listpurchasedappsrequest *ListPurchasedAppsRequest
	urlParams_               gensupport.URLParams
	ctx_                     context.Context
	header_                  http.Header
}

// ListPurchasedApps: Lists purchased apps on a customer's account.
func (r *TroubleshooterSessionsService) ListPurchasedApps(listpurchasedappsrequest *ListPurchasedAppsRequest) *TroubleshooterSessionsListPurchasedAppsCall {
	c := &TroubleshooterSessionsListPurchasedAppsCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.listpurchasedappsrequest = listpurchasedappsrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *TroubleshooterSessionsListPurchasedAppsCall) Fields(s ...googleapi.Field) *TroubleshooterSessionsListPurchasedAppsCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *TroubleshooterSessionsListPurchasedAppsCall) Context(ctx context.Context) *TroubleshooterSessionsListPurchasedAppsCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *TroubleshooterSessionsListPurchasedAppsCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *TroubleshooterSessionsListPurchasedAppsCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.listpurchasedappsrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "troubleshooterSessions:listPurchasedApps")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.troubleshooterSessions.listPurchasedApps" call.
// Exactly one of *ListPurchasedAppsResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *ListPurchasedAppsResponse.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *TroubleshooterSessionsListPurchasedAppsCall) Do(opts ...googleapi.CallOption) (*ListPurchasedAppsResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ListPurchasedAppsResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Lists purchased apps on a customer's account.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.troubleshooterSessions.listPurchasedApps",
	//   "path": "troubleshooterSessions:listPurchasedApps",
	//   "request": {
	//     "$ref": "ListPurchasedAppsRequest"
	//   },
	//   "response": {
	//     "$ref": "ListPurchasedAppsResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases",
	//     "https://www.googleapis.com/auth/supportcontent"
	//   ]
	// }

}

// method id "supportcases.troubleshooterSessions.listPurchasedBooks":

type TroubleshooterSessionsListPurchasedBooksCall struct {
	s                         *Service
	listpurchasedbooksrequest *ListPurchasedBooksRequest
	urlParams_                gensupport.URLParams
	ctx_                      context.Context
	header_                   http.Header
}

// ListPurchasedBooks: Lists purchased books on a customer's account.
func (r *TroubleshooterSessionsService) ListPurchasedBooks(listpurchasedbooksrequest *ListPurchasedBooksRequest) *TroubleshooterSessionsListPurchasedBooksCall {
	c := &TroubleshooterSessionsListPurchasedBooksCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.listpurchasedbooksrequest = listpurchasedbooksrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *TroubleshooterSessionsListPurchasedBooksCall) Fields(s ...googleapi.Field) *TroubleshooterSessionsListPurchasedBooksCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *TroubleshooterSessionsListPurchasedBooksCall) Context(ctx context.Context) *TroubleshooterSessionsListPurchasedBooksCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *TroubleshooterSessionsListPurchasedBooksCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *TroubleshooterSessionsListPurchasedBooksCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.listpurchasedbooksrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "troubleshooterSessions:listPurchasedBooks")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.troubleshooterSessions.listPurchasedBooks" call.
// Exactly one of *ListPurchasedBooksResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *ListPurchasedBooksResponse.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *TroubleshooterSessionsListPurchasedBooksCall) Do(opts ...googleapi.CallOption) (*ListPurchasedBooksResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ListPurchasedBooksResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Lists purchased books on a customer's account.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.troubleshooterSessions.listPurchasedBooks",
	//   "path": "troubleshooterSessions:listPurchasedBooks",
	//   "request": {
	//     "$ref": "ListPurchasedBooksRequest"
	//   },
	//   "response": {
	//     "$ref": "ListPurchasedBooksResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases",
	//     "https://www.googleapis.com/auth/supportcontent"
	//   ]
	// }

}

// method id "supportcases.troubleshooterSessions.listPurchasedVideos":

type TroubleshooterSessionsListPurchasedVideosCall struct {
	s                          *Service
	listpurchasedvideosrequest *ListPurchasedVideosRequest
	urlParams_                 gensupport.URLParams
	ctx_                       context.Context
	header_                    http.Header
}

// ListPurchasedVideos: Lists purchased videos on a customer's account.
func (r *TroubleshooterSessionsService) ListPurchasedVideos(listpurchasedvideosrequest *ListPurchasedVideosRequest) *TroubleshooterSessionsListPurchasedVideosCall {
	c := &TroubleshooterSessionsListPurchasedVideosCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.listpurchasedvideosrequest = listpurchasedvideosrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *TroubleshooterSessionsListPurchasedVideosCall) Fields(s ...googleapi.Field) *TroubleshooterSessionsListPurchasedVideosCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *TroubleshooterSessionsListPurchasedVideosCall) Context(ctx context.Context) *TroubleshooterSessionsListPurchasedVideosCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *TroubleshooterSessionsListPurchasedVideosCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *TroubleshooterSessionsListPurchasedVideosCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.listpurchasedvideosrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "troubleshooterSessions:listPurchasedVideos")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.troubleshooterSessions.listPurchasedVideos" call.
// Exactly one of *ListPurchasedVideosResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *ListPurchasedVideosResponse.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *TroubleshooterSessionsListPurchasedVideosCall) Do(opts ...googleapi.CallOption) (*ListPurchasedVideosResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ListPurchasedVideosResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Lists purchased videos on a customer's account.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.troubleshooterSessions.listPurchasedVideos",
	//   "path": "troubleshooterSessions:listPurchasedVideos",
	//   "request": {
	//     "$ref": "ListPurchasedVideosRequest"
	//   },
	//   "response": {
	//     "$ref": "ListPurchasedVideosResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases",
	//     "https://www.googleapis.com/auth/supportcontent"
	//   ]
	// }

}

// method id "supportcases.troubleshooterSessions.log":

type TroubleshooterSessionsLogCall struct {
	s                                *Service
	name                             string
	logtroubleshooteractivityrequest *LogTroubleshooterActivityRequest
	urlParams_                       gensupport.URLParams
	ctx_                             context.Context
	header_                          http.Header
}

// Log: Log troubleshooter activity.
func (r *TroubleshooterSessionsService) Log(name string, logtroubleshooteractivityrequest *LogTroubleshooterActivityRequest) *TroubleshooterSessionsLogCall {
	c := &TroubleshooterSessionsLogCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.logtroubleshooteractivityrequest = logtroubleshooteractivityrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *TroubleshooterSessionsLogCall) Fields(s ...googleapi.Field) *TroubleshooterSessionsLogCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *TroubleshooterSessionsLogCall) Context(ctx context.Context) *TroubleshooterSessionsLogCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *TroubleshooterSessionsLogCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *TroubleshooterSessionsLogCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.logtroubleshooteractivityrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:log")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.troubleshooterSessions.log" call.
// Exactly one of *Empty or error will be non-nil. Any non-2xx status
// code is an error. Response headers are in either
// *Empty.ServerResponse.Header or (if a response was returned at all)
// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to
// check whether the returned error was because http.StatusNotModified
// was returned.
func (c *TroubleshooterSessionsLogCall) Do(opts ...googleapi.CallOption) (*Empty, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &Empty{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Log troubleshooter activity.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.troubleshooterSessions.log",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:log",
	//   "request": {
	//     "$ref": "LogTroubleshooterActivityRequest"
	//   },
	//   "response": {
	//     "$ref": "Empty"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases",
	//     "https://www.googleapis.com/auth/supportcontent"
	//   ]
	// }

}

// method id "supportcases.troubleshooterSessions.troubleshootIssue":

type TroubleshooterSessionsTroubleshootIssueCall struct {
	s                        *Service
	name                     string
	troubleshootissuerequest *TroubleshootIssueRequest
	urlParams_               gensupport.URLParams
	ctx_                     context.Context
	header_                  http.Header
}

// TroubleshootIssue: Troubleshoot issue.
func (r *TroubleshooterSessionsService) TroubleshootIssue(name string, troubleshootissuerequest *TroubleshootIssueRequest) *TroubleshooterSessionsTroubleshootIssueCall {
	c := &TroubleshooterSessionsTroubleshootIssueCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.troubleshootissuerequest = troubleshootissuerequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *TroubleshooterSessionsTroubleshootIssueCall) Fields(s ...googleapi.Field) *TroubleshooterSessionsTroubleshootIssueCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *TroubleshooterSessionsTroubleshootIssueCall) Context(ctx context.Context) *TroubleshooterSessionsTroubleshootIssueCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *TroubleshooterSessionsTroubleshootIssueCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *TroubleshooterSessionsTroubleshootIssueCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.troubleshootissuerequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "{+name}:troubleshootIssue")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.troubleshooterSessions.troubleshootIssue" call.
// Exactly one of *TroubleshootIssueResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *TroubleshootIssueResponse.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *TroubleshooterSessionsTroubleshootIssueCall) Do(opts ...googleapi.CallOption) (*TroubleshootIssueResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &TroubleshootIssueResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Troubleshoot issue.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.troubleshooterSessions.troubleshootIssue",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "location": "path",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "{+name}:troubleshootIssue",
	//   "request": {
	//     "$ref": "TroubleshootIssueRequest"
	//   },
	//   "response": {
	//     "$ref": "TroubleshootIssueResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases",
	//     "https://www.googleapis.com/auth/supportcontent"
	//   ]
	// }

}

// method id "supportcases.wallets.bankAccountCountries":

type WalletsBankAccountCountriesCall struct {
	s                               *Service
	listbankaccountcountriesrequest *ListBankAccountCountriesRequest
	urlParams_                      gensupport.URLParams
	ctx_                            context.Context
	header_                         http.Header
}

// BankAccountCountries: List supported Bank Account countries.
// Initially will only return supported Bank Account countries for
// Payment Method Hijacks (PMH). This is a POST API because it takes in
// a sso_ticket.
func (r *WalletsService) BankAccountCountries(listbankaccountcountriesrequest *ListBankAccountCountriesRequest) *WalletsBankAccountCountriesCall {
	c := &WalletsBankAccountCountriesCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.listbankaccountcountriesrequest = listbankaccountcountriesrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *WalletsBankAccountCountriesCall) Fields(s ...googleapi.Field) *WalletsBankAccountCountriesCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *WalletsBankAccountCountriesCall) Context(ctx context.Context) *WalletsBankAccountCountriesCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *WalletsBankAccountCountriesCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *WalletsBankAccountCountriesCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.listbankaccountcountriesrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "wallets/bankAccountCountries")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.wallets.bankAccountCountries" call.
// Exactly one of *ListBankAccountCountriesResponse or error will be
// non-nil. Any non-2xx status code is an error. Response headers are in
// either *ListBankAccountCountriesResponse.ServerResponse.Header or (if
// a response was returned at all) in error.(*googleapi.Error).Header.
// Use googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *WalletsBankAccountCountriesCall) Do(opts ...googleapi.CallOption) (*ListBankAccountCountriesResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ListBankAccountCountriesResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "List supported Bank Account countries. Initially will only return supported Bank Account countries for Payment Method Hijacks (PMH). This is a POST API because it takes in a sso_ticket.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.wallets.bankAccountCountries",
	//   "path": "wallets/bankAccountCountries",
	//   "request": {
	//     "$ref": "ListBankAccountCountriesRequest"
	//   },
	//   "response": {
	//     "$ref": "ListBankAccountCountriesResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.wallets.creditCardTypes":

type WalletsCreditCardTypesCall struct {
	s                          *Service
	listcreditcardtypesrequest *ListCreditCardTypesRequest
	urlParams_                 gensupport.URLParams
	ctx_                       context.Context
	header_                    http.Header
}

// CreditCardTypes: List supported Credit Card types. Initially will
// only return supported credit cards for Payment Method Hijacks (PMH).
// This is a POST API because it takes in a sso_ticket.
func (r *WalletsService) CreditCardTypes(listcreditcardtypesrequest *ListCreditCardTypesRequest) *WalletsCreditCardTypesCall {
	c := &WalletsCreditCardTypesCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.listcreditcardtypesrequest = listcreditcardtypesrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *WalletsCreditCardTypesCall) Fields(s ...googleapi.Field) *WalletsCreditCardTypesCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *WalletsCreditCardTypesCall) Context(ctx context.Context) *WalletsCreditCardTypesCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *WalletsCreditCardTypesCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *WalletsCreditCardTypesCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.listcreditcardtypesrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "wallets/creditCardTypes")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.wallets.creditCardTypes" call.
// Exactly one of *ListCreditCardTypesResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *ListCreditCardTypesResponse.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *WalletsCreditCardTypesCall) Do(opts ...googleapi.CallOption) (*ListCreditCardTypesResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ListCreditCardTypesResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "List supported Credit Card types. Initially will only return supported credit cards for Payment Method Hijacks (PMH). This is a POST API because it takes in a sso_ticket.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.wallets.creditCardTypes",
	//   "path": "wallets/creditCardTypes",
	//   "request": {
	//     "$ref": "ListCreditCardTypesRequest"
	//   },
	//   "response": {
	//     "$ref": "ListCreditCardTypesResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.wallets.transactions":

type WalletsTransactionsCall struct {
	s                       *Service
	listtransactionsrequest *ListTransactionsRequest
	urlParams_              gensupport.URLParams
	ctx_                    context.Context
	header_                 http.Header
}

// Transactions: Query for transactions.
func (r *WalletsService) Transactions(listtransactionsrequest *ListTransactionsRequest) *WalletsTransactionsCall {
	c := &WalletsTransactionsCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.listtransactionsrequest = listtransactionsrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *WalletsTransactionsCall) Fields(s ...googleapi.Field) *WalletsTransactionsCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *WalletsTransactionsCall) Context(ctx context.Context) *WalletsTransactionsCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *WalletsTransactionsCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *WalletsTransactionsCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.listtransactionsrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "wallets/transactions")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.wallets.transactions" call.
// Exactly one of *ListTransactionsResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *ListTransactionsResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *WalletsTransactionsCall) Do(opts ...googleapi.CallOption) (*ListTransactionsResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ListTransactionsResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Query for transactions.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.wallets.transactions",
	//   "path": "wallets/transactions",
	//   "request": {
	//     "$ref": "ListTransactionsRequest"
	//   },
	//   "response": {
	//     "$ref": "ListTransactionsResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// Pages invokes f for each page of results.
// A non-nil error returned from f will halt the iteration.
// The provided context supersedes any context provided to the Context method.
func (c *WalletsTransactionsCall) Pages(ctx context.Context, f func(*ListTransactionsResponse) error) error {
	c.ctx_ = ctx
	defer func(pt string) { c.listtransactionsrequest.PageToken = pt }(c.listtransactionsrequest.PageToken) // reset paging to original point
	for {
		x, err := c.Do()
		if err != nil {
			return err
		}
		if err := f(x); err != nil {
			return err
		}
		if x.NextPageToken == "" {
			return nil
		}
		c.listtransactionsrequest.PageToken = x.NextPageToken
	}
}

// method id "supportcases.wallets.troubleshootAccount":

type WalletsTroubleshootAccountCall struct {
	s                          *Service
	troubleshootaccountrequest *TroubleshootAccountRequest
	urlParams_                 gensupport.URLParams
	ctx_                       context.Context
	header_                    http.Header
}

// TroubleshootAccount: Troubleshoots a Wallet account for issues.
func (r *WalletsService) TroubleshootAccount(troubleshootaccountrequest *TroubleshootAccountRequest) *WalletsTroubleshootAccountCall {
	c := &WalletsTroubleshootAccountCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.troubleshootaccountrequest = troubleshootaccountrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *WalletsTroubleshootAccountCall) Fields(s ...googleapi.Field) *WalletsTroubleshootAccountCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *WalletsTroubleshootAccountCall) Context(ctx context.Context) *WalletsTroubleshootAccountCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *WalletsTroubleshootAccountCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *WalletsTroubleshootAccountCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.troubleshootaccountrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "wallets:troubleshootAccount")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.wallets.troubleshootAccount" call.
// Exactly one of *TroubleshootAccountResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *TroubleshootAccountResponse.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *WalletsTroubleshootAccountCall) Do(opts ...googleapi.CallOption) (*TroubleshootAccountResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &TroubleshootAccountResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Troubleshoots a Wallet account for issues.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.wallets.troubleshootAccount",
	//   "path": "wallets:troubleshootAccount",
	//   "request": {
	//     "$ref": "TroubleshootAccountRequest"
	//   },
	//   "response": {
	//     "$ref": "TroubleshootAccountResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.wallets.troubleshootTransaction":

type WalletsTroubleshootTransactionCall struct {
	s                              *Service
	troubleshoottransactionrequest *TroubleshootTransactionRequest
	urlParams_                     gensupport.URLParams
	ctx_                           context.Context
	header_                        http.Header
}

// TroubleshootTransaction: Troubleshoots a Wallet transaction for
// issues.
func (r *WalletsService) TroubleshootTransaction(troubleshoottransactionrequest *TroubleshootTransactionRequest) *WalletsTroubleshootTransactionCall {
	c := &WalletsTroubleshootTransactionCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.troubleshoottransactionrequest = troubleshoottransactionrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *WalletsTroubleshootTransactionCall) Fields(s ...googleapi.Field) *WalletsTroubleshootTransactionCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *WalletsTroubleshootTransactionCall) Context(ctx context.Context) *WalletsTroubleshootTransactionCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *WalletsTroubleshootTransactionCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *WalletsTroubleshootTransactionCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.troubleshoottransactionrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "wallets:troubleshootTransaction")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.wallets.troubleshootTransaction" call.
// Exactly one of *TroubleshootTransactionResponse or error will be
// non-nil. Any non-2xx status code is an error. Response headers are in
// either *TroubleshootTransactionResponse.ServerResponse.Header or (if
// a response was returned at all) in error.(*googleapi.Error).Header.
// Use googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *WalletsTroubleshootTransactionCall) Do(opts ...googleapi.CallOption) (*TroubleshootTransactionResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &TroubleshootTransactionResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Troubleshoots a Wallet transaction for issues.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.wallets.troubleshootTransaction",
	//   "path": "wallets:troubleshootTransaction",
	//   "request": {
	//     "$ref": "TroubleshootTransactionRequest"
	//   },
	//   "response": {
	//     "$ref": "TroubleshootTransactionResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.wallets.accounts.getPaymentsInfo":

type WalletsAccountsGetPaymentsInfoCall struct {
	s                      *Service
	getpaymentsinforequest *GetPaymentsInfoRequest
	urlParams_             gensupport.URLParams
	ctx_                   context.Context
	header_                http.Header
}

// GetPaymentsInfo: Fetches Payments info, such as number of Payments
// accounts for the user.
func (r *WalletsAccountsService) GetPaymentsInfo(getpaymentsinforequest *GetPaymentsInfoRequest) *WalletsAccountsGetPaymentsInfoCall {
	c := &WalletsAccountsGetPaymentsInfoCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.getpaymentsinforequest = getpaymentsinforequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *WalletsAccountsGetPaymentsInfoCall) Fields(s ...googleapi.Field) *WalletsAccountsGetPaymentsInfoCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *WalletsAccountsGetPaymentsInfoCall) Context(ctx context.Context) *WalletsAccountsGetPaymentsInfoCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *WalletsAccountsGetPaymentsInfoCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *WalletsAccountsGetPaymentsInfoCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.getpaymentsinforequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "wallets/accounts:getPaymentsInfo")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.wallets.accounts.getPaymentsInfo" call.
// Exactly one of *GetPaymentsInfoResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *GetPaymentsInfoResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *WalletsAccountsGetPaymentsInfoCall) Do(opts ...googleapi.CallOption) (*GetPaymentsInfoResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &GetPaymentsInfoResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Fetches Payments info, such as number of Payments accounts for the user.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.wallets.accounts.getPaymentsInfo",
	//   "path": "wallets/accounts:getPaymentsInfo",
	//   "request": {
	//     "$ref": "GetPaymentsInfoRequest"
	//   },
	//   "response": {
	//     "$ref": "GetPaymentsInfoResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.wallets.accounts.getReviewStatus":

type WalletsAccountsGetReviewStatusCall struct {
	s                             *Service
	getaccountreviewstatusrequest *GetAccountReviewStatusRequest
	urlParams_                    gensupport.URLParams
	ctx_                          context.Context
	header_                       http.Header
}

// GetReviewStatus: Fetches the review status of a wallet account. This
// is a POST API because it takes in a sso_ticket.
func (r *WalletsAccountsService) GetReviewStatus(getaccountreviewstatusrequest *GetAccountReviewStatusRequest) *WalletsAccountsGetReviewStatusCall {
	c := &WalletsAccountsGetReviewStatusCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.getaccountreviewstatusrequest = getaccountreviewstatusrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *WalletsAccountsGetReviewStatusCall) Fields(s ...googleapi.Field) *WalletsAccountsGetReviewStatusCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *WalletsAccountsGetReviewStatusCall) Context(ctx context.Context) *WalletsAccountsGetReviewStatusCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *WalletsAccountsGetReviewStatusCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *WalletsAccountsGetReviewStatusCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.getaccountreviewstatusrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "wallets/accounts:getReviewStatus")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.wallets.accounts.getReviewStatus" call.
// Exactly one of *GetAccountReviewStatusResponse or error will be
// non-nil. Any non-2xx status code is an error. Response headers are in
// either *GetAccountReviewStatusResponse.ServerResponse.Header or (if a
// response was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *WalletsAccountsGetReviewStatusCall) Do(opts ...googleapi.CallOption) (*GetAccountReviewStatusResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &GetAccountReviewStatusResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Fetches the review status of a wallet account. This is a POST API because it takes in a sso_ticket.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.wallets.accounts.getReviewStatus",
	//   "path": "wallets/accounts:getReviewStatus",
	//   "request": {
	//     "$ref": "GetAccountReviewStatusRequest"
	//   },
	//   "response": {
	//     "$ref": "GetAccountReviewStatusResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.wallets.accounts.getSignals":

type WalletsAccountsGetSignalsCall struct {
	s            *Service
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// GetSignals: Fetches Wallet account signals for troubleshooting Wallet
// issues.
func (r *WalletsAccountsService) GetSignals() *WalletsAccountsGetSignalsCall {
	c := &WalletsAccountsGetSignalsCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	return c
}

// AccountSignals sets the optional parameter "accountSignals":
//
// Possible values:
//   "ACCOUNT_SIGNAL_TYPE_UNSPECIFIED"
//   "CUSTOMER_BVID_DOCS_SUBMISSION_STATUS"
//   "CUSTOMER_OFFLINE_CHECK_DOCS_SUBMISSION_STATUS"
//   "CUSTOMER_RISK_DOCS_SUBMISSION_STATUS"
//   "CUSTOMER_SANCTIONS_DOCS_SUBMISSION_STATUS"
//   "GAIA_ACCOUNT_CHECKOUT_SERVICE_STATUS"
//   "HAS_POSITIVE_WALLET_BALANCE"
//   "IS_VIP"
//   "MOST_RECENT_TRANSACTION_TYPE"
func (c *WalletsAccountsGetSignalsCall) AccountSignals(accountSignals ...string) *WalletsAccountsGetSignalsCall {
	c.urlParams_.SetMulti("accountSignals", append([]string{}, accountSignals...))
	return c
}

// CaseId sets the optional parameter "caseId":
func (c *WalletsAccountsGetSignalsCall) CaseId(caseId string) *WalletsAccountsGetSignalsCall {
	c.urlParams_.Set("caseId", caseId)
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *WalletsAccountsGetSignalsCall) Fields(s ...googleapi.Field) *WalletsAccountsGetSignalsCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *WalletsAccountsGetSignalsCall) IfNoneMatch(entityTag string) *WalletsAccountsGetSignalsCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *WalletsAccountsGetSignalsCall) Context(ctx context.Context) *WalletsAccountsGetSignalsCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *WalletsAccountsGetSignalsCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *WalletsAccountsGetSignalsCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "wallets/accounts:getSignals")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.wallets.accounts.getSignals" call.
// Exactly one of *GetAccountSignalsResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *GetAccountSignalsResponse.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *WalletsAccountsGetSignalsCall) Do(opts ...googleapi.CallOption) (*GetAccountSignalsResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &GetAccountSignalsResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Fetches Wallet account signals for troubleshooting Wallet issues.",
	//   "httpMethod": "GET",
	//   "id": "supportcases.wallets.accounts.getSignals",
	//   "parameters": {
	//     "accountSignals": {
	//       "enum": [
	//         "ACCOUNT_SIGNAL_TYPE_UNSPECIFIED",
	//         "CUSTOMER_BVID_DOCS_SUBMISSION_STATUS",
	//         "CUSTOMER_OFFLINE_CHECK_DOCS_SUBMISSION_STATUS",
	//         "CUSTOMER_RISK_DOCS_SUBMISSION_STATUS",
	//         "CUSTOMER_SANCTIONS_DOCS_SUBMISSION_STATUS",
	//         "GAIA_ACCOUNT_CHECKOUT_SERVICE_STATUS",
	//         "HAS_POSITIVE_WALLET_BALANCE",
	//         "IS_VIP",
	//         "MOST_RECENT_TRANSACTION_TYPE"
	//       ],
	//       "enumDescriptions": [
	//         "",
	//         "",
	//         "",
	//         "",
	//         "",
	//         "",
	//         "",
	//         "",
	//         ""
	//       ],
	//       "location": "query",
	//       "repeated": true,
	//       "type": "string"
	//     },
	//     "caseId": {
	//       "location": "query",
	//       "type": "string"
	//     }
	//   },
	//   "path": "wallets/accounts:getSignals",
	//   "response": {
	//     "$ref": "GetAccountSignalsResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.wallets.accounts.searchReviews":

type WalletsAccountsSearchReviewsCall struct {
	s                           *Service
	searchaccountreviewsrequest *SearchAccountReviewsRequest
	urlParams_                  gensupport.URLParams
	ctx_                        context.Context
	header_                     http.Header
}

// SearchReviews: Initiates a review on the Wallet account. This is a
// POST API because it takes in a sso_ticket. This API could lead to a
// review escalation (increase in priority).
func (r *WalletsAccountsService) SearchReviews(searchaccountreviewsrequest *SearchAccountReviewsRequest) *WalletsAccountsSearchReviewsCall {
	c := &WalletsAccountsSearchReviewsCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.searchaccountreviewsrequest = searchaccountreviewsrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *WalletsAccountsSearchReviewsCall) Fields(s ...googleapi.Field) *WalletsAccountsSearchReviewsCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *WalletsAccountsSearchReviewsCall) Context(ctx context.Context) *WalletsAccountsSearchReviewsCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *WalletsAccountsSearchReviewsCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *WalletsAccountsSearchReviewsCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.searchaccountreviewsrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "wallets/accounts:searchReviews")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.wallets.accounts.searchReviews" call.
// Exactly one of *SearchAccountReviewsResponse or error will be
// non-nil. Any non-2xx status code is an error. Response headers are in
// either *SearchAccountReviewsResponse.ServerResponse.Header or (if a
// response was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *WalletsAccountsSearchReviewsCall) Do(opts ...googleapi.CallOption) (*SearchAccountReviewsResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &SearchAccountReviewsResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Initiates a review on the Wallet account. This is a POST API because it takes in a sso_ticket. This API could lead to a review escalation (increase in priority).",
	//   "httpMethod": "POST",
	//   "id": "supportcases.wallets.accounts.searchReviews",
	//   "path": "wallets/accounts:searchReviews",
	//   "request": {
	//     "$ref": "SearchAccountReviewsRequest"
	//   },
	//   "response": {
	//     "$ref": "SearchAccountReviewsResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.wallets.accounts.paymentInstruments.getHijackReviewsStatus":

type WalletsAccountsPaymentInstrumentsGetHijackReviewsStatusCall struct {
	s                                          *Service
	getpaymentmethodhijackreviewsstatusrequest *GetPaymentMethodHijackReviewsStatusRequest
	urlParams_                                 gensupport.URLParams
	ctx_                                       context.Context
	header_                                    http.Header
}

// GetHijackReviewsStatus: Retrieve status for Payment Method Hijack
// (PMH) reviews. This is a POST API because it takes in a sso_ticket.
func (r *WalletsAccountsPaymentInstrumentsService) GetHijackReviewsStatus(getpaymentmethodhijackreviewsstatusrequest *GetPaymentMethodHijackReviewsStatusRequest) *WalletsAccountsPaymentInstrumentsGetHijackReviewsStatusCall {
	c := &WalletsAccountsPaymentInstrumentsGetHijackReviewsStatusCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.getpaymentmethodhijackreviewsstatusrequest = getpaymentmethodhijackreviewsstatusrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *WalletsAccountsPaymentInstrumentsGetHijackReviewsStatusCall) Fields(s ...googleapi.Field) *WalletsAccountsPaymentInstrumentsGetHijackReviewsStatusCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *WalletsAccountsPaymentInstrumentsGetHijackReviewsStatusCall) Context(ctx context.Context) *WalletsAccountsPaymentInstrumentsGetHijackReviewsStatusCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *WalletsAccountsPaymentInstrumentsGetHijackReviewsStatusCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *WalletsAccountsPaymentInstrumentsGetHijackReviewsStatusCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.getpaymentmethodhijackreviewsstatusrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "wallets/accounts/paymentInstruments:getHijackReviewsStatus")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.wallets.accounts.paymentInstruments.getHijackReviewsStatus" call.
// Exactly one of *GetPaymentMethodHijackReviewsStatusResponse or error
// will be non-nil. Any non-2xx status code is an error. Response
// headers are in either
// *GetPaymentMethodHijackReviewsStatusResponse.ServerResponse.Header or
// (if a response was returned at all) in
// error.(*googleapi.Error).Header. Use googleapi.IsNotModified to check
// whether the returned error was because http.StatusNotModified was
// returned.
func (c *WalletsAccountsPaymentInstrumentsGetHijackReviewsStatusCall) Do(opts ...googleapi.CallOption) (*GetPaymentMethodHijackReviewsStatusResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &GetPaymentMethodHijackReviewsStatusResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Retrieve status for Payment Method Hijack (PMH) reviews. This is a POST API because it takes in a sso_ticket.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.wallets.accounts.paymentInstruments.getHijackReviewsStatus",
	//   "path": "wallets/accounts/paymentInstruments:getHijackReviewsStatus",
	//   "request": {
	//     "$ref": "GetPaymentMethodHijackReviewsStatusRequest"
	//   },
	//   "response": {
	//     "$ref": "GetPaymentMethodHijackReviewsStatusResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.wallets.accounts.paymentInstruments.initiateHijackReviews":

type WalletsAccountsPaymentInstrumentsInitiateHijackReviewsCall struct {
	s                                         *Service
	initiatepaymentmethodhijackreviewsrequest *InitiatePaymentMethodHijackReviewsRequest
	urlParams_                                gensupport.URLParams
	ctx_                                      context.Context
	header_                                   http.Header
}

// InitiateHijackReviews: Initiate Payment Method Hijack (PMH) reviews.
func (r *WalletsAccountsPaymentInstrumentsService) InitiateHijackReviews(initiatepaymentmethodhijackreviewsrequest *InitiatePaymentMethodHijackReviewsRequest) *WalletsAccountsPaymentInstrumentsInitiateHijackReviewsCall {
	c := &WalletsAccountsPaymentInstrumentsInitiateHijackReviewsCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.initiatepaymentmethodhijackreviewsrequest = initiatepaymentmethodhijackreviewsrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *WalletsAccountsPaymentInstrumentsInitiateHijackReviewsCall) Fields(s ...googleapi.Field) *WalletsAccountsPaymentInstrumentsInitiateHijackReviewsCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *WalletsAccountsPaymentInstrumentsInitiateHijackReviewsCall) Context(ctx context.Context) *WalletsAccountsPaymentInstrumentsInitiateHijackReviewsCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *WalletsAccountsPaymentInstrumentsInitiateHijackReviewsCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *WalletsAccountsPaymentInstrumentsInitiateHijackReviewsCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.initiatepaymentmethodhijackreviewsrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "wallets/accounts/paymentInstruments:initiateHijackReviews")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.wallets.accounts.paymentInstruments.initiateHijackReviews" call.
// Exactly one of *InitiatePaymentMethodHijackReviewsResponse or error
// will be non-nil. Any non-2xx status code is an error. Response
// headers are in either
// *InitiatePaymentMethodHijackReviewsResponse.ServerResponse.Header or
// (if a response was returned at all) in
// error.(*googleapi.Error).Header. Use googleapi.IsNotModified to check
// whether the returned error was because http.StatusNotModified was
// returned.
func (c *WalletsAccountsPaymentInstrumentsInitiateHijackReviewsCall) Do(opts ...googleapi.CallOption) (*InitiatePaymentMethodHijackReviewsResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &InitiatePaymentMethodHijackReviewsResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Initiate Payment Method Hijack (PMH) reviews.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.wallets.accounts.paymentInstruments.initiateHijackReviews",
	//   "path": "wallets/accounts/paymentInstruments:initiateHijackReviews",
	//   "request": {
	//     "$ref": "InitiatePaymentMethodHijackReviewsRequest"
	//   },
	//   "response": {
	//     "$ref": "InitiatePaymentMethodHijackReviewsResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.wallets.paymentInstrumentTypeInfos.list":

type WalletsPaymentInstrumentTypeInfosListCall struct {
	s            *Service
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// List: List supported payment instrument types. This API is not
// customer contextual.
func (r *WalletsPaymentInstrumentTypeInfosService) List() *WalletsPaymentInstrumentTypeInfosListCall {
	c := &WalletsPaymentInstrumentTypeInfosListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	return c
}

// CaseId sets the optional parameter "caseId":
func (c *WalletsPaymentInstrumentTypeInfosListCall) CaseId(caseId string) *WalletsPaymentInstrumentTypeInfosListCall {
	c.urlParams_.Set("caseId", caseId)
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *WalletsPaymentInstrumentTypeInfosListCall) Fields(s ...googleapi.Field) *WalletsPaymentInstrumentTypeInfosListCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *WalletsPaymentInstrumentTypeInfosListCall) IfNoneMatch(entityTag string) *WalletsPaymentInstrumentTypeInfosListCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *WalletsPaymentInstrumentTypeInfosListCall) Context(ctx context.Context) *WalletsPaymentInstrumentTypeInfosListCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *WalletsPaymentInstrumentTypeInfosListCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *WalletsPaymentInstrumentTypeInfosListCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "wallets/paymentInstrumentTypeInfos")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.wallets.paymentInstrumentTypeInfos.list" call.
// Exactly one of *ListPaymentInstrumentTypeInfosResponse or error will
// be non-nil. Any non-2xx status code is an error. Response headers are
// in either
// *ListPaymentInstrumentTypeInfosResponse.ServerResponse.Header or (if
// a response was returned at all) in error.(*googleapi.Error).Header.
// Use googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *WalletsPaymentInstrumentTypeInfosListCall) Do(opts ...googleapi.CallOption) (*ListPaymentInstrumentTypeInfosResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ListPaymentInstrumentTypeInfosResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "List supported payment instrument types. This API is not customer contextual.",
	//   "httpMethod": "GET",
	//   "id": "supportcases.wallets.paymentInstrumentTypeInfos.list",
	//   "parameters": {
	//     "caseId": {
	//       "location": "query",
	//       "type": "string"
	//     }
	//   },
	//   "path": "wallets/paymentInstrumentTypeInfos",
	//   "response": {
	//     "$ref": "ListPaymentInstrumentTypeInfosResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.wallets.paymentInstruments.suggestIssuer":

type WalletsPaymentInstrumentsSuggestIssuerCall struct {
	s            *Service
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// SuggestIssuer: Fetches suggestions for payment(credit card, bank,
// direct carrier billing) issuers.
func (r *WalletsPaymentInstrumentsService) SuggestIssuer() *WalletsPaymentInstrumentsSuggestIssuerCall {
	c := &WalletsPaymentInstrumentsSuggestIssuerCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	return c
}

// CaseId sets the optional parameter "caseId":
func (c *WalletsPaymentInstrumentsSuggestIssuerCall) CaseId(caseId string) *WalletsPaymentInstrumentsSuggestIssuerCall {
	c.urlParams_.Set("caseId", caseId)
	return c
}

// IncludeDescription sets the optional parameter "includeDescription":
func (c *WalletsPaymentInstrumentsSuggestIssuerCall) IncludeDescription(includeDescription bool) *WalletsPaymentInstrumentsSuggestIssuerCall {
	c.urlParams_.Set("includeDescription", fmt.Sprint(includeDescription))
	return c
}

// InstrumentTypeToken sets the optional parameter
// "instrumentTypeToken":
func (c *WalletsPaymentInstrumentsSuggestIssuerCall) InstrumentTypeToken(instrumentTypeToken string) *WalletsPaymentInstrumentsSuggestIssuerCall {
	c.urlParams_.Set("instrumentTypeToken", instrumentTypeToken)
	return c
}

// SearchKey sets the optional parameter "searchKey":
func (c *WalletsPaymentInstrumentsSuggestIssuerCall) SearchKey(searchKey string) *WalletsPaymentInstrumentsSuggestIssuerCall {
	c.urlParams_.Set("searchKey", searchKey)
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *WalletsPaymentInstrumentsSuggestIssuerCall) Fields(s ...googleapi.Field) *WalletsPaymentInstrumentsSuggestIssuerCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *WalletsPaymentInstrumentsSuggestIssuerCall) IfNoneMatch(entityTag string) *WalletsPaymentInstrumentsSuggestIssuerCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *WalletsPaymentInstrumentsSuggestIssuerCall) Context(ctx context.Context) *WalletsPaymentInstrumentsSuggestIssuerCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *WalletsPaymentInstrumentsSuggestIssuerCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *WalletsPaymentInstrumentsSuggestIssuerCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "wallets/paymentInstruments:suggestIssuer")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("GET", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.wallets.paymentInstruments.suggestIssuer" call.
// Exactly one of *SuggestPaymentInstrumentIssuerResponse or error will
// be non-nil. Any non-2xx status code is an error. Response headers are
// in either
// *SuggestPaymentInstrumentIssuerResponse.ServerResponse.Header or (if
// a response was returned at all) in error.(*googleapi.Error).Header.
// Use googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *WalletsPaymentInstrumentsSuggestIssuerCall) Do(opts ...googleapi.CallOption) (*SuggestPaymentInstrumentIssuerResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &SuggestPaymentInstrumentIssuerResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Fetches suggestions for payment(credit card, bank, direct carrier billing) issuers.",
	//   "httpMethod": "GET",
	//   "id": "supportcases.wallets.paymentInstruments.suggestIssuer",
	//   "parameters": {
	//     "caseId": {
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "includeDescription": {
	//       "location": "query",
	//       "type": "boolean"
	//     },
	//     "instrumentTypeToken": {
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "searchKey": {
	//       "location": "query",
	//       "type": "string"
	//     }
	//   },
	//   "path": "wallets/paymentInstruments:suggestIssuer",
	//   "response": {
	//     "$ref": "SuggestPaymentInstrumentIssuerResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.youtube.onetimepurchases":

type YoutubeOnetimepurchasesCall struct {
	s                          *Service
	getonetimepurchasesrequest *GetOneTimePurchasesRequest
	urlParams_                 gensupport.URLParams
	ctx_                       context.Context
	header_                    http.Header
}

// Onetimepurchases: Gets a list of one time purchases.
func (r *YoutubeService) Onetimepurchases(getonetimepurchasesrequest *GetOneTimePurchasesRequest) *YoutubeOnetimepurchasesCall {
	c := &YoutubeOnetimepurchasesCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.getonetimepurchasesrequest = getonetimepurchasesrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *YoutubeOnetimepurchasesCall) Fields(s ...googleapi.Field) *YoutubeOnetimepurchasesCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *YoutubeOnetimepurchasesCall) Context(ctx context.Context) *YoutubeOnetimepurchasesCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *YoutubeOnetimepurchasesCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *YoutubeOnetimepurchasesCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.getonetimepurchasesrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "youtube/onetimepurchases")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.youtube.onetimepurchases" call.
// Exactly one of *GetOneTimePurchasesResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *GetOneTimePurchasesResponse.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *YoutubeOnetimepurchasesCall) Do(opts ...googleapi.CallOption) (*GetOneTimePurchasesResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &GetOneTimePurchasesResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Gets a list of one time purchases.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.youtube.onetimepurchases",
	//   "path": "youtube/onetimepurchases",
	//   "request": {
	//     "$ref": "GetOneTimePurchasesRequest"
	//   },
	//   "response": {
	//     "$ref": "GetOneTimePurchasesResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// Pages invokes f for each page of results.
// A non-nil error returned from f will halt the iteration.
// The provided context supersedes any context provided to the Context method.
func (c *YoutubeOnetimepurchasesCall) Pages(ctx context.Context, f func(*GetOneTimePurchasesResponse) error) error {
	c.ctx_ = ctx
	defer func(pt string) { c.getonetimepurchasesrequest.PageToken = pt }(c.getonetimepurchasesrequest.PageToken) // reset paging to original point
	for {
		x, err := c.Do()
		if err != nil {
			return err
		}
		if err := f(x); err != nil {
			return err
		}
		if x.NextPageToken == "" {
			return nil
		}
		c.getonetimepurchasesrequest.PageToken = x.NextPageToken
	}
}

// method id "supportcases.youtube.summary":

type YoutubeSummaryCall struct {
	s                         *Service
	getcustomersummaryrequest *GetCustomerSummaryRequest
	urlParams_                gensupport.URLParams
	ctx_                      context.Context
	header_                   http.Header
}

// Summary: Get Customer Summary Information for entitlements and refund
// history.
func (r *YoutubeService) Summary(getcustomersummaryrequest *GetCustomerSummaryRequest) *YoutubeSummaryCall {
	c := &YoutubeSummaryCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.getcustomersummaryrequest = getcustomersummaryrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *YoutubeSummaryCall) Fields(s ...googleapi.Field) *YoutubeSummaryCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *YoutubeSummaryCall) Context(ctx context.Context) *YoutubeSummaryCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *YoutubeSummaryCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *YoutubeSummaryCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.getcustomersummaryrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "youtube/summary")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.youtube.summary" call.
// Exactly one of *GetCustomerSummaryResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *GetCustomerSummaryResponse.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *YoutubeSummaryCall) Do(opts ...googleapi.CallOption) (*GetCustomerSummaryResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &GetCustomerSummaryResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Get Customer Summary Information for entitlements and refund history.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.youtube.summary",
	//   "path": "youtube/summary",
	//   "request": {
	//     "$ref": "GetCustomerSummaryRequest"
	//   },
	//   "response": {
	//     "$ref": "GetCustomerSummaryResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// Pages invokes f for each page of results.
// A non-nil error returned from f will halt the iteration.
// The provided context supersedes any context provided to the Context method.
func (c *YoutubeSummaryCall) Pages(ctx context.Context, f func(*GetCustomerSummaryResponse) error) error {
	c.ctx_ = ctx
	defer func(pt string) { c.getcustomersummaryrequest.PageToken = pt }(c.getcustomersummaryrequest.PageToken) // reset paging to original point
	for {
		x, err := c.Do()
		if err != nil {
			return err
		}
		if err := f(x); err != nil {
			return err
		}
		if x.NextPageToken == "" {
			return nil
		}
		c.getcustomersummaryrequest.PageToken = x.NextPageToken
	}
}

// method id "supportcases.youtube.components.cancel":

type YoutubeComponentsCancelCall struct {
	s                       *Service
	cancelcomponentsrequest *CancelComponentsRequest
	urlParams_              gensupport.URLParams
	ctx_                    context.Context
	header_                 http.Header
}

// Cancel: Cancel/Downgrade component(s).
func (r *YoutubeComponentsService) Cancel(cancelcomponentsrequest *CancelComponentsRequest) *YoutubeComponentsCancelCall {
	c := &YoutubeComponentsCancelCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.cancelcomponentsrequest = cancelcomponentsrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *YoutubeComponentsCancelCall) Fields(s ...googleapi.Field) *YoutubeComponentsCancelCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *YoutubeComponentsCancelCall) Context(ctx context.Context) *YoutubeComponentsCancelCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *YoutubeComponentsCancelCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *YoutubeComponentsCancelCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.cancelcomponentsrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "youtube/components:cancel")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.youtube.components.cancel" call.
// Exactly one of *CancelComponentsResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *CancelComponentsResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *YoutubeComponentsCancelCall) Do(opts ...googleapi.CallOption) (*CancelComponentsResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &CancelComponentsResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Cancel/Downgrade component(s).",
	//   "httpMethod": "POST",
	//   "id": "supportcases.youtube.components.cancel",
	//   "path": "youtube/components:cancel",
	//   "request": {
	//     "$ref": "CancelComponentsRequest"
	//   },
	//   "response": {
	//     "$ref": "CancelComponentsResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// method id "supportcases.youtube.entitlements.cancel":

type YoutubeEntitlementsCancelCall struct {
	s                        *Service
	cancelentitlementrequest *CancelEntitlementRequest
	urlParams_               gensupport.URLParams
	ctx_                     context.Context
	header_                  http.Header
}

// Cancel: Cancel entitlement.
func (r *YoutubeEntitlementsService) Cancel(cancelentitlementrequest *CancelEntitlementRequest) *YoutubeEntitlementsCancelCall {
	c := &YoutubeEntitlementsCancelCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.cancelentitlementrequest = cancelentitlementrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *YoutubeEntitlementsCancelCall) Fields(s ...googleapi.Field) *YoutubeEntitlementsCancelCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *YoutubeEntitlementsCancelCall) Context(ctx context.Context) *YoutubeEntitlementsCancelCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *YoutubeEntitlementsCancelCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *YoutubeEntitlementsCancelCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.cancelentitlementrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "youtube/entitlements:cancel")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.youtube.entitlements.cancel" call.
// Exactly one of *CancelEntitlementResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *CancelEntitlementResponse.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *YoutubeEntitlementsCancelCall) Do(opts ...googleapi.CallOption) (*CancelEntitlementResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &CancelEntitlementResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Cancel entitlement.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.youtube.entitlements.cancel",
	//   "path": "youtube/entitlements:cancel",
	//   "request": {
	//     "$ref": "CancelEntitlementRequest"
	//   },
	//   "response": {
	//     "$ref": "CancelEntitlementResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}

// method id "supportcases.youtube.transactions.listByEntitlements":

type YoutubeTransactionsListByEntitlementsCall struct {
	s                        *Service
	listtransactionsrequest1 *ListTransactionsRequest1
	urlParams_               gensupport.URLParams
	ctx_                     context.Context
	header_                  http.Header
}

// ListByEntitlements: Get all transactions for entitlements.
func (r *YoutubeTransactionsService) ListByEntitlements(listtransactionsrequest1 *ListTransactionsRequest1) *YoutubeTransactionsListByEntitlementsCall {
	c := &YoutubeTransactionsListByEntitlementsCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.listtransactionsrequest1 = listtransactionsrequest1
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *YoutubeTransactionsListByEntitlementsCall) Fields(s ...googleapi.Field) *YoutubeTransactionsListByEntitlementsCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *YoutubeTransactionsListByEntitlementsCall) Context(ctx context.Context) *YoutubeTransactionsListByEntitlementsCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *YoutubeTransactionsListByEntitlementsCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *YoutubeTransactionsListByEntitlementsCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.listtransactionsrequest1)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "youtube/transactions:listByEntitlements")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.youtube.transactions.listByEntitlements" call.
// Exactly one of *ListTransactionsResponse1 or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *ListTransactionsResponse1.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *YoutubeTransactionsListByEntitlementsCall) Do(opts ...googleapi.CallOption) (*ListTransactionsResponse1, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &ListTransactionsResponse1{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Get all transactions for entitlements.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.youtube.transactions.listByEntitlements",
	//   "path": "youtube/transactions:listByEntitlements",
	//   "request": {
	//     "$ref": "ListTransactionsRequest1"
	//   },
	//   "response": {
	//     "$ref": "ListTransactionsResponse1"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases.readonly"
	//   ]
	// }

}

// Pages invokes f for each page of results.
// A non-nil error returned from f will halt the iteration.
// The provided context supersedes any context provided to the Context method.
func (c *YoutubeTransactionsListByEntitlementsCall) Pages(ctx context.Context, f func(*ListTransactionsResponse1) error) error {
	c.ctx_ = ctx
	defer func(pt string) { c.listtransactionsrequest1.PageToken = pt }(c.listtransactionsrequest1.PageToken) // reset paging to original point
	for {
		x, err := c.Do()
		if err != nil {
			return err
		}
		if err := f(x); err != nil {
			return err
		}
		if x.NextPageToken == "" {
			return nil
		}
		c.listtransactionsrequest1.PageToken = x.NextPageToken
	}
}

// method id "supportcases.youtube.transactions.refund":

type YoutubeTransactionsRefundCall struct {
	s                         *Service
	refundtransactionsrequest *RefundTransactionsRequest
	urlParams_                gensupport.URLParams
	ctx_                      context.Context
	header_                   http.Header
}

// Refund: Refund a batch of transactions.
func (r *YoutubeTransactionsService) Refund(refundtransactionsrequest *RefundTransactionsRequest) *YoutubeTransactionsRefundCall {
	c := &YoutubeTransactionsRefundCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.refundtransactionsrequest = refundtransactionsrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *YoutubeTransactionsRefundCall) Fields(s ...googleapi.Field) *YoutubeTransactionsRefundCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *YoutubeTransactionsRefundCall) Context(ctx context.Context) *YoutubeTransactionsRefundCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *YoutubeTransactionsRefundCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *YoutubeTransactionsRefundCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.refundtransactionsrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	urls := googleapi.ResolveRelative(c.s.BasePath, "youtube/transactions:refund")
	urls += "?" + c.urlParams_.Encode()
	req, _ := http.NewRequest("POST", urls, body)
	req.Header = reqHeaders
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "supportcases.youtube.transactions.refund" call.
// Exactly one of *RefundTransactionsResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *RefundTransactionsResponse.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *YoutubeTransactionsRefundCall) Do(opts ...googleapi.CallOption) (*RefundTransactionsResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, &googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		}
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, err
	}
	ret := &RefundTransactionsResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := json.NewDecoder(res.Body).Decode(target); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Refund a batch of transactions.",
	//   "httpMethod": "POST",
	//   "id": "supportcases.youtube.transactions.refund",
	//   "path": "youtube/transactions:refund",
	//   "request": {
	//     "$ref": "RefundTransactionsRequest"
	//   },
	//   "response": {
	//     "$ref": "RefundTransactionsResponse"
	//   },
	//   "scopes": [
	//     "https://www.googleapis.com/auth/cases"
	//   ]
	// }

}
